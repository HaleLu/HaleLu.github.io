<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Spring进阶(1) - IoC容器]]></title>
      <url>https://HaleLu.github.io/2019/07/spring-1/</url>
      <content type="html"><![CDATA[<p>本系列基于 Spring Framework 文档深入探究 Spring 的使用姿势及原理。</p>
<p>一些简单概念略过不讲，希望阅读这篇文章的你对 Spring 有一定了解。</p>
<p>本文讲第一部分——IoC 容器、bean 概述、依赖注入和 bean 的作用域。</p>
<a id="more"></a>

<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Spring Framework 的 IoC 容器主要在 org.springframework.beans 和 org.springframework.context 这两个包里，BeanFactory 接口提供了更高级的注册机制能够管理任意类型的对象。 ApplicationContext 接口继承了 BeanFactory 接口，并添加了更易与 Spring AOP 集成的特性、消息资源管理（用于国际化）、事件发布、应用层特定上下文（例如用于 web 应用的 WebApplicationContext）。简而言之，BeanFactory 提供了注册框架和基础功能，ApplicationContext 增加了更多企业级应用的特定功能。本章重点讲 ApplicationContext，关于 BeanFactory 详见下文。</p>
<h2 id="容器概论"><a href="#容器概论" class="headerlink" title="容器概论"></a>容器概论</h2><p>ApplicationContext 接口表示 Spring 的 IoC 容器，它负责实例化(instantiate)、配置和组装 beans。ApplicationContext 通过从 XML、注解或是代码得知哪些类需要被加载、以何种方式加载、依赖关系是什么。</p>
<p>Spring 提供了一些 ApplicationContext 的实现，常见的例如 ClassPathXmlApplicationContext 和 FileSystemXmlApplicationContext，都是通过 XML 配置来实现的。大多数场景下，用户代码并不需要自己实例化出一个 Spring IoC 容器，可以通过一个简单的 web.xml 便可实现。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/daoContext.xml /WEB-INF/applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>下图简要展示了 Spring IoC 容器的工作原理，你的 POJOs 结合配置项元数据，这样，ApplicationContext 创建并初始化后，你就拥有了一个配置完全且可运行的系统/应用。</p>
<p><img src="./container-magic.png" alt="Spring IoC"></p>
<h3 id="配置项元数据-Configuration-Metadata"><a href="#配置项元数据-Configuration-Metadata" class="headerlink" title="配置项元数据(Configuration Metadata)"></a>配置项元数据(Configuration Metadata)</h3><p>上文说了，Spring IoC 容器使用配置项元数据的形式配置，支持传统的 XML 格式，从 Spring 2.5 开始支持基于注解的配置项元数据，从 3.0 开始，Spring JavaConfig 提供的很多特性使你可以通过一些类来定义 beans，包括 @Configuration、 @Bean、@Import 以及 @DependsOn 等注解。</p>
<p>Spring 配置项包含一个或多个容器管理的 bean 定义(definition)。在 XML 中使用<code>&lt;beans/&gt;</code>中的<code>&lt;bean/&gt;</code>标签，代码方式则在<code>@Configuration</code>注解的类中使用<code>@Bean</code>注解的方法。通常我们用其定义服务层对象、DAOs、展示对象、基础设置对象（例如一些框架工厂类）等等。通常在容器中不注册细粒度的域对象，因为这通常是 DAOs 的责任，应当又业务逻辑创建和加载这些对象。不过，你可以使用 Spring 的 AspectJ 集成来注册在 IoC 容器控制之外创建的对象。详见下文。</p>
<p>以下是一个典型的 XML 配置项元数据。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"..."</span> <span class="attr">class</span>=<span class="string">"..."</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- collaborators and configuration for this bean go here --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"..."</span> <span class="attr">class</span>=<span class="string">"..."</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- collaborators and configuration for this bean go here --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- more bean definitions go here --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>See Dependencies for more information.</p>
<h3 id="实例化容器"><a href="#实例化容器" class="headerlink" title="实例化容器"></a>实例化容器</h3><p>我们可以从各种外部资源（本地文件系统、Java <code>CLASSPATH</code>等）指定 ApplicationContext 构造时使用的资源文件。官方文档此处给了一个简单的例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"services.xml"</span>, <span class="string">"daos.xml"</span>);</span><br></pre></td></tr></table></figure>

<p>services.xml:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- services --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"petStore"</span> <span class="attr">class</span>=<span class="string">"org.springframework.samples.jpetstore.services.PetStoreServiceImpl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"accountDao"</span> <span class="attr">ref</span>=<span class="string">"accountDao"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"itemDao"</span> <span class="attr">ref</span>=<span class="string">"itemDao"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- additional collaborators and configuration for this bean go here --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- more bean definitions for services go here --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>daos.xml:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountDao"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"org.springframework.samples.jpetstore.dao.jpa.JpaAccountDao"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- additional collaborators and configuration for this bean go here --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"itemDao"</span> <span class="attr">class</span>=<span class="string">"org.springframework.samples.jpetstore.dao.jpa.JpaItemDao"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- additional collaborators and configuration for this bean go here --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- more bean definitions for data access objects go here --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>从其他 XML 文件导入 beans</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"services.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"resources/messageSource.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"/resources/themeSource.xml"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bean1"</span> <span class="attr">class</span>=<span class="string">"..."</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bean2"</span> <span class="attr">class</span>=<span class="string">"..."</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>namespace 也提供了 import、context 和 util 等功能，此处不再详细解释说明。</p>
<p><em>注：虽然可以使用<code>../</code>这样的相对路径，但是不推荐，这可能会导致引用了应用之外的文件，例如<code>classpath:../services.xml</code></em></p>
<h3 id="使用容器"><a href="#使用容器" class="headerlink" title="使用容器"></a>使用容器</h3><p>ApplicationContext 是一个高级工厂，其维护了不同 beans 的注册项和他们的依赖。通过使用方法<code>T getBean(String name, Class&lt;T&gt; requiredType)</code>你可以获取到这些 bean 的实例。</p>
<p>举例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// create and configure beans</span></span><br><span class="line">ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"services.xml"</span>, <span class="string">"daos.xml"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// retrieve configured instance</span></span><br><span class="line">PetStoreService service = context.getBean(<span class="string">"petStore"</span>, PetStoreService.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">// use configured instance</span></span><br><span class="line">List&lt;String&gt; userList = service.getUsernameList();</span><br></pre></td></tr></table></figure>

<p>有一种最灵活的方式是<code>GenericApplicationContext</code>结合 reader 委托，以 XmlBeanDefinitionReader 为例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GenericApplicationContext context = <span class="keyword">new</span> GenericApplicationContext();</span><br><span class="line"><span class="keyword">new</span> XmlBeanDefinitionReader(context).loadBeanDefinitions(<span class="string">"services.xml"</span>, <span class="string">"daos.xml"</span>);</span><br><span class="line">context.refresh();</span><br></pre></td></tr></table></figure>

<p>你可以混合使用不同的 reader 委托到同一个<code>ApplicationContext</code>上，以便从不同的源注册 bean。</p>
<p>尽管提供了 getBean 方法来获取 bean，ApplicationContext 也提供了一些其他方法来获取，但是事实上应用程序代码不应当通过这些 Spring API 来获取 bean。</p>
<h2 id="Bean-概论"><a href="#Bean-概论" class="headerlink" title="Bean 概论"></a>Bean 概论</h2><p>一个 IoC 容器管理一个或多个 bean，这些 bean 根据你提供给容器的配置项元数据来构建。</p>
<p>在容器内部，这些 bean 定义以<code>BeanDefinition</code>对象的形式存在，它通常包含以下元数据：</p>
<ul>
<li>指定包的类名：通常是 bean 的实现类</li>
<li>Bean 的配置方式：定义 bean 在容器中的行为，包括作用域(scope)、生命周期回调(lifecycle callbacks)等</li>
<li>对其他 bean 的引用：这些引用也被称为 bean 的合作/依赖项</li>
<li>在新创建对象中的其他配置设置：比如对于管理连接池的 bean 而言可以包括连接池的大小、最大连接数等</li>
</ul>
<table>
<thead>
<tr>
<th>属性</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>Class</td>
<td>[实例化](&lt;#bean\ 的实例化&gt;)</td>
</tr>
<tr>
<td>Name</td>
<td>[命名](&lt;#bean\ 的命名&gt;)</td>
</tr>
<tr>
<td>Scope</td>
<td>作用域</td>
</tr>
<tr>
<td>Constructor arguments</td>
<td><a href="#依赖">依赖注入</a></td>
</tr>
<tr>
<td>Properties</td>
<td><a href="#依赖">依赖注入</a></td>
</tr>
<tr>
<td>Autowiring mode</td>
<td>自动注入合作项</td>
</tr>
<tr>
<td>Lazy initialization mode</td>
<td>懒加载</td>
</tr>
<tr>
<td>Initialization method</td>
<td>初始化回调</td>
</tr>
<tr>
<td>Destruction method</td>
<td>销毁回调</td>
</tr>
</tbody></table>
<p>除了 bean 定义说明了怎样创建一个指定的 bean，ApplicationContext 也允许注册用户在容器外创建好的对象。通过 ApplicationContext 下 BeanFactory 的<code>getBeanFactory()</code>方法可以拿到 BeanFactory 的默认 DefaultListableBeanFactory 实现。DefaultListableBeanFactory 支持通过<code>registerSingleton(...)</code>和<code>registerBeanDefinition(..)</code>方法注册 bean。当然，通常我们只使用常规 bean 定义元数据。</p>
<p><em>注：我们应当尽早注册 bean 元数据和人工指定的单例，这样才能保证容器实例化时正确注入他们。尽管某种程度上支持重写已经存在的元数据和单例，但是运行时注册新的 bean（同时有并行访问工厂）官方并不支持，这可能导致并行获取异常以及容器的状态异常等。</em></p>
<h3 id="bean-的命名"><a href="#bean-的命名" class="headerlink" title="bean 的命名"></a>bean 的命名</h3><p>每个 bean 都有一个或多个标识符，标识符在容器内必须唯一。通常 bean 只有一个标识符，但有时有些 bean 也需要别名(aliase)。</p>
<blockquote>
<h3 id="bean-命名公约"><a href="#bean-命名公约" class="headerlink" title="bean 命名公约"></a>bean 命名公约</h3><p>公约使用标准 Java 公约的实例字段命名规则。bean 名称以小写字母开头，驼峰命名，例如<code>accountManager</code>、<code>accountService</code>、<code>userDao</code>、<code>loginController</code>等。</p>
<p>一致的命名风格可以使你的配置项更容易阅读和理解，并且如果你使用 AOP 的话，在为一系列以命名关联的 bean 配置 advice 时会很有帮助。</p>
</blockquote>
<p>你可以使用 name 指定名称，alias 指定别名，此处过于简单不展开细讲。</p>
<h3 id="bean-的实例化"><a href="#bean-的实例化" class="headerlink" title="bean 的实例化"></a>bean 的实例化</h3><p>bean 定义本质上是如何创建一个或多个对象的方法的定义，当容器需要拿一个 bean 时它会寻找这个定义并使用定义里保存的配置项元数据创建（或获取）一个实际的对象。通常情况下，bean 需要指定 class（除非工厂方法和 bean 定义继承）。我们通常有两种方式指定 class：</p>
<ul>
<li>通常情况下，容器直接通过反射取到其构造函数，相当于 new 出一个对象放进容器；</li>
<li>少数情况下，容器调用静态工厂方法创建对象，这个静态工厂方法返回的对象可能和 class 相同，也可能完全不同。</li>
</ul>
<blockquote>
<p><em>内部类名</em></p>
<p>如果你想配置一个静态内部类的 bean，你需要使用内部类的二进制名称；</p>
<p>比如在 com.example 包中有一个 SomeThing 类，SomeThing 类下有一个 OtherThing 静态内部类，那么这个 bean 定义的 class 应当是 <code>com.example.SomeThing$OtherThing</code>。使用 <code>$</code> 符号分隔内外的类名。</p>
</blockquote>
<h4 id="使用构造器实例化"><a href="#使用构造器实例化" class="headerlink" title="使用构造器实例化"></a>使用构造器实例化</h4><p>当我们通过构造方法创建 bean 时，所有普通类都可以使用并与 Spring 兼容。也就是说，开发的类不需要实现任何特定接口或以特定方式编码。 只需指定 bean 类就足够了。但是，根据为该特定 bean 使用的 IoC 类型，我们可能需要一个默认无参构造函数。</p>
<p>Spring IoC 容器几乎可以管理你希望它管理的任何类。 它不仅可以管理真正的 JavaBeans。大多数情况下我们更喜欢实际只有一个默认无参构造函数的 JavaBeans，提供一些适当的 setter 和 getter。当然你也可以在容器中指定其他外部的非 bean 风格的类。例如，如果你需要使用完全不符合 JavaBean 规范的旧连接池，Spring 也可以对其进行管理。</p>
<p>至于为构造函数提供参数的机制以及如何在构造对象后设置对象实例属性的，详见下文的依赖注入。</p>
<h4 id="使用静态工厂方法实例化"><a href="#使用静态工厂方法实例化" class="headerlink" title="使用静态工厂方法实例化"></a>使用静态工厂方法实例化</h4><p>定义使用静态工厂方法创建的 bean 时，需要使用 class 属性指定包含静态工厂方法的类并使用 factory-method 指定对应的工厂方法。此工厂方法（可以有参数）会创建一个对象，容器会把它当做构造函数创建的对象。这种 bean 定义的一个用途是在老式代码中调用静态工厂。</p>
<p>举例：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"clientService"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"examples.ClientService"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">factory-method</span>=<span class="string">"createInstance"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ClientService clientService = <span class="keyword">new</span> ClientService();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ClientService</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ClientService <span class="title">createInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> clientService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="使用实例的工厂方法实例化"><a href="#使用实例的工厂方法实例化" class="headerlink" title="使用实例的工厂方法实例化"></a>使用实例的工厂方法实例化</h4><p>与通过静态工厂方法实例化类似，使用实例工厂方法进行实例化会从容器调用现有 bean 的非静态方法来创建新 bean。 要使用此机制，请将 class 属性保留为空，并在 factory-bean 属性中指定当前（或父级或祖先）容器中 bean 的名称，该容器包含要调用以创建对象的实例方法。 使用 factory-method 属性设置工厂方法本身的名称。 以下示例显示如何配置此类 bean：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- the factory bean, which contains a method called createInstance() --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"serviceLocator"</span> <span class="attr">class</span>=<span class="string">"examples.DefaultServiceLocator"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- inject any dependencies required by this locator bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- the bean to be created via the factory bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"clientService"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">factory-bean</span>=<span class="string">"serviceLocator"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">factory-method</span>=<span class="string">"createClientServiceInstance"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultServiceLocator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ClientService clientService = <span class="keyword">new</span> ClientServiceImpl();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ClientService <span class="title">createClientServiceInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> clientService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当然，一个工厂类可以有多个工厂方法。</p>
<p><em>注：在 Spring 文档中，“工厂 bean”是指在 Spring 容器中配置并通过实例或静态工厂方法创建对象的 bean。 相比之下，FactoryBean（注意大小写）是指特定于 Spring 的 FactoryBean。</em></p>
<h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><p>典型的企业应用程序不会只包含单个对象（或 Spring 说法中的 bean）。即使是最简单的应用程序也有一些对象可以协同工作，以呈现最终用户所看到的连贯应用程序。这节讲如何定义多个独立的 bean 定义，以及对象协作实现目标的完全实现的应用程序。</p>
<h3 id="依赖注入-DI"><a href="#依赖注入-DI" class="headerlink" title="依赖注入(DI)"></a>依赖注入(DI)</h3><p>依赖注入主要有两种方式：<a href="#基于构造函数的依赖注入">基于构造函数</a>和[基于 Setter](&lt;#基于\ Setter\ 的依赖注入&gt;)。</p>
<h4 id="基于构造函数的依赖注入"><a href="#基于构造函数的依赖注入" class="headerlink" title="基于构造函数的依赖注入"></a>基于构造函数的依赖注入</h4><p>基于构造函数的 DI 由容器调用具有多个参数的构造函数来完成，每个参数表示一个依赖项。这跟调用具有相同参数的静态工厂方法来构造 bean 是等效的，下面的解释同样适用于静态工厂方法。举个简单的 POJO 的例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleMovieLister</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// the SimpleMovieLister has a dependency on a MovieFinder</span></span><br><span class="line">    <span class="keyword">private</span> MovieFinder movieFinder;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// a constructor so that the Spring container can inject a MovieFinder</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleMovieLister</span><span class="params">(MovieFinder movieFinder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.movieFinder = movieFinder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// business logic that actually uses the injected MovieFinder is omitted...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="构造函数参数解析"><a href="#构造函数参数解析" class="headerlink" title="构造函数参数解析"></a>构造函数参数解析</h5><p>容器会通过参数的类型与 bean 进行匹配，如果 bean 定义的构造函数参数中不存在歧义，那么在 bean 实例化时，这些参数按照定义中构造函数参数的顺序提供给对应的构造函数。</p>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> x.y;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThingOne</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThingOne</span><span class="params">(ThingTwo thingTwo, ThingThree thingThree)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>假如 ThingTwo 和 ThingThree 类没有继承上的关联，也就是不存在歧义，那么以下的配置就可以了，不需要在 <code>&lt;constructor-arg/&gt;</code> 元素中显式指定构造函数参数下标或类型。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"beanOne"</span> <span class="attr">class</span>=<span class="string">"x.y.ThingOne"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"beanTwo"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"beanThree"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"beanTwo"</span> <span class="attr">class</span>=<span class="string">"x.y.ThingTwo"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"beanThree"</span> <span class="attr">class</span>=<span class="string">"x.y.ThingThree"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>当使用简单类型时，例如 <code>&lt;value&gt;true&lt;/value&gt;</code>，Spring 无法确定值的类型，因此无法在没有帮助的情况下按类型进行匹配。例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> examples;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Number of years to calculate the Ultimate Answer</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> years;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The Answer to Life, the Universe, and Everything</span></span><br><span class="line">    <span class="keyword">private</span> String ultimateAnswer;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ExampleBean</span><span class="params">(<span class="keyword">int</span> years, String ultimateAnswer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.years = years;</span><br><span class="line">        <span class="keyword">this</span>.ultimateAnswer = ultimateAnswer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="构造函数参数类型匹配"><a href="#构造函数参数类型匹配" class="headerlink" title="构造函数参数类型匹配"></a>构造函数参数类型匹配</h5><p>为解决前面的问题，需要使用 type 属性显式指定构造函数参数的类型，如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"exampleBean"</span> <span class="attr">class</span>=<span class="string">"examples.ExampleBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"int"</span> <span class="attr">value</span>=<span class="string">"7500000"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span> <span class="attr">value</span>=<span class="string">"42"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="构造函数参数下标"><a href="#构造函数参数下标" class="headerlink" title="构造函数参数下标"></a>构造函数参数下标</h5><p>可以使用 index 属性显式指定构造函数参数的下标：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"exampleBean"</span> <span class="attr">class</span>=<span class="string">"examples.ExampleBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"7500000"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"1"</span> <span class="attr">value</span>=<span class="string">"42"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>除了解决多个简单值的歧义之外，指定索引还可以解决构造函数具有相同类型的多参数的歧义。</p>
<p><em>注：下标从 0 开始。</em></p>
<h5 id="构造函数参数名称"><a href="#构造函数参数名称" class="headerlink" title="构造函数参数名称"></a>构造函数参数名称</h5><p>还可以使用构造函数参数名称进行值消歧：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"exampleBean"</span> <span class="attr">class</span>=<span class="string">"examples.ExampleBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"years"</span> <span class="attr">value</span>=<span class="string">"7500000"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"ultimateAnswer"</span> <span class="attr">value</span>=<span class="string">"42"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>但这种方式只在 debug 模式下有效（release 模式会改变参数名），或者使用 <code>@ConstructorProperties</code> 注解指定参数名：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> examples;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Fields omitted</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@ConstructorProperties</span>(&#123;<span class="string">"years"</span>, <span class="string">"ultimateAnswer"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ExampleBean</span><span class="params">(<span class="keyword">int</span> years, String ultimateAnswer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.years = years;</span><br><span class="line">        <span class="keyword">this</span>.ultimateAnswer = ultimateAnswer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="基于-Setter-的依赖注入"><a href="#基于-Setter-的依赖注入" class="headerlink" title="基于 Setter 的依赖注入"></a>基于 Setter 的依赖注入</h4><p>基于 Setter 的依赖注入指在调用无参数构造函数或无参静态工厂方法来实例化 bean 之后，容器调用 setter 方法注入 bean。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleMovieLister</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// the SimpleMovieLister has a dependency on the MovieFinder</span></span><br><span class="line">    <span class="keyword">private</span> MovieFinder movieFinder;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// a setter method so that the Spring container can inject a MovieFinder</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMovieFinder</span><span class="params">(MovieFinder movieFinder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.movieFinder = movieFinder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// business logic that actually uses the injected MovieFinder is omitted...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>ApplicationContext</code>不仅支持基于构造函数和基于 Setter 的依赖注入，甚至支持两者同时使用。如果使用了 Setter 注意添加 @Required 注解使得 bean 必须被注入。</p>
<p>Spring 团队通常提倡构造函数注入，因为它允许我们将应用程序组件实现为不可变对象，并确保所需的依赖项不是 null。值得一提的是，如果构造函数有太多的参数参数说明该类可能有太多的责任，最好拆分责任以更好地分离关注点。</p>
<p>Setter 注入应主要仅用于可在类中指定合理默认值的可选依赖项。否则，必须在代码使用依赖项的任何位置执行非空检查。setter 注入的一个好处是 setter 方法使该类的对象可以在以后重新配置或重新注入。JMX 最常用这种模式。</p>
<h4 id="依赖性解决过程"><a href="#依赖性解决过程" class="headerlink" title="依赖性解决过程"></a>依赖性解决过程</h4><p>容器执行 bean 依赖性解析，如下所示：</p>
<ul>
<li><code>ApplicationContext</code> 创建和初始化所有 bean 的配置项元数据。配置项元数据可以由 XML，Java 代码或注解指定。</li>
<li>对于每个 bean，它的依赖关系以属性，构造函数参数或静态工厂方法的参数的形式表示。当创建 bean 时，这些依赖项会被提供给 bean。</li>
<li>每个属性或构造函数参数都是要设置的值的实际定义，或者是对容器中另一个 bean 的引用。</li>
<li>作为值的每个属性或构造函数参数都从其指定的格式转换为该属性或构造函数参数的实际类型。默认情况下，Spring 能够转换成字符串格式提供给所有内置类型的值，例如 int， long，String，boolean 等。</li>
</ul>
<p>Spring 容器在创建容器时验证每个 bean 的配置，但是直到实际创建 bean 的时候才会设置这些 bean 属性。创建时容器会创建单例作用域且需要预加载（默认）的 Bean，其他的仅在请求时才创建 bean。创建 bean 时可能会构造一张 bean 的图，因为 bean 的依赖及其依赖的依赖（等等）都需要创建和分配。这些依赖项之间的不匹配可能较晚才会被发现 —— 也就是第一次创建受影响的 bean 时。</p>
<blockquote>
<h3 id="循环依赖"><a href="#循环依赖" class="headerlink" title="循环依赖"></a>循环依赖</h3><p>使用构造函数注入时可能出现无法解析循环依赖关系的情况。</p>
<p>例如：类 A 通过构造函数注入类 B 的实例，而类 B 通过构造函数注入类 A 的实例。如果将 A 类和 B 类的 bean 配置为相互注入，则 Spring IoC 容器会在运行时检测到此循环引用，并抛出一个 BeanCurrentlyInCreationException。</p>
<p>一种可能的解决方案是改用 setter 方式注入。换句话说，尽管不推荐，但可以使用 setter 注入配置循环依赖项。</p>
<p>与典型情况（没有循环依赖）不同，bean A 和 bean B 之间的循环依赖强制其中一个 bean 在完全初始化之前被注入另一个 bean（类似鸡与蛋的场景）。</p>
</blockquote>
<p>你通常可以相信 Spring 没有问题。容器会在加载时检测配置问题，例如对不存在的 bean 和循环依赖关系的引用。当实际创建 bean 时，Spring 会尽可能晚地设置属性并解析依赖关系。这意味着如果创建该对象或其中一个依赖项时出现问题（比如 bean 因缺失或无效属性而抛出异常）那么在请求对象时，正确加载的 Spring 容器才会抛出异常。这可能会导致无法及时暴露一些配置的问题，这就是默认情况下 ApplicationContext 需要预加载单例 bean 的原因。以一些前期时间和内存为代价，ApplicationContext 会在创建时就发现配置问题。当然我们也可以指定 bean 懒加载来代替预加载。</p>
<p>如果不存在循环依赖关系，当一个或多个协作 bean 被注入依赖 bean 时，每个协作 bean 在被注入依赖 bean 之前被初始化。这意味着，如果 bean A 依赖于 bean B，那么 Spring IoC 容器在调用 bean A 上的 setter 方法之前需要初始化 bean B。也就是说，bean 会被实例化（如果它不是预先实例化的单例），设置依赖项，相关的生命周期方法（如配置的 init 方法 或 InitializingBean 回调方法）也会被调用。静态工厂方法也是一样。</p>
<h3 id="依赖关系和配置的详细说明"><a href="#依赖关系和配置的详细说明" class="headerlink" title="依赖关系和配置的详细说明"></a>依赖关系和配置的详细说明</h3><p>bean 属性和构造函数参数可以是其他 bean 的引用，也可以是内联定义的值，因此 Spring 的 XML 配置 <code>&lt;property/&gt;</code> 和 <code>&lt;constructor-arg/&gt;</code> 支持以下类型。</p>
<h4 id="值类型"><a href="#值类型" class="headerlink" title="值类型"></a>值类型</h4><p><code>&lt;property /&gt;</code> 元素的 value 属性将属性或构造函数参数指定为人类可读的字符串表示形式。 Spring 的转换服务用于将这些值从 String 转换为属性或参数的实际类型。 以下示例显示了要设置的各种值：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myDataSource"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- results in a setDriverClassName(String) call --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/mydb"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"masterkaoli"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>以下示例使用 p-namespace 进行更简洁的 XML 配置：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    https://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myDataSource"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">destroy-method</span>=<span class="string">"close"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">p:driverClassName</span>=<span class="string">"com.mysql.jdbc.Driver"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">p:url</span>=<span class="string">"jdbc:mysql://localhost:3306/mydb"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">p:username</span>=<span class="string">"root"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">p:password</span>=<span class="string">"masterkaoli"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>也可以配置 java.util.Properties 实例，如下所示：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mappings"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- typed as a java.util.Properties --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"properties"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">            jdbc.driver.className=com.mysql.jdbc.Driver</span><br><span class="line">            jdbc.url=jdbc:mysql://localhost:3306/mydb</span><br><span class="line">        <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Spring 容器通过使用 JavaBeans 机制将 <code>&lt;value/&gt;</code> 元素内的文本转换为 java.util.Properties 实例 PropertyEditor。这是一个很好的快捷方式，也是 Spring 团队支持 <code>&lt;value/&gt;</code> 在 value 属性样式上使用嵌套元素的少数几个地方之一。</p>
<h5 id="idref-标签"><a href="#idref-标签" class="headerlink" title="idref 标签"></a>idref 标签</h5><p>idref 标签只是一种防错方法，可以将容器中另一个 bean 的 id（字符串值 - 而不是引用）传递给 <code>&lt;constructor-arg/&gt;</code> 或 <code>&lt;property/&gt;</code> 标签。如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"theTargetBean"</span> <span class="attr">class</span>=<span class="string">"..."</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"theClientBean"</span> <span class="attr">class</span>=<span class="string">"..."</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetName"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">idref</span> <span class="attr">bean</span>=<span class="string">"theTargetBean"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>前面的 bean 定义代码段与以下代码段完全等效（在运行时）：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"theTargetBean"</span> <span class="attr">class</span>=<span class="string">"..."</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"client"</span> <span class="attr">class</span>=<span class="string">"..."</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetName"</span> <span class="attr">value</span>=<span class="string">"theTargetBean"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>第一种形式优于第二种形式，因为使用 idref 标记允许容器在部署时验证引用的命名 bean 实际存在。 第二种形式不会对传递给客户端 bean 的 targetName 属性的值执行验证，只有当客户端 bean 实际被实例化时才会发现错误（很可能是致命的错误）。 如果客户端 bean 是原型(prototype) bean，那就只能在部署容器后很长时间才能发现错误并抛出异常。</p>
<p><em>注：4.0 beans XSD 中不再支持 idref 元素的 local 属性，因为它不再提供常规 bean 引用的值。 升级到 4.0 架构时，需要将现有的 idref 本地引用更改为 idref bean。</em></p>
<h4 id="其他-bean-的引用"><a href="#其他-bean-的引用" class="headerlink" title="其他 bean 的引用"></a>其他 bean 的引用</h4><p>bean 属性的值需要和目标 bean 的 id 或 name 相同：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"someBean"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>通过 parent 属性指定目标 bean 会创建对当前容器的父容器中的 bean 的引用。 parent 属性的值可以与目标 bean 的 id 属性或目标 bean 的 name 属性中的值之一相同。 目标 bean 必须位于当前 bean 的父容器中。 我们最好使用此 bean 引用方式，主要是当我们有容器层次结构并且希望将现有 bean 包装在父容器中时，该容器具有与父 bean 同名的代理。 以下显示了如何使用父属性：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- in the parent context --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.something.SimpleAccountService"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- insert dependencies as required as here --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- in the child (descendant) context --&gt;</span></span><br><span class="line">&lt;bean id="accountService" &lt;!-- bean name is the same as the parent bean --&gt;</span><br><span class="line">    class="org.springframework.aop.framework.ProxyFactoryBean"&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"target"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">parent</span>=<span class="string">"accountService"</span>/&gt;</span> <span class="comment">&lt;!-- notice how we refer to the parent bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- insert other configuration and dependencies as required here --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><em>注：4.0 beans XSD 不再支持 ref 元素的 local 属性，因为它不再提供常规 bean 引用的值。升级到 4.0 架构时，将现有的 ref 本地引用更改为 ref bean。</em></p>
<h4 id="内部-bean"><a href="#内部-bean" class="headerlink" title="内部 bean"></a>内部 bean</h4><p>直接看例子：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"outer"</span> <span class="attr">class</span>=<span class="string">"..."</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- instead of using a reference to a target bean, simply define the target bean inline --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"target"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.example.Person"</span>&gt;</span> <span class="comment">&lt;!-- this is the inner bean --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"Fiona Apple"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"25"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h4><p><code>&lt;list/&gt;</code>，<code>&lt;set/&gt;</code>，<code>&lt;map/&gt;</code>和<code>&lt;props/&gt;</code>元素分别对应 Java Collection 类型 List，Set，Map 和 Properties 的属性和参数。 如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"moreComplexObject"</span> <span class="attr">class</span>=<span class="string">"example.ComplexObject"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- results in a setAdminEmails(java.util.Properties) call --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"adminEmails"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"administrator"</span>&gt;</span>administrator@example.org<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"support"</span>&gt;</span>support@example.org<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"development"</span>&gt;</span>development@example.org<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- results in a setSomeList(java.util.List) call --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"someList"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>a list element followed by a reference<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"myDataSource"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- results in a setSomeMap(java.util.Map) call --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"someMap"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"an entry"</span> <span class="attr">value</span>=<span class="string">"just some string"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span> =<span class="string">"a ref"</span> <span class="attr">value-ref</span>=<span class="string">"myDataSource"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- results in a setSomeSet(java.util.Set) call --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"someSet"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>just some string<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"myDataSource"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>map 的键和值、set 的值也可以是以下类型：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bean | ref | idref | list | set | map | props | value | null</span><br></pre></td></tr></table></figure>

<h5 id="合并集合"><a href="#合并集合" class="headerlink" title="合并集合"></a>合并集合</h5><p>Spring 容器还支持合并集合。你可以定义父<code>&lt;list/&gt;</code>，<code>&lt;map/&gt;</code>，<code>&lt;set/&gt;</code>或<code>&lt;props/&gt;</code>元素，然后定义子<code>&lt;list/&gt;</code>，<code>&lt;map/&gt;</code>，<code>&lt;set/&gt;</code>或<code>&lt;props/&gt;</code>元素继承和覆盖父集合中的值。 也就是说，子集合的值是合并父集合和子集合的元素的结果，相同时子集合的元素覆盖父集合中指定的值。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"parent"</span> <span class="attr">abstract</span>=<span class="string">"true"</span> <span class="attr">class</span>=<span class="string">"example.ComplexObject"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"adminEmails"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"administrator"</span>&gt;</span>administrator@example.com<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"support"</span>&gt;</span>support@example.com<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"child"</span> <span class="attr">parent</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"adminEmails"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- the merge is specified on the child collection definition --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span> <span class="attr">merge</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"sales"</span>&gt;</span>sales@example.com<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"support"</span>&gt;</span>support@example.co.uk<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>得到</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">administrator=administrator@example.com</span><br><span class="line">sales=sales@example.com</span><br><span class="line">support=support@example.co.uk</span><br></pre></td></tr></table></figure>

<p><code>&lt;list/&gt;</code>，<code>&lt;map/&gt;</code>和<code>&lt;set/&gt;</code>集合同样会合并。 使用<code>&lt;list/&gt;</code>元素的时候，list 是有序的，且 父级的值在所有子级列表的值之前。 对于 Map，Set 和 Properties 集合类型，不存在排序。 因此，对于作为容器在内部使用的关联 Map，Set 和 Properties 实现类型的基础的集合类型，顺序是没有意义的。</p>
<h5 id="合并集合的限制"><a href="#合并集合的限制" class="headerlink" title="合并集合的限制"></a>合并集合的限制</h5><p>我们无法合并不同的集合类型（例如 Map 和 List）。 如果不小心这么做了，则会抛出相应的异常。必须在较低的继承子定义上指定 merge 属性。 在父集合定义上指定 merge 属性是多余的，并且不会导致所需的合并。</p>
<h5 id="强类型集合"><a href="#强类型集合" class="headerlink" title="强类型集合"></a>强类型集合</h5><p>通过在 Java 5 中引入泛型类型，我们可以使用强类型集合。也就是说，可以声明一种 Collection 类型，使得它只能包含（例如）String 元素。如果使用 Spring 将强类型依赖注入 Collection 到 bean 中，则可以利用 Spring 的类型转换支持，以便强类型 Collection 实例的元素在添加到之前转换为适当的 Collection 类。以下 Java 类和 bean 定义显示了如何执行此操作：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Float&gt; accounts;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccounts</span><span class="params">(Map&lt;String, Float&gt; accounts)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accounts = accounts;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"something"</span> <span class="attr">class</span>=<span class="string">"x.y.SomeClass"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"accounts"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"one"</span> <span class="attr">value</span>=<span class="string">"9.99"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"two"</span> <span class="attr">value</span>=<span class="string">"2.75"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"six"</span> <span class="attr">value</span>=<span class="string">"3.99"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>当为注入准备 bean 的 accounts 属性时，通过反射可获得 something 关于强类型的元素类型的泛型信息 Map&lt;String, Float&gt;。因此，Spring 的类型转换基础结构将各种值元素识别为类型 Float，并将字符串值（9.99, 2.75 和 3.99）转换为实际 Float 类型。</p>
<h4 id="Null-和空值字符串"><a href="#Null-和空值字符串" class="headerlink" title="Null 和空值字符串"></a>Null 和空值字符串</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"ExampleBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">value</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>等价于</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exampleBean.setEmail(<span class="string">""</span>);</span><br></pre></td></tr></table></figure>

<p>用 <code>&lt;null/&gt;</code> 标签标示 null：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"ExampleBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"email"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>等价于</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exampleBean.setEmail(<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure>

<h4 id="XML-快捷方式-p-namespace"><a href="#XML-快捷方式-p-namespace" class="headerlink" title="XML 快捷方式 p-namespace"></a>XML 快捷方式 p-namespace</h4><p>举例 1：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"classic"</span> <span class="attr">class</span>=<span class="string">"com.example.ExampleBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">value</span>=<span class="string">"someone@somewhere.com"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>等价于</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"p-namespace"</span> <span class="attr">class</span>=<span class="string">"com.example.ExampleBean"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">p:email</span>=<span class="string">"someone@somewhere.com"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>举例 2：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"john-classic"</span> <span class="attr">class</span>=<span class="string">"com.example.Person"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"John Doe"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"spouse"</span> <span class="attr">ref</span>=<span class="string">"jane"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"jane"</span> <span class="attr">class</span>=<span class="string">"com.example.Person"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"Jane Doe"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>等价于</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"john-modern"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"com.example.Person"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">p:name</span>=<span class="string">"John Doe"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">p:spouse-ref</span>=<span class="string">"jane"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"jane"</span> <span class="attr">class</span>=<span class="string">"com.example.Person"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"Jane Doe"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="XML-快捷方式-c-namespace"><a href="#XML-快捷方式-c-namespace" class="headerlink" title="XML 快捷方式 c-namespace"></a>XML 快捷方式 c-namespace</h4><p>Spring 3.1 中引入的 c-namespace 允许使用内联属性来配置构造函数参数，无需嵌套 constructor-arg 标签。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:c</span>=<span class="string">"http://www.springframework.org/schema/c"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"beanTwo"</span> <span class="attr">class</span>=<span class="string">"x.y.ThingTwo"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"beanThree"</span> <span class="attr">class</span>=<span class="string">"x.y.ThingThree"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- traditional declaration with optional argument names --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"beanOne"</span> <span class="attr">class</span>=<span class="string">"x.y.ThingOne"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"thingTwo"</span> <span class="attr">ref</span>=<span class="string">"beanTwo"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"thingThree"</span> <span class="attr">ref</span>=<span class="string">"beanThree"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">value</span>=<span class="string">"something@somewhere.com"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- c-namespace declaration with argument names --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"beanOne"</span> <span class="attr">class</span>=<span class="string">"x.y.ThingOne"</span> <span class="attr">c:thingTwo-ref</span>=<span class="string">"beanTwo"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">c:thingThree-ref</span>=<span class="string">"beanThree"</span> <span class="attr">c:email</span>=<span class="string">"something@somewhere.com"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>对于构造函数参数名称不可用的情况（例如非 debug 模式），也可以使用参数索引，如下所示：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- c-namespace index declaration --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"beanOne"</span> <span class="attr">class</span>=<span class="string">"x.y.ThingOne"</span> <span class="attr">c:_0-ref</span>=<span class="string">"beanTwo"</span> <span class="attr">c:_1-ref</span>=<span class="string">"beanThree"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">c:_2</span>=<span class="string">"something@somewhere.com"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p><em>注：由于 XML 语法，索引表示法要求存在前导 <code>_</code>，因为 XML 属性名称不能以数字开头（即使某些 IDE 允许）。对于<code>&lt;constructor-arg&gt;</code>元素也可以使用相应的索引符号，但不常用，因为通常的声明顺序通常就足够了。\</em></p>
<h4 id="复合属性名称"><a href="#复合属性名称" class="headerlink" title="复合属性名称"></a>复合属性名称</h4><p>设置 bean 属性时，可以使用复合或嵌套属性名称，只要除最终属性名称之外的路径的所有组件都不是 null，例如：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"something"</span> <span class="attr">class</span>=<span class="string">"things.ThingOne"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"fred.bob.sammy"</span> <span class="attr">value</span>=<span class="string">"123"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>该 somethingbean 具有一个 fred 属性，该属性具有属性，该 bob 属性具有 sammy 属性，并且最终 sammy 属性的值设置为 123。在构造 bean 之后，fred 属性 something 和 bob 属性 fred 不得为 null，否则会抛出 NullPointerException。</p>
<h3 id="使用-depends-on"><a href="#使用-depends-on" class="headerlink" title="使用 depends-on"></a>使用 depends-on</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"beanOne"</span> <span class="attr">class</span>=<span class="string">"ExampleBean"</span> <span class="attr">depends-on</span>=<span class="string">"manager"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"manager"</span> <span class="attr">class</span>=<span class="string">"ManagerBean"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>那么 beanOne 会依赖 manager，只有 manager 初始化完成才会构建 beanOne</p>
<h3 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"lazy"</span> <span class="attr">class</span>=<span class="string">"com.something.ExpensiveToCreateBean"</span> <span class="attr">lazy-init</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"not.lazy"</span> <span class="attr">class</span>=<span class="string">"com.something.AnotherBean"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>ApplicationContext 启动时不会初始化 lazy 的 bean。</p>
<p>但是，当延迟初始化的 bean 是未进行延迟初始化的单例 bean 的依赖项时，ApplicationContext 会在启动时创建延迟初始化的 bean，因为它必须满足单例的依赖关系。</p>
<h3 id="自动注入合作-bean"><a href="#自动注入合作-bean" class="headerlink" title="自动注入合作 bean"></a>自动注入合作 bean</h3><p>Spring 容器可以自动连接协作 bean 之间的关系。 我们可以通过检查 ApplicationContext 的内容让 Spring 自动为 bean 解析协作者（其他 bean）。 自动装配具有以下优点：</p>
<ul>
<li><p>自动装配可以显着减少指定属性或构造函数参数的需要。</p>
</li>
<li><p>自动装配可以随着对象的发展更新配置。例如，如果需要向类添加依赖项，则可以自动满足该依赖项，而无需修改配置。因此，自动装配在开发期间尤其有用，而不会在代码库变得更稳定时否定切换到显式布线的选项。</p>
</li>
</ul>
<p>使用基于 XML 的配置元数据（请参阅依赖注入）时，可以使用<code>&lt;bean/&gt;</code>元素的 autowire 属性为 bean 定义指定 autowire 模式。自动装配功能有四种模式。 下表描述了四种自动装配模式：</p>
<table>
<thead>
<tr>
<th>模式</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>no</td>
<td>（默认）无自动装配。Bean 引用必须由 ref 元素定义。不建议对较大的部署更改默认设置，因为明确指定协作者可以提供更好的控制和清晰度。在某种程度上，它记录了系统的结构。</td>
</tr>
<tr>
<td>byName</td>
<td>按属性名称自动装配。Spring 查找与需要自动装配的属性同名的 bean。例如，如果 bean 定义按名称设置为 autowire 并且它包含一个 master 属性（即，它有一个 setMaster(..)方法），则 Spring 会查找名为 bean 的定义 master 并使用它来设置属性。</td>
</tr>
<tr>
<td>byType</td>
<td>如果容器中只存在一个属性类型的 bean，则允许属性自动装配。如果存在多个，则抛出致命异常，且可能不会根据类型对该 bean 使用自动装配。如果没有匹配的 bean，则不会发生任何事情（该属性未设置）。</td>
</tr>
<tr>
<td>constructor</td>
<td>类似 byType 但适用于构造函数参数。如果容器中没有构造函数参数类型的一个 bean，则会引发致命错误。</td>
</tr>
</tbody></table>
<h4 id="自动装配的局限和缺点"><a href="#自动装配的局限和缺点" class="headerlink" title="自动装配的局限和缺点"></a>自动装配的局限和缺点</h4><ul>
<li><p>显式依赖项 property 和 constructor-arg 设置始终覆盖自动装配，且不能自动装配简单属性，例如基元 Strings 和 Classes（以及此类简单属性的数组）。这种限制是设计决定的。</p>
</li>
<li><p>自动装配不如显式布线精确。虽然如前面的表中所述，但 Spring 会谨慎地避免在可能产生意外结果的模糊性的情况下进行猜测。我们不再明确清楚 Spring 管理对象之间的关系。</p>
</li>
<li><p>可能无法为可能从 Spring 容器生成文档的工具提供装配信息。</p>
</li>
<li><p>容器中的多个 bean 定义可以匹配 setter 方法或构造函数参数指定的类型以进行自动装配。对于数组，集合或 Map 实例，这不一定是个问题。但是，对于期望单个值的依赖关系，这种模糊性不是任意解决的。如果没有可用的唯一 bean 定义，则抛出异常。</p>
</li>
</ul>
<p>在这种情况下，你有一些选择：</p>
<ul>
<li><p>放弃自动装配，支持显式装载。</p>
</li>
<li><p>通过将其 autowire-candidate 属性设置为 bean，可以避免对 bean 定义进行自动装配 false，如下一节所述。</p>
</li>
<li><p>通过将其 <code>&lt;bean/&gt;</code> 元素的 primary 属性设置为 true，将单个 bean 定义指定为主要候选者。</p>
</li>
<li><p>实现基于注释的配置可用的更细粒度的控件，如基于注释的容器配置。</p>
</li>
</ul>
<h4 id="从自动装配中排除-Bean"><a href="#从自动装配中排除-Bean" class="headerlink" title="从自动装配中排除 Bean"></a>从自动装配中排除 Bean</h4><p>在每个 bean 的基础上，我们可以从自动装配中排除 bean。在 Spring 的 XML 格式中，将元素的 autowire-candidate 属性设置<code>&lt;bean/&gt;</code>为 false。容器使特定的 bean 定义对自动装配基础结构不可用（包括@Autowired 等注解配置）。</p>
<p>我们还可以根据与 bean 名称的模式匹配来限制 autowire 候选者。 <code>&lt;beans/&gt;</code>元素在其 default-autowire-candidates 属性中接受一个或多个模式。 例如，要将 autowire 候选状态限制为名称以 Repository 结尾的任何 bean，请提供值* Repository。 要提供多个模式，请在逗号分隔的列表中定义它们。 bean 定义的 autowire-candidate 属性的显式值 true 或 false 始终优先。 对于此类 bean，模式匹配规则不适用。</p>
<p>这些技术对于永远不希望通过自动装配注入其他 bean 的 bean 非常有用。这并不意味着排除的 bean 本身不能使用自动装配进行配置。相反，bean 本身不是自动装配其他 bean 的候选者。</p>
<h3 id="方法注入"><a href="#方法注入" class="headerlink" title="方法注入"></a>方法注入</h3><p>在大多数应用程序场景中，容器中的大多数 bean 都是单例。当单例 bean 需要与另一个单例 bean 协作或非单例 bean 需要与另一个非单例 bean 协作时，通常通过将一个 bean 定义为另一个 bean 的属性来处理依赖关系。但是当 bean 生命周期不同时会出现问题。假设单例 bean A 需要使用非单例（原型）bean B，可能是在 A 上的每个方法都调用。但是容器只创建一次单例 bean A，因此只有一次机会来设置属性。每次需要时，容器都不能为 bean A 提供 bean B 的新实例。</p>
<p>有一种不太好解决方案是放弃一些 IoC，你可以通过实现 ApplicationContextAware 接口使 bean A 意识到容器，每次通过一个 <code>getBean(&quot;B&quot;)</code> 调用来请求一个新的 bean B 实例，就像下面这样：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a class that uses a stateful Command-style class to perform some processing</span></span><br><span class="line"><span class="keyword">package</span> fiona.apple;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Spring-API imports</span></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContextAware;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommandManager</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">process</span><span class="params">(Map commandState)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// grab a new instance of the appropriate Command</span></span><br><span class="line">        Command command = createCommand();</span><br><span class="line">        <span class="comment">// set the state on the (hopefully brand new) Command instance</span></span><br><span class="line">        command.setState(commandState);</span><br><span class="line">        <span class="keyword">return</span> command.execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Command <span class="title">createCommand</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// notice the Spring API dependency!</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.applicationContext.getBean(<span class="string">"command"</span>, Command.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.applicationContext = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是这么做会使得业务代码知道并耦合到 Spring Framework，正确的做法应当是使用方法注入。方法注入是 Spring IoC 容器的一个高级功能，可以让开发者干净地处理这个用例。</p>
<h4 id="查找方法注入"><a href="#查找方法注入" class="headerlink" title="查找方法注入"></a>查找方法注入</h4><p>查找方法注入是指容器可以重写容器管理的 bean 上的方法并返回查找结果给容器中另一个命名 bean。查找通常涉及原型 bean，如上一节中描述的场景。Spring Framework 通过使用 CGLIB 库中的<strong>字节码生成</strong>来动态生成重写该方法的子类来实现此方法注入。</p>
<blockquote>
<ul>
<li>为了使这个动态子类生效，Spring bean 容器子类不能是 <code>final</code> 的类，要覆盖的方法也不能是 <code>final</code>。</li>
<li>对具有抽象方法的类进行单元测试需要自己对类进行子类化，并提供抽象方法的桩实现。</li>
<li>组件扫描也需要具体的方法，这需要具体的类来获取。</li>
<li>另一个关键限制是查找方法不适用于工厂方法，特别是配置类中的 <code>@Bean</code> 方法，因为在这种情况下，容器不负责创建实例，因此无法在运行时生成子类。</li>
</ul>
</blockquote>
<p>对于之前的 CommandManager，Spring 容器需要动态地覆盖 createCommand() 方法的实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> fiona.apple;</span><br><span class="line"></span><br><span class="line"><span class="comment">// no more Spring imports!</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CommandManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">process</span><span class="params">(Object commandState)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// grab a new instance of the appropriate Command interface</span></span><br><span class="line">        Command command = createCommand();</span><br><span class="line">        <span class="comment">// set the state on the (hopefully brand new) Command instance</span></span><br><span class="line">        command.setState(commandState);</span><br><span class="line">        <span class="keyword">return</span> command.execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// okay... but where is the implementation of this method?</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> Command <span class="title">createCommand</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个例子中，要注入的方法需要以下形式的签名：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;public|protected&gt; [abstract] &lt;return-type&gt; theMethodName(no-arguments);</span><br></pre></td></tr></table></figure>

<p>我们进行如下的配置：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- a stateful bean deployed as a prototype (non-singleton) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myCommand"</span> <span class="attr">class</span>=<span class="string">"fiona.apple.AsyncCommand"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- inject dependencies here as required --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- commandProcessor uses statefulCommandHelper --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"commandManager"</span> <span class="attr">class</span>=<span class="string">"fiona.apple.CommandManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">lookup-method</span> <span class="attr">name</span>=<span class="string">"createCommand"</span> <span class="attr">bean</span>=<span class="string">"myCommand"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这样，myCommand 会被动态注入。也可以使用 <code>@Lookup</code> 注解：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CommandManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">process</span><span class="params">(Object commandState)</span> </span>&#123;</span><br><span class="line">        Command command = createCommand();</span><br><span class="line">        command.setState(commandState);</span><br><span class="line">        <span class="keyword">return</span> command.execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Lookup</span>(<span class="string">"myCommand"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> Command <span class="title">createCommand</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或者直接根据返回值推断：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CommandManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">process</span><span class="params">(Object commandState)</span> </span>&#123;</span><br><span class="line">        MyCommand command = createCommand();</span><br><span class="line">        command.setState(commandState);</span><br><span class="line">        <span class="keyword">return</span> command.execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Lookup</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> MyCommand <span class="title">createCommand</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>请注意，我们通常应该使用具体的桩实现来声明这种带注释的查找方法，以使它们与 Spring 的组件扫描规则兼容，默认情况下抽象类被忽略。此限制不适用于显式注册或显式导入的 bean 类。（这段话我没看懂）</p>
<p><em>另一种解决方案是使用 ObjectFactory / Provider 注入点，详见下文。</em></p>
<h4 id="任意方法替换"><a href="#任意方法替换" class="headerlink" title="任意方法替换"></a>任意方法替换</h4><p>与查找方法注入相比，一种不太有用的方法注入形式是能够使用另一个方法实现替换托管 bean 中的任意方法。这部分不重要，跳过也没关系。</p>
<p>使用基于 XML 的配置元数据，我们可以使用 replaced-method 元素将已存在的方法实现替换为已部署的 bean。比如下面的例子，我们想覆盖它的 computeValue 方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyValueCalculator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">computeValue</span><span class="params">(String input)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// some real code...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// some other methods...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现 org.springframework.beans.factory.support.MethodReplacer 接口的类提供了新的方法定义：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * meant to be used to override the existing computeValue(String)</span></span><br><span class="line"><span class="comment"> * implementation in MyValueCalculator</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReplacementComputeValue</span> <span class="keyword">implements</span> <span class="title">MethodReplacer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">reimplement</span><span class="params">(Object o, Method m, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">// get the input value, work with it, and return a computed result</span></span><br><span class="line">        String input = (String) args[<span class="number">0</span>];</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">return</span> ...;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>部署原始类并指定方法覆盖的 bean 定义类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"myValueCalculator"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"x.y.z.MyValueCalculator"</span>&gt;</span><br><span class="line">    &lt;!-- arbitrary method replacement --&gt;</span><br><span class="line">    &lt;replaced-method name=<span class="string">"computeValue"</span> replacer=<span class="string">"replacementComputeValue"</span>&gt;</span><br><span class="line">        &lt;arg-type&gt;String&lt;/arg-type&gt;</span><br><span class="line">    &lt;/replaced-method&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;bean id=<span class="string">"replacementComputeValue"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"a.b.c.ReplacementComputeValue"</span>/&gt;</span><br></pre></td></tr></table></figure>

<p>可以使用 <code>&lt;arg-type/&gt;</code> 元素中的一个或多个元素 <code>&lt;replaced-method/&gt;</code> 来指示被覆盖的方法的方法签名。仅当方法重载且类中存在多个变体时，才需要参数的签名。为方便起见，参数的类型字符串可以是完全限定类型名称的子字符串。<br>比如<code>java.lang.String</code>、<code>String</code>、<code>Str</code>都可以匹配<code>java.lang.String</code>。</p>
<h2 id="Bean-的作用域"><a href="#Bean-的作用域" class="headerlink" title="Bean 的作用域"></a>Bean 的作用域</h2><p>Spring Framework 支持六种作用域，其中后四种作用域仅在使用 Web 感知的 ApplicationContext 才可用。</p>
<table>
<thead>
<tr>
<th>作用域</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>单例</td>
<td>（默认）将单个 bean 定义范围限定为每个 Spring IoC 容器的单个对象实例</td>
</tr>
<tr>
<td>原型（prototype）</td>
<td>每次都创建新的对象</td>
</tr>
<tr>
<td>请求（request）</td>
<td>作用域为单个 HTTP 请求，也就是说，每个 HTTP 请求都有自己的 bean 实例</td>
</tr>
<tr>
<td>会话（session）</td>
<td>作用域为单个 HTTP Session</td>
</tr>
<tr>
<td>应用（application）</td>
<td>作用域为整个 ServletContext</td>
</tr>
<tr>
<td>websocket</td>
<td>作用域为单个 WebSocket 期间</td>
</tr>
</tbody></table>
<p>前两个比较简单，不再详细解释。</p>
<p>值得一提的是，使用具有依赖于原型 bean 的单例作用域 bean 时，依赖项会在单例 bean 初始化的时候被注入，此后拿到的永远是同一个原型 bean 而并未创建新的。如果需要每次都能在运行时注入新的原型 bean，参见上文<a href="#方法注入">方法注入</a>。</p>
<h3 id="Request-Session-Application-和-WebSocket-作用域"><a href="#Request-Session-Application-和-WebSocket-作用域" class="headerlink" title="Request, Session, Application 和 WebSocket 作用域"></a>Request, Session, Application 和 WebSocket 作用域</h3><p>仅当使用 Web 感知的 Spring ApplicationContext 实现（例如 XmlWebApplicationContext）时，Request、Session、Application 和 websocket 作用域才可用。如果将这些作用域与常规的 Spring IoC 容器（例如 ClassPathXmlApplicationContext）一起使用，则会引发由于未知 bean 作用域的 IllegalStateException。</p>
<h4 id="初始-Web-配置"><a href="#初始-Web-配置" class="headerlink" title="初始 Web 配置"></a>初始 Web 配置</h4><p>要在请求，会话，应用程序和 websocket 级别（统称 Web 作用域）支持 bean 的作用域，在定义 bean 之前需要做一些初始配置。（单例和原型这两种标准范围不需要此初始设置）</p>
<p>如何初始设置取决于具体的 Servlet 环境。</p>
<p>如果在 Spring Web MVC 中访问 scoped bean，实际上是在 Spring DispatcherServlet 处理的请求中，则无需进行特殊设置。 DispatcherServlet 已经公开了所有相关状态。</p>
<p>如果使用 Servlet 2.5 的 Web 容器，并且在 Spring 的 DispatcherServlet 之外处理请求（例如，使用 JSF 或 Struts 时），则需要注册 org.springframework.web.context.request.RequestContextListener 的 ServletRequestListener。对于 Servlet 3.0+，可以使用该 WebApplicationInitializer 接口以编程方式完成。或者对于旧容器可以添加以下声明到 web.xml：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span></span><br><span class="line">            org.springframework.web.context.request.RequestContextListener</span><br><span class="line">        <span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果不方便设置 Listener，也可以使用 RequestContextFilter：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>requestContextFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.RequestContextFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>requestContextFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>DispatcherServlet，RequestContextListener 和 RequestContextFilter 都可以做同样的事情，也就是将 HTTP 请求对象绑定到为该请求提供服务的 Thread。这使得请求和会话范围的 bean 可以在调用链的下游进一步使用。</p>
<h4 id="Request-作用域"><a href="#Request-作用域" class="headerlink" title="Request 作用域"></a>Request 作用域</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"loginAction"</span> <span class="attr">class</span>=<span class="string">"com.something.LoginAction"</span> <span class="attr">scope</span>=<span class="string">"request"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>也可以使用 <code>@RequestScope</code> 注解。</p>
<h4 id="作为依赖项的-Scoped-Bean"><a href="#作为依赖项的-Scoped-Bean" class="headerlink" title="作为依赖项的 Scoped Bean"></a>作为依赖项的 Scoped Bean</h4><p>Spring IoC 容器不仅管理对象（bean）的实例化，还管理协作者（或依赖关系）的连接。如果要将（例如）HTTP 请求范围的 bean 注入到寿命较长范围的另一个 bean 中，我们可以选择注入 AOP 代理来代替范围内的 bean。也就是说，需要注入一个代理对象，该对象公开与范围对象相同的公共接口，但也可以从相关范围（例如 HTTP 请求）中检索真实目标对象，并将方法调用委托给真实对象。</p>
<p>具体的操作涉及到 AOP，之后详细解释。</p>
<p><em>注：CGLIB 只拦截公共方法的调用。</em></p>
<h3 id="自定义作用域"><a href="#自定义作用域" class="headerlink" title="自定义作用域"></a>自定义作用域</h3><p>bean 的作用域机制是可扩展的。我们可以定义自己的范围，甚至可以重新定义现有的作用域，尽管后者被认为是不好的做法且我们也无法重写内置的 singleton 和 prototype 范围。</p>
<h4 id="创建自定义作用域"><a href="#创建自定义作用域" class="headerlink" title="创建自定义作用域"></a>创建自定义作用域</h4><p>要将自定义作用域集成到 Spring 容器中，需要实现 org.springframework.beans.factory.config.Scope 接口，本节将对此进行介绍。 有关如何实现自己的作用域的想法，可以参阅 Spring Framework 和 <a href="https://docs.spring.io/spring-framework/docs/5.1.8.RELEASE/javadoc-api/org/springframework/beans/factory/config/Scope.html" target="_blank" rel="noopener">Scope</a> javadoc 提供的 Scope 实现，它解释了需要更详细地实现的方法。</p>
<p>Scope 接口有四个方法可以从作用域获取、删除对象，以及销毁对象。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Object <span class="title">get</span><span class="params">(String name, ObjectFactory objectFactory)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Object <span class="title">remove</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">registerDestructionCallback</span><span class="params">(String name, Runnable destructionCallback)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">String <span class="title">getConversationId</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<p>最后一个方法可以获取作用域下的对话(conversation) ID。</p>
<p>不同的作用域下的 id 互不相同，同一个作用域下使用同一个 ID。</p>
<h4 id="使用自定义作用域"><a href="#使用自定义作用域" class="headerlink" title="使用自定义作用域"></a>使用自定义作用域</h4><p>在写好一个或多个自定义 Scope 实现之后，我们需要让 Spring 容器知道这个新的作用域。这个方法是使用 Spring 容器注册新 Scope 的核心方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">registerScope</span><span class="params">(String scopeName, Scope scope)</span></span>;</span><br></pre></td></tr></table></figure>

<p>此方法在 ConfigurableBeanFactory 接口上声明，该接口可通过 Spring 随附的大多数具体 ApplicationContext 实现上的 BeanFactory 属性获得。</p>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Scope threadScope = <span class="keyword">new</span> SimpleThreadScope();</span><br><span class="line">beanFactory.registerScope(<span class="string">"thread"</span>, threadScope);</span><br></pre></td></tr></table></figure>

<p>接下来就可以使用</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"..."</span> <span class="attr">class</span>=<span class="string">"..."</span> <span class="attr">scope</span>=<span class="string">"thread"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>此外也可以使用 CustomScopeConfigurer 来注册一个 Scope：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.CustomScopeConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"scopes"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"thread"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.context.support.SimpleThreadScope"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"thing2"</span> <span class="attr">class</span>=<span class="string">"x.y.Thing2"</span> <span class="attr">scope</span>=<span class="string">"thread"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"Rick"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:scoped-proxy</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"thing1"</span> <span class="attr">class</span>=<span class="string">"x.y.Thing1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"thing2"</span> <span class="attr">ref</span>=<span class="string">"thing2"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><em>注：在 FactoryBean 实现中放置 <code>&lt;aop：scoped-proxy/&gt;</code> 时，被限制作用域的工厂 bean 本身，而不是从 <code>getObject()</code> 返回的对象。</em></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 阅读 </tag>
            
            <tag> Spring </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JVM参数详解]]></title>
      <url>https://HaleLu.github.io/2019/07/jvm/</url>
      <content type="html"><![CDATA[<p>此篇从当前实际接触到的生产环境配置出发，聊聊 JVM 的机制以及参数设置。</p>
<a id="more"></a>

<h2 id="配置举例"><a href="#配置举例" class="headerlink" title="配置举例"></a>配置举例</h2><p>先看一个当前使用的 jvm 配置（为方便阅读我加了换行和适当注释）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/jdk8/bin/java</span><br><span class="line">-Djava.util.logging.config.file=/usr/local/webserver/app-name/conf/logging.properties</span><br><span class="line">-Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager</span><br><span class="line">-XX:MetaspaceSize=256M // 初始元空间大小(也是初始的阈值，即初始的high-water-mark)，达到该值就会触发垃圾收集进行类型卸载，同时GC会对该值进行调整：如果释放了大量的空间，就适当降低该值；如果释放了很少的空间，那么在不超过MaxMetaspaceSize时，适当提高该值</span><br><span class="line">-XX:MaxMetaspaceSize=256M // 最大元空间大小</span><br><span class="line">-Xms4g // 初始内存 4g</span><br><span class="line">-Xmx4g // 最大内存 4g</span><br><span class="line">-Xmn1g // 新生代 1g</span><br><span class="line">-Xss256k // 每个线程的内存大小</span><br><span class="line">-XX:SurvivorRatio=8 // Eden 区与 Survivor 区的大小比值 1:1:8</span><br><span class="line">-XX:MaxTenuringThreshold=8 // 垃圾最大年龄</span><br><span class="line">-XX:ParallelGCThreads=8 // 并行收集器的线程数</span><br><span class="line">-XX:+UseConcMarkSweepGC // 使用 CMS 内存收集</span><br><span class="line">-XX:+UseParNewGC // 设置年轻代为并行收集 可与 CMS 收集同时使用</span><br><span class="line">-XX:+DisableExplicitGC // 关闭 System.gc()</span><br><span class="line">-XX:+CMSParallelRemarkEnabled // 启用并行标记</span><br><span class="line">-XX:+CMSClassUnloadingEnabled // 启用永久代的类卸载</span><br><span class="line">-XX:CMSInitiatingOccupancyFraction=70 // 使用 70％后开始 CMS 收集</span><br><span class="line">-XX:+UseCMSCompactAtFullCollection // 在 Full GC 的时候，对年老代的压缩</span><br><span class="line">                                   // CMS 是不会移动内存的，因此，这个非常容易产生碎片，导致内存不够用，因此，内存的压缩这个时候就会被启用。</span><br><span class="line">-XX:CMSFullGCsBeforeCompaction=5 // 多少 Full GC 次后进行内存压缩</span><br><span class="line">                                 // 由于并发收集器不对内存空间进行压缩，整理，所以运行一段时间以后会产生&quot;碎片&quot;，使得运行效率降低。此值设置运行多少次GC以后对内存空间进行压缩，整理。增加这个参数是个好习惯。可能会影响性能，但是可以消除碎片</span><br><span class="line">-XX:+CMSScavengeBeforeRemark // 重新标记之前对年轻代做一次 minor GC，以期望在对老年代GC的时候可以清除更多的对象，针对 Remark 停顿太长的情况，代价是多一次 minor GC</span><br><span class="line">-XX:+HeapDumpOnOutOfMemoryError // 内存溢出时导出堆信息</span><br><span class="line">-Xloggc:/usr/local/webserver/app-name/logs/gc.log // gc日志</span><br><span class="line">-XX:+UseGCLogFileRotation // 启用GC日志文件的自动转储</span><br><span class="line">-XX:NumberOfGCLogFiles=10</span><br><span class="line">-XX:GCLogFileSize=10M</span><br><span class="line">-XX:+PrintGCDetails</span><br><span class="line">-XX:+PrintGCDateStamps</span><br><span class="line">-XX:+PrintGCApplicationStoppedTime</span><br><span class="line">-XX:+PrintGCApplicationConcurrentTime -Dcom.sun.management.jmxremote.password.file=/usr/local/webserver/app-name/conf/jmxremote.password</span><br><span class="line">-Dcom.sun.management.jmxremote.access.file=/usr/local/webserver/app-name/conf/jmxremote.access -Dcom.sun.management.jmxremote.ssl=false</span><br><span class="line">-XX:+CMSConcurrentMTEnabled</span><br><span class="line">-XX:+ExplicitGCInvokesConcurrent</span><br><span class="line">-XX:HeapDumpPath=/usr/local/webserver/app-name/logs/app-name.hprof</span><br><span class="line">-javaagent:/opt/jars/aspectjweaver-1.8.9.jar -Djdk.tls.ephemeralDHKeySize=2048</span><br><span class="line">-Djava.protocol.handler.pkgs=org.apache.catalina.webresources</span><br><span class="line">-Djava.endorsed.dirs=/usr/local/webserver/app-name/endorsed</span><br><span class="line">-classpath /usr/local/webserver/app-name/bin/bootstrap.jar:/usr/local/webserver/app-name/bin/tomcat-juli.jar</span><br><span class="line">-Dcatalina.base=/usr/local/webserver/app-name</span><br><span class="line">-Dcatalina.home=/usr/local/webserver/app-name</span><br><span class="line">-Djava.io.tmpdir=/usr/local/webserver/app-name/temp</span><br><span class="line">org.apache.catalina.startup.Bootstrap start</span><br></pre></td></tr></table></figure>

<h2 id="配置解读"><a href="#配置解读" class="headerlink" title="配置解读"></a>配置解读</h2><p>除去一些日志和路径配置，其他主要包含两种配置</p>
<h3 id="内存配置"><a href="#内存配置" class="headerlink" title="内存配置"></a>内存配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-XX:MetaspaceSize=256M // 初始元空间大小(也是初始的阈值，即初始的high-water-mark)，达到该值就会触发垃圾收集进行类型卸载，同时GC会对该值进行调整：如果释放了大量的空间，就适当降低该值；如果释放了很少的空间，那么在不超过MaxMetaspaceSize时，适当提高该值</span><br><span class="line">-XX:MaxMetaspaceSize=256M // 最大元空间大小</span><br><span class="line">-Xms4g // 初始内存 4g</span><br><span class="line">-Xmx4g // 最大内存 4g</span><br><span class="line">-Xmn1g // 新生代 1g</span><br><span class="line">-Xss256k // 每个线程的内存大小</span><br><span class="line">-XX:SurvivorRatio=8 // Eden 区与 Survivor 区的大小比值 1:1:8</span><br></pre></td></tr></table></figure>

<p>可以看到我们目前使用的参数是 4G 内存，其中新生代指定 1G，老年代则为剩下的 3G。元数据区的大小为 256M。单线程最大 256k。</p>
<p>这边值得一提的是，从 JAVA 8 开始，永久代被移除出 JVM，改为元数据（metadata）区。</p>
<h3 id="GC-策略配置"><a href="#GC-策略配置" class="headerlink" title="GC 策略配置"></a>GC 策略配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">-XX:SurvivorRatio=8 // Eden 区与 Survivor 区的大小比值 1:1:8</span><br><span class="line">-XX:MaxTenuringThreshold=8 // 垃圾最大年龄</span><br><span class="line">-XX:ParallelGCThreads=8 // 并行收集器的线程数</span><br><span class="line">-XX:+UseConcMarkSweepGC // 使用 CMS 收集器</span><br><span class="line">-XX:+UseParNewGC // 年轻代使用 ParNew 收集器，可与 CMS 收集同时使用</span><br><span class="line">-XX:+DisableExplicitGC // 关闭 System.gc()</span><br><span class="line">-XX:+CMSParallelRemarkEnabled // 启用并行标记</span><br><span class="line">-XX:+CMSClassUnloadingEnabled // 启用永久代的类卸载</span><br><span class="line">-XX:CMSInitiatingOccupancyFraction=70 // 使用 70％后开始 CMS 收集</span><br><span class="line">-XX:+UseCMSCompactAtFullCollection // 在 Full GC 的时候，对年老代的压缩</span><br><span class="line">                                   // CMS 是不会移动内存的，因此，这个非常容易产生碎片，导致内存不够用，因此，内存的压缩这个时候就会被启用。</span><br><span class="line">-XX:CMSFullGCsBeforeCompaction=5 // 多少 Full GC 次后进行内存压缩</span><br><span class="line">                                 // 由于并发收集器不对内存空间进行压缩，整理，所以运行一段时间以后会产生&quot;碎片&quot;，使得运行效率降低。此值设置运行多少次GC以后对内存空间进行压缩，整理。增加这个参数是个好习惯。可能会影响性能，但是可以消除碎片</span><br><span class="line">-XX:+CMSScavengeBeforeRemark // 重新标记之前对年轻代做一次 minor GC，以期望在对老年代GC的时候可以清除更多的对象，针对 Remark 停顿太长的情况，代价是多一次 minor GC</span><br><span class="line">-XX:+CMSConcurrentMTEnabled // 并发的CMS阶段将以多线程执行(因此，多个GC线程会与所有的应用程序线程并行工作)。</span><br><span class="line">-XX:+ExplicitGCInvokesConcurrent</span><br></pre></td></tr></table></figure>

<p>首先可以看到使用的收集器为 ParNew + CMS，这里简单介绍一下两种 GC 策略</p>
<h4 id="ParNew-收集器"><a href="#ParNew-收集器" class="headerlink" title="ParNew 收集器"></a>ParNew 收集器</h4><p>ParNew 常被用作新生代的收集器，具体策略如下：</p>
<ol>
<li>等待所有执行中的用户线程进行到 safepoint，然后 Stop the World</li>
<li>并行进行 GC，采用标记-复制算法清理新生代</li>
</ol>
<h4 id="CMS-收集器"><a href="#CMS-收集器" class="headerlink" title="CMS 收集器"></a>CMS 收集器</h4><p>CMS 是目前最常用的老年代收集器，其主要步骤如下：</p>
<ol>
<li>等待所有执行中的用户线程进行到 safepoint，然后 Stop the World</li>
<li>单线程进行初始标记，标记 GC Roots（本地变量、方法区中静态对象、常量、JNI 中对象）</li>
<li>和用户进程并行，进行并发标记，逐级搜索 GC Roots 进行可达性分析</li>
<li>再次等待所有执行中的用户线程进行到 safepoint，然后 Stop the World</li>
<li>和用户进程并行，进行重新标记，修正标记产生变动的那一部分</li>
<li>和用户进程并行，清理老年代对象（并不整理）</li>
<li>和用户进程并行，清理并恢复在 CMS GC 过程中的各种状态，重新初始化 CMS 相关数据结构</li>
</ol>
<p>再回头来看这套配置：</p>
<ul>
<li>新生代的 Eden 区与 Survivor 区的大小比值 1:1:8</li>
<li>新生代经过 8 次 minor GC 后进入老年代；</li>
<li>GC 的并行数为 8</li>
<li>关闭显式 GC（即 System.gc()）</li>
<li>启用类卸载，即会回收元数据空间</li>
<li>老年代使用 70%后开始 CMS 收集</li>
<li>每 5 次 CMS 收集后整理老年代内存（因为 CMS 收集只会对老年代的对象执行清除操作，并不会整理，长期后会产生过多的碎片，导致实际内存足够但无法申请出足够的内存）</li>
<li>在 CMS 的重新标记（第五步）前对年轻代执行一次 minor GC（这样在对老年代重新标记时可以清除出更多的对象）</li>
<li>CMS 与用户进程并发的阶段会启动多个 GC 进程并发</li>
<li>开启并行显式 Full GC，但其实在这是个废配置，因为 DisableExplicitGC 已经禁用了显式 Full GC</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> JAVA </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[raft]]></title>
      <url>https://HaleLu.github.io/2019/01/raft/</url>
      <content type="html"><![CDATA[<p>本篇讲解分布式系统共识算法 raft 的基本姿势，<a href="https://pdos.csail.mit.edu/6.824/papers/raft-extended.pdf" target="_blank" rel="noopener">相关论文</a>可点击这里。</p>
<p>注：此篇尚未整理完成，虽然代码已经完成，但因一些变故，日后再继续整理</p>
<a id="more"></a>

<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Paxos 作为一套可以解决分布式场景下高容错（半数以内的机器挂掉）的共识算法被广泛接受，然而由于其难以被理解所以少有直接的实现。Raft 的本质其实是对 Paxos 协议加强后的一种实现方式，对诸多细节进行了定义，使得这套系统变得易于实现。（个人认为，其实不得不承认的是，这样的代价是降低了效率）。</p>
<p>Raft 类似于其他的共识算法，但它有几个独有的特征———</p>
<ul>
<li>强 leader：Raft 的 leader 相比其他算法要更强，例如 log entry（理解为一条记录）只允许从 leader 通知给其他服务器，这使得 log entry 的分发变得简单易于理解；</li>
<li>leader 选举：Raft 中每个服务器都有自己不同的（随机）竞选周期。这一对心跳机制的独特改进有效解决了可能出现的选举冲突问题；</li>
<li>成员变更：Raft 在变更服务器集群成员时使用了新的联合共识方法，切换期间两个不同配置的大多数服务器保持重叠。</li>
</ul>
<p>看不懂没关系，往下看。</p>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>首先讲一讲共识算法的一些基本概念（不仅仅是 raft 协议）。</p>
<h3 id="可复制状态机"><a href="#可复制状态机" class="headerlink" title="可复制状态机"></a>可复制状态机</h3><p>共识算法基本讲的都是基于可复制状态机的共识算法，服务器集合中的所有状态机都可以通过相同的日志拷贝计算得到相同的状态，即使一些（不超过半数）服务器出现异常也一样能保持一致。可复制状态机是众多大型分布式系统的基础。例如包括 GFS、HDFS、RAMCloud 等通常使用分布式的可复制状态机管理 leader 选举和保存配置信息。常见的可复制状态机的例子包括 Chubby 和 ZooKeeper。</p>
<p>可复制状态机通常通过可复制 log 实现。每台服务器保存了相同的所有历史 command 的 log，状态机依次执行这些 command 可以得到相同的状态和输出。（类比 git）</p>
<h3 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h3><p>在共识协议中通常节点服务器有三种状态——leader、candidate 和 follower。</p>
<ul>
<li>leader：通常由 leader 决定确认 command 的写入，或者在数据不一致时决定使用的内容，或者由 leader 负责分发内容。</li>
<li>candidate：candidate 是候选人，candidate 并不总是存在。当 leader 节点出现异常或某些情况下，follower 会成为 candidate 并通过获得多数确认成为 leader。</li>
<li>follower：follower 作为分布式的执行机，接收执行来自 leader 的执行等。</li>
</ul>
<p>服务器节点的角色会在三种状态间根据规则切换。</p>
<h3 id="行为"><a href="#行为" class="headerlink" title="行为"></a>行为</h3><ul>
<li>心跳检测：所有 follower 和 leader 间会通过心跳保证连接正常。当 follower 长时间无法收到 leader 的心跳时或心跳回复时判定 leader 挂掉（真实情况下也可能是自己网络挂了）</li>
<li>leader 选举：当目前的 leader 无法正常工作或连接到时，需要进行 leader 选举选出新的 leader，一些 follower 会成为 candidate，并在获得半数赞同投票时成为新的 leader</li>
<li>投票：当收到竞选请求时决定是否选举 candidate 为 leader</li>
<li>log 分发：leader 会接受来自客户端的 log，然后将其分发复制给整个集群，同时强制要求其他节点与自己一致</li>
</ul>
<h2 id="raft-基础"><a href="#raft-基础" class="headerlink" title="raft 基础"></a>raft 基础</h2><p>在 raft 中，follower 是完全被动的：follower 不主动发送任何请求，只对 leader 和 candidate 的请求做回应。（如果客户端向 follower 发送了 command，follower 将其重定向到 leader）只有 leader 拥有 log 的写入权限，所有的 command 由 leader 先接受，然后分发给所有 follower，不一致时可覆盖 follower 内容。下图简要展示了各角色切换的条件。</p>
<p><img src=".png" alt></p>
<p>raft 采用任期制，任期用递增的整数表示。leader 由选举选出，在竞选时会有一到多个 candidate 尝试成为 leader，当 candidate 赢得竞选后，它会转变为该任期的 leader 直到新的任期。在某些情况下，投票可能无法产生大多数同意的情况（比如 3 个 candidate 每人获得了总数 1/3 节点的支持），那么很快新的任期（新的选举）会再次开始以打破局面。由此可以看出，raft 保证了每一任期至多有一个 leader。</p>
<p>然而作为分布式系统，不同的节点可能并不总是同时能观察到任期的更迭，甚至某些情况下某个节点可能会错过整个选举甚至整个任期，所以对于每个节点而言，都会存有一份当前任期和当前 leader。所有的节点间通信都会带上任期信息以校验传来的或自己节点的数据是否过期，并更新或通知更新。当 candidate 发现自己的 term 已经过旧则立刻回归 follower 状态。对于过旧的请求服务器直接拒绝执行。</p>
<p>raft 节点间通过 RPC 通信。具体的 RPC 格式在下文解释。</p>
<h2 id="raft-实现"><a href="#raft-实现" class="headerlink" title="raft 实现"></a>raft 实现</h2><h3 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h3><h4 id="持久状态"><a href="#持久状态" class="headerlink" title="持久状态"></a>持久状态</h4><p>这些状态信息需要在每次响应 RPC 前更新到静态存储</p>
<ul>
<li>currentTerm：节点观察到的最新任期（初始化为 0，递增）</li>
<li>votedFor：当前任期选举环节投给的 candidate 节点 ID</li>
<li>log[]：log 条目数组，每个条目都包含一条状态机 command 和收到该指令时的任期（首条下标为 1）</li>
</ul>
<h4 id="所有服务的易失状态"><a href="#所有服务的易失状态" class="headerlink" title="所有服务的易失状态"></a>所有服务的易失状态</h4><ul>
<li>commitIndex 已知最高日志条目的下标（初始化为 0，单调增加）</li>
<li>lastApplied 应用于状态机的最高日志条目的下标（初始化为 0，单调增加）</li>
</ul>
<h4 id="leader-的易失状态"><a href="#leader-的易失状态" class="headerlink" title="leader 的易失状态"></a>leader 的易失状态</h4><p>选举后重新初始化</p>
<ul>
<li>nextIndex[] 对于每个服务器，要发送到该服务器的下一个日志条目的下标（初始化为领导者最后日志下标+1）</li>
<li>matchIndex[] 对于每个服务器，已知在服务器上复制的最高日志条目的下标（初始化为 0，单调增加）</li>
</ul>
<p>AppendEntries RPC</p>
<p>由 leader 调用以复制日志条目; 也用作心跳。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Redis 源码阅读（一）]]></title>
      <url>https://HaleLu.github.io/2017/09/Redis-Source-Code-1/</url>
      <content type="html"><![CDATA[<p>Redis 作为常用的内存数据库，代码精简易于阅读，所以成为我 Linux C 开发学习之首选。<br>Redis源码版本：4.0.2</p>
<a id="more"></a>

<p>本章主要看内存相关操作。</p>
<h1 id="zmalloc-c-amp-zmalloc-h"><a href="#zmalloc-c-amp-zmalloc-h" class="headerlink" title="zmalloc.c &amp; zmalloc.h"></a>zmalloc.c &amp; zmalloc.h</h1><p>定义各种内存申请操作。</p>
<p>提供了三种库，一种是google的tcmalloc，一种是jemalloc，还有一种就是malloc</p>
<h2 id="zmalloc"><a href="#zmalloc" class="headerlink" title="zmalloc"></a>zmalloc</h2><p>最简单的申请内存。加了一个<code>size_t</code>的空间，记录当前申请的空间的大小。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">zmalloc</span><span class="params">(<span class="keyword">size_t</span> size)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *ptr = <span class="built_in">malloc</span>(size+PREFIX_SIZE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//oom : out of memory</span></span><br><span class="line">    <span class="comment">//zmalloc_oom 是一个错误处理函数，输出错误信息</span></span><br><span class="line">    <span class="keyword">if</span> (!ptr) zmalloc_oom_handler(size);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> HAVE_MALLOC_SIZE</span></span><br><span class="line">    update_zmalloc_stat_alloc(zmalloc_size(ptr));</span><br><span class="line">    <span class="keyword">return</span> ptr;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    <span class="comment">//如果未定义malloc_size，那么在第一个位置写上size，更新used_memory后返回真正内容的地址</span></span><br><span class="line">    *((<span class="keyword">size_t</span>*)ptr) = size;</span><br><span class="line">    update_zmalloc_stat_alloc(size+PREFIX_SIZE);</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">char</span>*)ptr+PREFIX_SIZE;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果未提供<code>zmalloc_size</code>函数，默认方法是向前取<code>PREFIX_SIZE</code>拿到<code>size</code>，相加得到真正的<code>size</code>（在刚才的情况中并不会被调用到）</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> HAVE_MALLOC_SIZE</span></span><br><span class="line"><span class="keyword">size_t</span> zmalloc_size(<span class="keyword">void</span> *ptr) &#123;</span><br><span class="line">    <span class="keyword">void</span> *realptr = (<span class="keyword">char</span>*)ptr-PREFIX_SIZE;</span><br><span class="line">    <span class="keyword">size_t</span> size = *((<span class="keyword">size_t</span>*)realptr);</span><br><span class="line">    <span class="comment">/* Assume at least that all the allocations are padded at sizeof(long) by</span></span><br><span class="line"><span class="comment">     * the underlying allocator. */</span></span><br><span class="line">    <span class="keyword">if</span> (size&amp;(<span class="keyword">sizeof</span>(<span class="keyword">long</span>)<span class="number">-1</span>)) size += <span class="keyword">sizeof</span>(<span class="keyword">long</span>)-(size&amp;(<span class="keyword">sizeof</span>(<span class="keyword">long</span>)<span class="number">-1</span>));</span><br><span class="line">    <span class="keyword">return</span> size+PREFIX_SIZE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<p>其中<code>update_zmalloc_stat_alloc</code>作用是更新<code>used_memory</code>。首先将<code>n</code>用<code>long</code>对齐，然后原子加<code>used_memory</code></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> update_zmalloc_stat_alloc(__n) do &#123; \</span></span><br><span class="line">    <span class="keyword">size_t</span> _n = (__n); \</span><br><span class="line">    <span class="keyword">if</span> (_n&amp;(<span class="keyword">sizeof</span>(<span class="keyword">long</span>)<span class="number">-1</span>)) _n += <span class="keyword">sizeof</span>(<span class="keyword">long</span>)-(_n&amp;(<span class="keyword">sizeof</span>(<span class="keyword">long</span>)<span class="number">-1</span>)); \</span><br><span class="line">    atomicIncr(used_memory,__n); \</span><br><span class="line">&#125; <span class="keyword">while</span>(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<p><code>atomicIncr</code>定义如下，<code>__atomic_add_fetch</code>是内建函数，原型为<code>type __atomic_add_fetch (type *ptr, type val, int memorder)</code>，详见<a href="https://gcc.gnu.org/onlinedocs/gcc/_005f_005fatomic-Builtins.html" target="_blank" rel="noopener">文档</a>。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> atomicIncr(var,count) __atomic_add_fetch(&amp;var,(count),__ATOMIC_RELAXED)</span></span><br></pre></td></tr></table></figure>

<h2 id="zfree"><a href="#zfree" class="headerlink" title="zfree"></a>zfree</h2><p>释放内存</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">zfree</span><span class="params">(<span class="keyword">void</span> *ptr)</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> HAVE_MALLOC_SIZE</span></span><br><span class="line">    <span class="keyword">void</span> *realptr;</span><br><span class="line">    <span class="keyword">size_t</span> oldsize;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ptr == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> HAVE_MALLOC_SIZE</span></span><br><span class="line">    update_zmalloc_stat_free(zmalloc_size(ptr));</span><br><span class="line">    <span class="built_in">free</span>(ptr);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    realptr = (<span class="keyword">char</span>*)ptr-PREFIX_SIZE;</span><br><span class="line">    oldsize = *((<span class="keyword">size_t</span>*)realptr);</span><br><span class="line">    update_zmalloc_stat_free(oldsize+PREFIX_SIZE);</span><br><span class="line">    <span class="built_in">free</span>(realptr);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="zmalloc-get-rss"><a href="#zmalloc-get-rss" class="headerlink" title="zmalloc_get_rss"></a>zmalloc_get_rss</h2><p>获取RSS（resident set size，常驻内存大小）</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(HAVE_PROC_STAT)</span></span><br><span class="line"><span class="comment">//通过proc/&lt;pid&gt;/stat获取RSS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">size_t</span> zmalloc_get_rss(<span class="keyword">void</span>) &#123;</span><br><span class="line">    <span class="keyword">int</span> page = sysconf(_SC_PAGESIZE);</span><br><span class="line">    <span class="keyword">size_t</span> rss;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">4096</span>];</span><br><span class="line">    <span class="keyword">char</span> filename[<span class="number">256</span>];</span><br><span class="line">    <span class="keyword">int</span> fd, count;</span><br><span class="line">    <span class="keyword">char</span> *p, *x;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">snprintf</span>(filename,<span class="number">256</span>,<span class="string">"/proc/%d/stat"</span>,getpid());</span><br><span class="line">    <span class="keyword">if</span> ((fd = open(filename,O_RDONLY)) == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (read(fd,buf,<span class="number">4096</span>) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        close(fd);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    close(fd);</span><br><span class="line"></span><br><span class="line">    p = buf;</span><br><span class="line">    count = <span class="number">23</span>; <span class="comment">/* RSS is the 24th field in /proc/&lt;pid&gt;/stat */</span></span><br><span class="line">    <span class="keyword">while</span>(p &amp;&amp; count--) &#123;</span><br><span class="line">        p = <span class="built_in">strchr</span>(p,<span class="string">' '</span>);</span><br><span class="line">        <span class="keyword">if</span> (p) p++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!p) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    x = <span class="built_in">strchr</span>(p,<span class="string">' '</span>);</span><br><span class="line">    <span class="keyword">if</span> (!x) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    *x = <span class="string">'\0'</span>;</span><br><span class="line"></span><br><span class="line">    rss = strtoll(p,<span class="literal">NULL</span>,<span class="number">10</span>);</span><br><span class="line">    rss *= page;</span><br><span class="line">    <span class="keyword">return</span> rss;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> defined(HAVE_TASKINFO)</span></span><br><span class="line"><span class="comment">//MACH内核可以通过task_info获取大小</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/sysctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mach/task.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mach/mach_init.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">size_t</span> zmalloc_get_rss(<span class="keyword">void</span>) &#123;</span><br><span class="line">    <span class="keyword">task_t</span> task = MACH_PORT_NULL;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">task_basic_info</span> <span class="title">t_info</span>;</span></span><br><span class="line">    <span class="keyword">mach_msg_type_number_t</span> t_info_count = TASK_BASIC_INFO_COUNT;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (task_for_pid(current_task(), getpid(), &amp;task) != KERN_SUCCESS)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    task_info(task, TASK_BASIC_INFO, (<span class="keyword">task_info_t</span>)&amp;t_info, &amp;t_info_count);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> t_info.resident_size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="comment">//使用used_memory值，并不是准确的RSS，会使得碎片率固定为1</span></span><br><span class="line"><span class="keyword">size_t</span> zmalloc_get_rss(<span class="keyword">void</span>) &#123;</span><br><span class="line">    <span class="comment">/* If we can't get the RSS in an OS-specific way for this system just</span></span><br><span class="line"><span class="comment">     * return the memory usage we estimated in zmalloc()..</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Fragmentation will appear to be always 1 (no fragmentation)</span></span><br><span class="line"><span class="comment">     * of course... */</span></span><br><span class="line">    <span class="keyword">return</span> zmalloc_used_memory();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<h2 id="zmalloc-get-fragmentation-ratio"><a href="#zmalloc-get-fragmentation-ratio" class="headerlink" title="zmalloc_get_fragmentation_ratio"></a>zmalloc_get_fragmentation_ratio</h2><p>碎片率</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Fragmentation = RSS / allocated-bytes */</span></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">zmalloc_get_fragmentation_ratio</span><span class="params">(<span class="keyword">size_t</span> rss)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">float</span>)rss/zmalloc_used_memory();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="zmalloc-get-smap-bytes-by-field"><a href="#zmalloc-get-smap-bytes-by-field" class="headerlink" title="zmalloc_get_smap_bytes_by_field"></a>zmalloc_get_smap_bytes_by_field</h2><p>按字段名计算总字节数，字段名需要以”:”结尾，pid为-1表示当前进程。若不支持直接返回0。（利用<code>&quot;proc/&lt;pid&gt;/smaps&quot;</code>或<code>&quot;proc/self/smaps&quot;</code>信息）</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Get the sum of the specified field (converted form kb to bytes) in</span></span><br><span class="line"><span class="comment"> * /proc/self/smaps. The field must be specified with trailing ":" as it</span></span><br><span class="line"><span class="comment"> * apperas in the smaps output.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * If a pid is specified, the information is extracted for such a pid,</span></span><br><span class="line"><span class="comment"> * otherwise if pid is -1 the information is reported is about the</span></span><br><span class="line"><span class="comment"> * current process.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Example: zmalloc_get_smap_bytes_by_field("Rss:",-1);</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(HAVE_PROC_SMAPS)</span></span><br><span class="line"><span class="keyword">size_t</span> zmalloc_get_smap_bytes_by_field(<span class="keyword">char</span> *field, <span class="keyword">long</span> pid) &#123;</span><br><span class="line">    <span class="keyword">char</span> line[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">size_t</span> bytes = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> flen = <span class="built_in">strlen</span>(field);</span><br><span class="line">    FILE *fp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pid == <span class="number">-1</span>) &#123;</span><br><span class="line">        fp = fopen(<span class="string">"/proc/self/smaps"</span>,<span class="string">"r"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">char</span> filename[<span class="number">128</span>];</span><br><span class="line">        <span class="built_in">snprintf</span>(filename,<span class="keyword">sizeof</span>(filename),<span class="string">"/proc/%ld/smaps"</span>,pid);</span><br><span class="line">        fp = fopen(filename,<span class="string">"r"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!fp) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(fgets(line,<span class="keyword">sizeof</span>(line),fp) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strncmp</span>(line,field,flen) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">char</span> *p = <span class="built_in">strchr</span>(line,<span class="string">'k'</span>);</span><br><span class="line">            <span class="keyword">if</span> (p) &#123;</span><br><span class="line">                *p = <span class="string">'\0'</span>;</span><br><span class="line">                bytes += strtol(line+flen,<span class="literal">NULL</span>,<span class="number">10</span>) * <span class="number">1024</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(fp);</span><br><span class="line">    <span class="keyword">return</span> bytes;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="keyword">size_t</span> zmalloc_get_smap_bytes_by_field(<span class="keyword">char</span> *field, <span class="keyword">long</span> pid) &#123;</span><br><span class="line">    ((<span class="keyword">void</span>) field);</span><br><span class="line">    ((<span class="keyword">void</span>) pid);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<h2 id="zmalloc-get-memory-size"><a href="#zmalloc-get-memory-size" class="headerlink" title="zmalloc_get_memory_size"></a>zmalloc_get_memory_size</h2><p>返回物理内存字节数。（声称虽然看起来丑但是已经是最干净的方式）</p>
<p>通过<code>sysctl</code>或<code>sysconf</code>查询物理内存使用</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">size_t</span> zmalloc_get_memory_size(<span class="keyword">void</span>) &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(__unix__) || defined(__unix) || defined(unix) || \</span></span><br><span class="line">    (defined(__APPLE__) &amp;&amp; defined(__MACH__))</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(CTL_HW) &amp;&amp; (defined(HW_MEMSIZE) || defined(HW_PHYSMEM64))</span></span><br><span class="line">    <span class="keyword">int</span> mib[<span class="number">2</span>];</span><br><span class="line">    mib[<span class="number">0</span>] = CTL_HW;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(HW_MEMSIZE)</span></span><br><span class="line">    mib[<span class="number">1</span>] = HW_MEMSIZE;            <span class="comment">/* OSX. --------------------- */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> defined(HW_PHYSMEM64)</span></span><br><span class="line">    mib[<span class="number">1</span>] = HW_PHYSMEM64;          <span class="comment">/* NetBSD, OpenBSD. --------- */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int64_t</span> size = <span class="number">0</span>;               <span class="comment">/* 64-bit */</span></span><br><span class="line">    <span class="keyword">size_t</span> len = <span class="keyword">sizeof</span>(size);</span><br><span class="line">    <span class="keyword">if</span> (sysctl( mib, <span class="number">2</span>, &amp;size, &amp;len, <span class="literal">NULL</span>, <span class="number">0</span>) == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">size_t</span>)size;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0L</span>;          <span class="comment">/* Failed? */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> defined(_SC_PHYS_PAGES) &amp;&amp; defined(_SC_PAGESIZE)</span></span><br><span class="line">    <span class="comment">/* FreeBSD, Linux, OpenBSD, and Solaris. -------------------- */</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">size_t</span>)sysconf(_SC_PHYS_PAGES) * (<span class="keyword">size_t</span>)sysconf(_SC_PAGESIZE);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> defined(CTL_HW) &amp;&amp; (defined(HW_PHYSMEM) || defined(HW_REALMEM))</span></span><br><span class="line">    <span class="comment">/* DragonFly BSD, FreeBSD, NetBSD, OpenBSD, and OSX. -------- */</span></span><br><span class="line">    <span class="keyword">int</span> mib[<span class="number">2</span>];</span><br><span class="line">    mib[<span class="number">0</span>] = CTL_HW;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(HW_REALMEM)</span></span><br><span class="line">    mib[<span class="number">1</span>] = HW_REALMEM;        <span class="comment">/* FreeBSD. ----------------- */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> defined(HW_PYSMEM)</span></span><br><span class="line">    mib[<span class="number">1</span>] = HW_PHYSMEM;        <span class="comment">/* Others. ------------------ */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> size = <span class="number">0</span>;      <span class="comment">/* 32-bit */</span></span><br><span class="line">    <span class="keyword">size_t</span> len = <span class="keyword">sizeof</span>(size);</span><br><span class="line">    <span class="keyword">if</span> (sysctl(mib, <span class="number">2</span>, &amp;size, &amp;len, <span class="literal">NULL</span>, <span class="number">0</span>) == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">size_t</span>)size;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0L</span>;          <span class="comment">/* Failed? */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0L</span>;          <span class="comment">/* Unknown method to get the data. */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0L</span>;          <span class="comment">/* Unknown OS. */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 阅读 </tag>
            
            <tag> C </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ManualResetEvent 与 AutoResetEvent 简介]]></title>
      <url>https://HaleLu.github.io/2017/07/ManualResetEvent-and-AutoResetEvent/</url>
      <content type="html"><![CDATA[<p>ManualResetEvent 和 AutoResetEvent 是两种线程同步的方案。</p>
<a id="more"></a>

<p>他们可以通过调用 <code>WaitOne()</code> 方法阻塞当前线程，直到其他线程上调用了 <code>Set()</code> 方法。</p>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>详细的使用方法如下所示：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> manualResetEvent = <span class="keyword">new</span> ManualResetEvent(<span class="literal">false</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">var</span> task1 = <span class="keyword">new</span> Task(() =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">"task1 : Before WaitOne()"</span>);</span><br><span class="line">                manualResetEvent.WaitOne();</span><br><span class="line">                Console.WriteLine(<span class="string">"task1 : After WaitOne()"</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">var</span> task2 = <span class="keyword">new</span> Task(() =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">"task2 : Before Set()"</span>);</span><br><span class="line">                manualResetEvent.Set();</span><br><span class="line">                Console.WriteLine(<span class="string">"task2 : After Set()"</span>);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            task1.Start();</span><br><span class="line">            Thread.Sleep(<span class="number">1000</span>);</span><br><span class="line">            task2.Start();</span><br><span class="line"></span><br><span class="line">            Task.WaitAll(task1, task2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">task1 : Before WaitOne()</span><br><span class="line">task2 : Before Set()</span><br><span class="line">task2 : After Set()</span><br><span class="line">task1 : After WaitOne()</span><br><span class="line">请按任意键继续. . .</span><br></pre></td></tr></table></figure>

<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>首先需要初始化一个 <code>ManualResetEvent</code> 或是 <code>AutoResetEvent</code> 。构造函数带一个参数，类型为 bool ，表示初始状态是否设置为终止。这个状态之后可以通过 <code>Set()</code> 和 <code>Reset()</code> 方法来改变。</p>
<p>换句话说，类似于 Event 中有一个开关，表示是否 <code>WaitOne</code> 时是否阻塞。</p>
<p>如果初始化为 true ，或是调用过 <code>Set()</code> ，那么这个开关就是打开的状态，当 Event 调用 <code>WaitOne()</code> 方法时，线程不会暂停，会继续执行下去。</p>
<p>而当初始化为 false ，或是调用过 <code>Reset()</code> 时，那么这个开关就是关闭的状态，当 Event 调用 <code>WaitOne()</code> 方法时线程会被阻塞，直到有其他线程通过 <code>Set()</code> 打开了开关。</p>
<h2 id="ManualResetEvent-与-AutoResetEvent-的区别"><a href="#ManualResetEvent-与-AutoResetEvent-的区别" class="headerlink" title="ManualResetEvent 与 AutoResetEvent 的区别"></a>ManualResetEvent 与 AutoResetEvent 的区别</h2><h3 id="ManualResetEvent"><a href="#ManualResetEvent" class="headerlink" title="ManualResetEvent"></a>ManualResetEvent</h3><p><code>ManualResetEvent</code> 的 <code>Set()</code> 为打开，<code>Reset()</code> 为关闭。一旦打开，所有阻塞在 <code>WaitOne()</code> 的线程都会继续执行。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> manualResetEvent = <span class="keyword">new</span> ManualResetEvent(<span class="literal">false</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">var</span> task1 = <span class="keyword">new</span> Task(() =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">"task1 : Before WaitOne()"</span>);</span><br><span class="line">                manualResetEvent.WaitOne();</span><br><span class="line">                Console.WriteLine(<span class="string">"task1 : After WaitOne()"</span>);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> task2 = <span class="keyword">new</span> Task(() =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">"task2 : Before WaitOne()"</span>);</span><br><span class="line">                manualResetEvent.WaitOne();</span><br><span class="line">                Console.WriteLine(<span class="string">"task2 : After WaitOne()"</span>);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> task3 = <span class="keyword">new</span> Task(() =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">"task3 : Before Set()"</span>);</span><br><span class="line">                manualResetEvent.Set();</span><br><span class="line">                Console.WriteLine(<span class="string">"task3 : After Set()"</span>);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            task1.Start();</span><br><span class="line">            task2.Start();</span><br><span class="line">            Thread.Sleep(<span class="number">1000</span>);</span><br><span class="line">            task3.Start();</span><br><span class="line"></span><br><span class="line">            Task.WaitAll(task1, task2, task3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">task2 : Before WaitOne()</span><br><span class="line">task1 : Before WaitOne()</span><br><span class="line">task3 : Before Set()</span><br><span class="line">task3 : After Set()</span><br><span class="line">task1 : After WaitOne()</span><br><span class="line">task2 : After WaitOne()</span><br><span class="line">请按任意键继续. . .</span><br></pre></td></tr></table></figure>

<h3 id="AutoResetEvent"><a href="#AutoResetEvent" class="headerlink" title="AutoResetEvent"></a>AutoResetEvent</h3><p><code>AutoResetEvent</code> 的 <code>Set()</code> 和 <code>Reset()</code> 与 <code>ManualResetEvent</code> 一致。不同的是，每有一个阻塞在 <code>WaitOne()</code> 的线程由于开关打开而继续执行，都会自动回弹开关。（这也就是 AutoReset 的含义）</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> autoResetEvent = <span class="keyword">new</span> AutoResetEvent(<span class="literal">false</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">var</span> task1 = <span class="keyword">new</span> Task(() =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">"task1 : Before WaitOne()"</span>);</span><br><span class="line">                autoResetEvent.WaitOne();</span><br><span class="line">                Console.WriteLine(<span class="string">"task1 : After WaitOne()"</span>);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> task2 = <span class="keyword">new</span> Task(() =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">"task2 : Before WaitOne()"</span>);</span><br><span class="line">                autoResetEvent.WaitOne();</span><br><span class="line">                Console.WriteLine(<span class="string">"task2 : After WaitOne()"</span>);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> task3 = <span class="keyword">new</span> Task(() =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">"task3 : Before Set()"</span>);</span><br><span class="line">                autoResetEvent.Set();</span><br><span class="line">                Console.WriteLine(<span class="string">"task3 : After Set()"</span>);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            task1.Start();</span><br><span class="line">            task2.Start();</span><br><span class="line">            Thread.Sleep(<span class="number">1000</span>);</span><br><span class="line">            task3.Start();</span><br><span class="line"></span><br><span class="line">            Task.WaitAll(task1, task2, task3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">task1 : Before WaitOne()</span><br><span class="line">task2 : Before WaitOne()</span><br><span class="line">task3 : Before Set()</span><br><span class="line">task3 : After Set()</span><br><span class="line">task1 : After WaitOne()</span><br></pre></td></tr></table></figure>

<p>保持阻塞，无法继续执行。<br>原因是 task1 被唤醒的同时关闭了开关， task2 无法通过。</p>
<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>需要唤醒的线程只有一个时，两种没有区别。</p>
<p>会有多个线程同时等待，而每次只希望唤醒一个线程时，用 AutoResetEvent ，</p>
<p>希望一次唤醒所有线程永久可以通过时，用 ManualResetEvent 。</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> .NET </tag>
            
            <tag> C# </tag>
            
            <tag> 技术 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一些实用的 .NET 开发工具（一）：swagger]]></title>
      <url>https://HaleLu.github.io/2017/03/DotNET-Tools-1/</url>
      <content type="html"><![CDATA[<h1 id="swagger-是什么？"><a href="#swagger-是什么？" class="headerlink" title="swagger 是什么？"></a>swagger 是什么？</h1><p>swagger 是一套框架，作用是自动化生成 .NET 的 Web API 项目的 API 文档。<br>ASP.NET Core 官方提供了简单的 Swagger 使用文档：<a href="https://docs.microsoft.com/en-us/aspnet/core/tutorials/web-api-help-pages-using-swagger" target="_blank" rel="noopener">ASP.NET Web API Help Pages using Swagger</a></p>
<a id="more"></a>

<h1 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h1><ol>
<li><p>首先我们要安装 Swashbuckle.AspNetCore 的 Nuget 包</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Install-Package Swashbuckle.AspNetCore -Pre</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后我们可以在 <em>Startup.cs</em> 中的 <em>ConfigureServices</em> 方法中注册 Swagger 文档生成器，这里可以定义一个或多个需要生成的文档</p>
 <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">services.AddMvc();</span><br><span class="line"></span><br><span class="line">services.AddSwaggerGen(c =&gt;</span><br><span class="line">&#123;</span><br><span class="line">c.SwaggerDoc(<span class="string">"v1"</span>, <span class="keyword">new</span> Info &#123; Title = <span class="string">"My API"</span>, Version = <span class="string">"v1"</span> &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>我们需要确保所有的 API 方法和非路径的参数都有明确的 Http 和 From 绑定修饰符</p>
 <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">HttpPost</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Create</span>(<span class="params">[FromBody]Product product</span>)</span></span><br><span class="line"><span class="function">...</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">[HttpGet]</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> IEnumerable&lt;Product&gt; <span class="title">Search</span>(<span class="params">[FromQuery]<span class="keyword">string</span> keywords</span>)</span></span><br><span class="line"><span class="function">...</span></span><br></pre></td></tr></table></figure>

<p> <em>注: 省略参数绑定修饰符则默认为请求 (query) 字段</em></p>
</li>
<li><p>在 <em>Configure</em> 方法中添加中间件来暴露 Swagger 生成的文档 JSON</p>
 <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.UseSwagger();</span><br></pre></td></tr></table></figure>

<p> <em>此时你可以启动应用并在 “/swagger/v1/swagger.json.” 下看到 Swagger 生成的 JSON</em></p>
</li>
<li><p>（可选）如果你想得到交互式的文档，可以添加 swagger-ui 中间件。需要指定 Swagger JSON 源</p>
 <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.UseSwaggerUI(c =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    c.SwaggerEndpoint(<span class="string">"/swagger/v1/swagger.json"</span>, <span class="string">"My API V1"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p> <em>在 “/swagger” 下可以看到这个交互式的页面</em></p>
</li>
</ol>
<h1 id="Swashbuckle-amp-ApiExplorer"><a href="#Swashbuckle-amp-ApiExplorer" class="headerlink" title="Swashbuckle &amp; ApiExplorer"></a>Swashbuckle &amp; ApiExplorer</h1><p>Swashbuckle 十分依赖 <em>ApiExplorer</em> 。<em>ApiExplorer</em> 是一项位于 ASP.NET Core 之上的 Metadata 层的服务。如果服务集使用的是 <em>AddMvc</em> 方法引导 MVC 栈的话那么会自动注册 <em>ApiExplorer_。然而如果是用 _AddMvcCore</em> 来自行引导 MVC stack 的话你需要手动添加 Api Explorer 服务:</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">services.AddMvcCore()</span><br><span class="line">    .AddApiExplorer();</span><br></pre></td></tr></table></figure>

<h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><p>Swashbuckle 包含三个包：Swagger 生成器, 暴露 JSON 格式 Swagger 文档的中间件和使用这个 JSON 暴露 swagger-ui 的中间件。 你可以通过 “Swashbuckle.AspNetCore” 包一起下载这些包或根据自己的需要独立下载。详细说明如下表所示</p>
<table>
<thead>
<tr>
<th>Package</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td><strong>Swashbuckle.AspNetCore.Swagger</strong></td>
<td>用一个 JSON API 暴露 <em>SwaggerDocument</em> 对象。在返回一个序列化的 JSON 之前，这个包需要注册一个 <em>ISwaggerProvider</em> 的实现用于生成 Swagger 文档</td>
</tr>
<tr>
<td><strong>Swashbuckle.AspNetCore.SwaggerGen</strong></td>
<td>用于注入第一个组件需要的 <em>ISwaggerProvider</em> 的实现。这个特定的实现可以用你的路由（routes）、控制器（controllers）和模型（models）自动生成 Swagger 文档</td>
</tr>
<tr>
<td><strong>Swashbuckle.AspNetCore.SwaggerUI</strong></td>
<td>暴露一个嵌入版本的 swagger-ui。你可以指定 ui 从哪个 API 获取Swagger JSON，然后 ui 会使用 JSON 生成交互式文档</td>
</tr>
</tbody></table>
<h1 id="配置-amp-自定义"><a href="#配置-amp-自定义" class="headerlink" title="配置 &amp; 自定义"></a>配置 &amp; 自定义</h1><!--
* [Swashbuckle.AspNetCore.Swagger](#swashbuckleaspnetcoreswagger)

    * [修改 Swagger JSON 路径](#修改-Swagger-JSON-路径)
    * [使用 HTTP 请求信息修改 Swagger](#使用-HTTP-请求信息修改-Swagger)

* [Swashbuckle.AspNetCore.SwaggerGen](#swashbuckleaspnetcoreswaggergen)

    * [列举 HTTP responses](#列举-HTTP-responses)
    * [Include Descriptions from XML Comments](#include-descriptions-from-xml-comments)
    * [Provide Global API Metadata](#provide-global-api-metadata)
    * [Generate Multiple Swagger Documents](#generate-multiple-swagger-documents)
    * [Omit Obsolete Operations and/or Schema Properties](#omit-obsolete-operations-andor-schema-properties)
    * [Omit Arbitrary Operations](#omit-arbitrary-operations)
    * [Customize Operation Tags (e.g. for UI Grouping)](#customize-operation-tags-eg-for-ui-grouping)
    * [Change Operation Sort Order (e.g. for UI Sorting)](#change-operation-sort-order-eg-for-ui-sorting)
    * [Customize Schema Id's](#customize-schema-ids)
    * [Customize Schema for Enum Types](#customize-schema-for-enum-types)
    * [Override Schema for Specific Types](#override-schema-for-specific-types)
    * [Extend Generator with Operation, Schema & Document Filters](#extend-generator-with-operation-schema--document-filters)
    * [Add Security Definitions and Requirements](#add-security-definitions-and-requirements)

* [Swashbuckle.AspNetCore.SwaggerUI](#swashbuckleaspnetcoreswaggerui)
    * [Change Releative Path to the UI](#change-relative-path-to-the-ui)
    * [List Multiple Swagger Documents](#list-multiple-swagger-documents)
    * [Apply swagger-ui Parameters](#apply-swagger-ui-parameters)
    * [Inject Custom CSS](#inject-custom-css)
    * [Enable OAuth2.0 Flows](#enable-oauth20-flows)
-->

<h2 id="Swashbuckle-AspNetCore-Swagger"><a href="#Swashbuckle-AspNetCore-Swagger" class="headerlink" title="Swashbuckle.AspNetCore.Swagger"></a>Swashbuckle.AspNetCore.Swagger</h2><h3 id="修改-Swagger-JSON-路径"><a href="#修改-Swagger-JSON-路径" class="headerlink" title="修改 Swagger JSON 路径"></a>修改 Swagger JSON 路径</h3><p>Swagger JSON 默认暴露在 <code>/swagger/{documentName}/swagger.json</code> 路径下。在启用中间件时我们可以自行修改这个路径。自定义的路径<strong>必须</strong>包含 <code>{documentName}</code> 字段。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.UseSwagger(c =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    c.RouteTemplate = <span class="string">"api-docs/&#123;documentName&#125;/swagger.json"</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><em>NOTE: 如果同时也使用了 SwaggerUI 中间件，那么我们还需要更新 Swagger UI 的配置：</em></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.UseSwaggerUI(c =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    c.SwaggerEndpoint(<span class="string">"/api-docs/v1/swagger.json"</span>, <span class="string">"My API V1"</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="使用-HTTP-请求信息修改-Swagger"><a href="#使用-HTTP-请求信息修改-Swagger" class="headerlink" title="使用 HTTP 请求信息修改 Swagger"></a>使用 HTTP 请求信息修改 Swagger</h3><p>如果我们想使用当前请求的某些信息设置 Swagger metadata，那么可以注册一个过滤器。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.UseSwagger(c =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    c.PreSerializeFilters.Add((swaggerDoc, httpReq) =&gt; swaggerDoc.Host = httpReq.Host.Value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><em>SwaggerDocument</em> 和当前的 <em>HttpRequest</em> 都会被传递至过滤器。这个方法提供了很大的灵活性。例如你可以赋值给 <code>host</code> 属性（如上所示），你也可以检查 session 信息或者是 Authoriation header 来验证用户权限。 </p>
<h2 id="Swashbuckle-AspNetCore-SwaggerGen"><a href="#Swashbuckle-AspNetCore-SwaggerGen" class="headerlink" title="Swashbuckle.AspNetCore.SwaggerGen"></a>Swashbuckle.AspNetCore.SwaggerGen</h2><h3 id="列举-HTTP-responses"><a href="#列举-HTTP-responses" class="headerlink" title="列举 HTTP responses"></a>列举 HTTP responses</h3><p>Swashbuckle 默认会为所有方法生成 <code>200</code> responses。如果这个方法返回一个 DTO，那么这个 DTO 将会被用来生成 HTTP responses body 的 schema，例如：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">HttpPost(<span class="meta-string">"&#123;id&#125;"</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> Product <span class="title">GetById</span>(<span class="params"><span class="keyword">int</span> id</span>)</span></span><br></pre></td></tr></table></figure>

<p>Will produce the following response metadata:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">responses: &#123;</span><br><span class="line">  200: &#123;</span><br><span class="line">    description: &quot;Success&quot;,</span><br><span class="line">    schema: &#123;</span><br><span class="line">      $ref: &quot;#/definitions/Product&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="指定-HTTP-responses"><a href="#指定-HTTP-responses" class="headerlink" title="指定 HTTP responses"></a>指定 HTTP responses</h4><p>如果你想要指定一个状态码和/或其他 responses，或者需要返回的不是 DTO 而是 <em>IActionResult_，你可以用 ASP.NET Core 中的 _ProducesResponseTypeAttribute</em> 描述特定的 response，例如：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">HttpPost(<span class="meta-string">"&#123;id&#125;"</span>)</span>]</span><br><span class="line">[<span class="meta">ProducesResponseType(typeof(Product), 200)</span>]</span><br><span class="line">[<span class="meta">ProducesResponseType(typeof(IDictionary&lt;string, string&gt;), 400)</span>]</span><br><span class="line">[<span class="meta">ProducesResponseType(typeof(void), 500)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> IActionResult <span class="title">GetById</span>(<span class="params"><span class="keyword">int</span> id</span>)</span></span><br></pre></td></tr></table></figure>

<p>这种写法会得到的 response metadata:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">responses: &#123;</span><br><span class="line">  200: &#123;</span><br><span class="line">    description: &quot;Success&quot;,</span><br><span class="line">    schema: &#123;</span><br><span class="line">      $ref: &quot;#/definitions/Product&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  400: &#123;</span><br><span class="line">    description: &quot;Bad Request&quot;,</span><br><span class="line">    schema: &#123;</span><br><span class="line">      type: &quot;object&quot;,</span><br><span class="line">      additionalProperties: &#123;</span><br><span class="line">        type: &quot;string&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  500: &#123;</span><br><span class="line">    description: &quot;Server Error&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用-XML-注释生成描述"><a href="#使用-XML-注释生成描述" class="headerlink" title="使用 XML 注释生成描述"></a>使用 XML 注释生成描述</h3><p>为了增强可读性，控制器和模型可以添加 <a href="http://msdn.microsoft.com/zh-cn/library/b2s063f7(v=vs.110).aspx" target="_blank" rel="noopener">XML 文档注释</a>，并在注册 Swashbuckle 时将这些注释包含进 Swagger JSON:</p>
<ol>
<li><p>打开项目的“属性”选项，选择“生成”标签页并勾上“ XML 文档文件”。然后当你生成项目时可以它会自动生成一个包含所有 XML 注释的文件。</p>
<p> <em>此时如果某个类或方法没有使用 XML 注释，那么会产生一个生成警告。如果想要去掉这个警告,在此页的“禁止显示警告”选项中添加警告码“1591”即可。</em></p>
</li>
<li><p>在注册 Swashbuckle 时引用 XML 注释文件来生成 Swagger JSON:</p>
 <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">services.AddSwaggerGen(c =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    c.SwaggerDoc(<span class="string">"v1"</span>,</span><br><span class="line">        <span class="keyword">new</span> Info</span><br><span class="line">        &#123;</span><br><span class="line">            Title = <span class="string">"My API - V1"</span>,</span><br><span class="line">            Version = <span class="string">"v1"</span></span><br><span class="line">        &#125;</span><br><span class="line">     );</span><br><span class="line"></span><br><span class="line">     <span class="keyword">var</span> filePath = Path.Combine(PlatformServices.Default.Application.ApplicationBasePath, <span class="string">"MyApi.xml"</span>);</span><br><span class="line">     c.IncludeXmlComments(filePath);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法注释应当有 summary、 remarks 和 response 标签。</p>
 <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> Retrieves a specific product by unique id</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;remarks&gt;</span>Awesomeness!<span class="doctag">&lt;/remarks&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;response code="200"&gt;</span>Product created<span class="doctag">&lt;/response&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;response code="400"&gt;</span>Product has missing/invalid values<span class="doctag">&lt;/response&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;response code="500"&gt;</span>Oops! Can't create your product right now<span class="doctag">&lt;/response&gt;</span></span></span><br><span class="line">[<span class="meta">HttpGet(<span class="meta-string">"&#123;id&#125;"</span>)</span>]</span><br><span class="line">[<span class="meta">ProducesResponseType(typeof(Product), 200)</span>]</span><br><span class="line">[<span class="meta">ProducesResponseType(typeof(IDictionary&lt;string, string&gt;), 400)</span>]</span><br><span class="line">[<span class="meta">ProducesResponseType(typeof(void), 500)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> Product <span class="title">GetById</span>(<span class="params"><span class="keyword">int</span> id</span>)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>重新生成项目，XML 注释文件会被更新。你可以打开 Swagger JSON 页面看看这些注释是怎么映射进对应的 Swagger 文档的。</p>
</li>
</ol>
<p><em>注：你也可以通过给 model 以及它们的属性添加 summary 标签的方式生成 Swagger 文档。如果你有多个 XML 注释文件（例如控制器和 model 是独立的类库），你可以多次调用 IncludeXmlComments 方法，他们会被合并进输出的 Swagger JSON.</em></p>
<h3 id="提供全局-API-Metadata"><a href="#提供全局-API-Metadata" class="headerlink" title="提供全局 API Metadata"></a>提供全局 API Metadata</h3><p>除了 <em>Paths_， _Operations</em> 和 _Responses_，Swashbuckle 还提供了全局 metadata (详见 <a href="http://swagger.io/specification/#swaggerObject)。例如，你可以为你的" target="_blank" rel="noopener">http://swagger.io/specification/#swaggerObject)。例如，你可以为你的</a> API、服务项、甚至是联系方式和证书信息提供一个完整的描述：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">c.SwaggerDoc(<span class="string">"v1"</span>,</span><br><span class="line">    <span class="keyword">new</span> Info</span><br><span class="line">    &#123;</span><br><span class="line">        Title = <span class="string">"My API - V1"</span>,</span><br><span class="line">        Version = <span class="string">"v1"</span>,</span><br><span class="line">        Description = <span class="string">"A sample API to demo Swashbuckle"</span>,</span><br><span class="line">        TermsOfService = <span class="string">"Knock yourself out"</span>,</span><br><span class="line">        Contact = <span class="keyword">new</span> Contact</span><br><span class="line">        &#123;</span><br><span class="line">            Name = <span class="string">"Joe Developer"</span>,</span><br><span class="line">            Email = <span class="string">"joe.developer@tempuri.org"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        License = <span class="keyword">new</span> License</span><br><span class="line">        &#123;</span><br><span class="line">            Name = <span class="string">"Apache 2.0"</span>,</span><br><span class="line">            Url = <span class="string">"http://www.apache.org/licenses/LICENSE-2.0.html"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><em>使用 IntelliSense 可以看到哪些字段是可用的。</em></p>
<p>未完待更。</p>
<!--
### 生成多个 Swagger 文档 ###

With the setup described above, the generator will include all API operations in a single Swagger document. However, you can create multiple documents if necessary. For example, you may want a separate document for each version of your API. To do this, start by defining multiple Swagger docs in _Startup.cs_:

<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">services.AddSwaggerGen(c =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    c.SwaggerDoc(<span class="string">"v1"</span>, <span class="keyword">new</span> Info &#123; Title = <span class="string">"My API - V1"</span>, Version = <span class="string">"v1"</span> &#125;);</span><br><span class="line">    c.SwaggerDoc(<span class="string">"v2"</span>, <span class="keyword">new</span> Info &#123; Title = <span class="string">"My API - V2"</span>, Version = <span class="string">"v2"</span> &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><em>Take note of the first argument to SwaggerDoc. It MUST be a URI-friendly name that uniquely identifies the document. It’s subsequently used to make up the path for requesting the corresponding Swagger JSON. For example, with the default routing, the above documents will be available at “/swagger/v1/swagger.json” and “/swagger/v2/swagger.json”.</em></p>
<p>Next, you’ll need to inform Swashbuckle which actions to include in each document. Although this can be customized (see below), by default, the generator will use the <em>ApiDescription.GroupName</em> property, part of the built-in metadata layer that ships with ASP.NET Core, to make this distinction. You can set this by decorating individual actions OR by applying an application wide convention.</p>
<h4 id="通过修饰符指定"><a href="#通过修饰符指定" class="headerlink" title="通过修饰符指定"></a>通过修饰符指定</h4><p>To include an action in a specific Swagger document, decorate it with the <em>ApiExplorerSettingsAttribute</em> and set <em>GroupName</em> to the corresponding document name (case sensitive):</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">HttpPost</span>]</span><br><span class="line">[<span class="meta">ApiExplorerSettings(GroupName = <span class="meta-string">"v2"</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Post</span>(<span class="params">[FromBody]Product product</span>)</span></span><br></pre></td></tr></table></figure>

<h4 id="通过-Convention-指定"><a href="#通过-Convention-指定" class="headerlink" title="通过 Convention 指定"></a>通过 Convention 指定</h4><p>To group by convention instead of decorating every action, you can apply a custom controller or action convention. For example, you could wire up the following convention to assign actions to documents based on the controller namespace.</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ApiExplorerGroupPerVersionConvention.cs</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ApiExplorerGroupPerVersionConvention</span> : <span class="title">IControllerModelConvention</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Apply</span>(<span class="params">ControllerModel controller</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">var</span> controllerNamespace = controller.ControllerType.Namespace; <span class="comment">// e.g. "Controllers.V1"</span></span><br><span class="line">        <span class="keyword">var</span> apiVersion = controllerNamespace.Split(<span class="string">'.'</span>).Last().ToLower();</span><br><span class="line"></span><br><span class="line">        controller.ApiExplorer.GroupName = apiVersion;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Startup.cs</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    services.AddMvc(c =&gt;</span><br><span class="line">        c.Conventions.Add(<span class="keyword">new</span> ApiExplorerGroupPerVersionConvention())</span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="自定义选择方式"><a href="#自定义选择方式" class="headerlink" title="自定义选择方式"></a>自定义选择方式</h4><p>When selecting actions for a given Swagger document, the generator invokes a <em>DocInclusionPredicate</em> against every <em>ApiDescription</em> that’s surfaced by the framework. The default implementation inspects <em>ApiDescription.GroupName</em> and returns true if the value is either null OR equal to the requested document name. However, you can also provide a custom inclusion predicate. For example, if you’re using an attribute-based approach to implement API versioning (e.g. Microsoft.AspNetCore.Mvc.Versioning), you could configure a custom predicate that leverages this instead:</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">c.DocInclusionPredicate((docName, apiDesc) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> versions = apiDesc.ControllerAttributes()</span><br><span class="line">        .OfType&lt;ApiVersionAttribute&gt;()</span><br><span class="line">        .SelectMany(attr =&gt; attr.Versions);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> versions.Any(v =&gt; <span class="string">$"v<span class="subst">&#123;v.ToString()&#125;</span>"</span> == docName);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="通过-UI-显示多个文档"><a href="#通过-UI-显示多个文档" class="headerlink" title="通过 UI 显示多个文档"></a>通过 UI 显示多个文档</h4><p>If you’re using the <em>SwaggerUI</em> middleware, you’ll need to specify any additional Swagger endpoints you want to expose. See <a href="#list-multiple-swagger-documents">List Multiple Swagger Documents</a> for more.</p>
<h3 id="忽略废弃操作和-或-Schema-属性"><a href="#忽略废弃操作和-或-Schema-属性" class="headerlink" title="忽略废弃操作和/或 Schema 属性"></a>忽略废弃操作和/或 Schema 属性</h3><p>The <a href="http://swagger.io/specification/">Swagger spec</a> includes a “deprecated” flag for indicating that an operation is deprecated and should be refrained from use. The Swagger generator will automatically set this flag if the corresponding action is decorated with the <em>ObsoleteAttribute</em>. However, instead of setting a flag, you can configure the generator to ignore obsolete actions altogether:</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">services.AddSwaggerGen(c =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    c.IgnoreObsoleteActions();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>A similar approach can also be used to omit obsolete properties from Schema’s in the Swagger output. That is, you can decorate model properties with the <em>ObsoleteAttribute</em> and configure Swashbuckle to omit those properties when generating JSON Schemas:</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">services.AddSwaggerGen(c =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    c.IgnoreObsoleteProperties();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="忽略某一方法"><a href="#忽略某一方法" class="headerlink" title="忽略某一方法"></a>忽略某一方法</h3><p>You can omit operations from the Swagger output by decorating individual actions OR by applying an application wide convention.</p>
<h4 id="通过修饰符指定-1"><a href="#通过修饰符指定-1" class="headerlink" title="通过修饰符指定"></a>通过修饰符指定</h4><p>To omit a specific action, decorate it with the <em>ApiExplorerSettingsAttribute</em> and set the <em>IgnoreApi</em> flag:</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">HttpGet(<span class="meta-string">"&#123;id&#125;"</span>)</span>]</span><br><span class="line">[<span class="meta">ApiExplorerSettings(IgnoreApi = true)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> Product <span class="title">GetById</span>(<span class="params"><span class="keyword">int</span> id</span>)</span></span><br></pre></td></tr></table></figure>

<h4 id="通过-Convention-指定-1"><a href="#通过-Convention-指定-1" class="headerlink" title="通过 Convention 指定"></a>通过 Convention 指定</h4><p>To omit actions by convention instead of decorating them individually, you can apply a custom action convention. For example, you could wire up the following convention to only document GET operations:</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ApiExplorerGetsOnlyConvention.cs</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ApiExplorerGetsOnlyConvention</span> : <span class="title">IActionModelConvention</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Apply</span>(<span class="params">ActionModel action</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        action.ApiExplorer.IsVisible = action.Attributes.OfType&lt;HttpGetAttribute&gt;().Any();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Startup.cs</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    services.AddMvc(c =&gt;</span><br><span class="line">        c.Conventions.Add(<span class="keyword">new</span> ApiExplorerGetsOnlyConvention())</span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="自定义方法标签（当-UI-需要以此分组时）"><a href="#自定义方法标签（当-UI-需要以此分组时）" class="headerlink" title="自定义方法标签（当 UI 需要以此分组时）"></a>自定义方法标签（当 UI 需要以此分组时）</h3><p>The <a href="http://swagger.io/specification/">Swagger spec</a> allows one or more “tags” to be assigned to an operation. The Swagger generator will assign the controller name as the default tag. This is particularly interesting if you’re using the <em>SwaggerUI</em> middleware as it uses this value to group operations.</p>
<p>You can override the default tag by providing a function that applies tags by convention. For example, the following configuration will tag, and therefore group operations in the UI, by HTTP method:</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">services.AddSwaggerGen(c =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    c.TagActionsBy(api =&gt; api.HttpMethod);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="改变方法顺序-当-UI-需要以此排序时"><a href="#改变方法顺序-当-UI-需要以此排序时" class="headerlink" title="改变方法顺序 (当 UI 需要以此排序时)"></a>改变方法顺序 (当 UI 需要以此排序时)</h3><p>By default, actions are ordered by assigned tag (see above) before they’re grouped into the path-based, hierarchichal structure imposed by the <a href="http://swagger.io/specification">Swagger spec</a>. You can change this behavior with a custom sorting strategy:</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">services.AddSwaggerGen(c =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    c.OrderActionsBy((apiDesc) =&gt; <span class="string">$"<span class="subst">&#123;apiDesc.ControllerName()&#125;</span>_<span class="subst">&#123;apiDesc.HttpMethod&#125;</span>"</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><em>NOTE: This dictates the sort order BEFORE actions are grouped and transformed into the Swagger format. So, it affects the ordering of groups (i.e. Swagger PathItems), AND the ordering of operations within a group, in the Swagger output.</em></p>
<h3 id="自定义-Schema-Id’s"><a href="#自定义-Schema-Id’s" class="headerlink" title="自定义 Schema Id’s"></a>自定义 Schema Id’s</h3><p>If the generator encounters complex parameter or response types, it will generate a corresponding JSON Schema, add it to the global “definitions” dictionary, and reference it from the operation description by unique Id. For example, if you have an action that returns a “Product” type, the generated schema will be referenced as follows:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">responses: &#123;</span><br><span class="line">  200: &#123;</span><br><span class="line">    description: &quot;Success&quot;,</span><br><span class="line">    schema: &#123;</span><br><span class="line">      $ref: &quot;#/definitions/Product&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>However, if it encounters multiple “Product” classes under different namespaces (e.g. “RequestModels.Product” &amp; “ResponseModels.Product”), then Swashbuckle will raise an exception due to “Conflicting schemaIds”. In this case, you’ll need to provide a custom Id strategy that further qualifies the name:</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">services.AddSwaggerGen(c =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    c.CustomSchemaIds((type) =&gt; type.FullName);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="自定义枚举类型-Schema"><a href="#自定义枚举类型-Schema" class="headerlink" title="自定义枚举类型 Schema"></a>自定义枚举类型 Schema</h3><p>When describing parameters and responses, Swashbuckle does its best to reflect the application’s serialization settings. For example, if the <em>CamelCaseContractResolver</em> is enabled, Schema property names will be camelCased in the generated Swagger.</p>
<p>Similarly for enum types, if the <em>StringEnumConverter</em> is enabled, then the corresponding Schema’s will list enum names rather than integer values.</p>
<p>For most cases this should be sufficient. However, if you need more control, Swashbuckle exposes the following options to override the default behavior:</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">services.AddSwaggerGen(c =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    c.DescribeAllEnumsAsStrings();</span><br><span class="line">    c.DescribeStringEnumsInCamelCase();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="为指定类型重写-Schema"><a href="#为指定类型重写-Schema" class="headerlink" title="为指定类型重写 Schema"></a>为指定类型重写 Schema</h3><p>Out-of-the-box, Swashbuckle does a decent job at generating JSON Schema’s that accurately describe your request and response payloads. However, if you’re customizing serialization behavior for certain types in your API, you may need to help it out.</p>
<p>For example, you might have a class with muliple properties that you want to represent in JSON as a comma-separated string. To do this you would probably implement a custom <em>JsonConverter</em>. In this case, Swashbuckle doesn’t know how the converter is implemented and so you would need to provide it with a Schema that accurately describes the type:</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PhoneNumber.cs</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PhoneNumber</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> CountryCode &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> AreaCode &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> SubscriberId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Startup.cs</span></span><br><span class="line">services.AddSwaggerGen(c =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    c.MapType&lt;PhoneNumber&gt;(() =&gt; <span class="keyword">new</span> Schema &#123; Type = <span class="string">"string"</span> &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="Extend-Generator-with-Operation-Schema-amp-Document-Filters"><a href="#Extend-Generator-with-Operation-Schema-amp-Document-Filters" class="headerlink" title="Extend Generator with Operation, Schema &amp; Document Filters"></a>Extend Generator with Operation, Schema &amp; Document Filters</h3><p>Swashbuckle exposes a filter pipeline that hooks into the generation process. Once generated, individual metadata objects are passed into the pipeline where they can be modified further. You can wire up one or more custom filters for <em>Operation</em>, <em>Schema</em> and <em>Document</em> objects:</p>
<h4 id="Operation-Filters"><a href="#Operation-Filters" class="headerlink" title="Operation Filters"></a>Operation Filters</h4><p>Swashbuckle retrieves an <em>ApiDescription</em>, part of ASP.NET Core, for every action and uses it to generate a corresponding <em>Swagger Operation</em>. Once generated, it passes the <em>Operation</em> and the <em>ApiDescription</em> through the list of configured Operation Filters.</p>
<p>In a typical filter implementation, you inspect the <em>ApiDescription</em> for relevant information (e.g. route info, action attributes etc.) and then update the Swagger <em>Operation</em> accordingly. For example, the following filter lists an additional “401” response for all actions that are decorated with the <em>AuthorizeAttribute</em>:</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AuthResponsesOperationFilter.cs</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AuthResponsesOperationFilter</span> : <span class="title">IOperationFilter</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Apply</span>(<span class="params">Operation operation, OperationFilterContext context</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">var</span> authAttributes = context.ApiDescription</span><br><span class="line">            .ControllerAttributes()</span><br><span class="line">            .Union(context.ApiDescription.ActionAttributes())</span><br><span class="line">            .OfType&lt;AuthorizeAttribute&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (authAttributes.Any())</span><br><span class="line">            operation.Responses.Add(<span class="string">"401"</span>, <span class="keyword">new</span> Response &#123; Description = <span class="string">"Unauthorized"</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Startup.cs</span></span><br><span class="line">services.AddSwaggerGen(c =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    c.OperationFilter&lt;AuthResponsesOperationFilter&gt;();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><em>NOTE: Filter pipelines are DI-aware. That is, you can create filters with constructor parameters and if the parameter types are registered with the DI framework, they’ll be automatically injected when the filters are instantiated</em></p>
<h4 id="Schema-Filters"><a href="#Schema-Filters" class="headerlink" title="Schema Filters"></a>Schema Filters</h4><p>Swashbuckle generates a Swagger-flavored <em><a href="http://swagger.io/specification/#schemaObject">JSONSchema</a></em> for every parameter, response and property type that’s exposed by your controller actions. Once generated, it passes the <em>Schema</em> and <em>Type</em> through the list of configured Schema Filters.</p>
<p>The example below adds an AutoRest vendor extension (see <a href="https://github.com/Azure/autorest/blob/master/docs/extensions/readme.md#x-ms-enum">https://github.com/Azure/autorest/blob/master/docs/extensions/readme.md#x-ms-enum</a>) to inform the AutoRest tool how enums should be modelled when it generates the API client.</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AutoRestSchemaFilter.cs</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AutoRestSchemaFilter</span> : <span class="title">ISchemaFilter</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Apply</span>(<span class="params">Schema schema, SchemaFilterContext context</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">var</span> typeInfo = context.SystemType.GetTypeInfo();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (typeInfo.IsEnum)</span><br><span class="line">        &#123;</span><br><span class="line">            schema.Extensions.Add(</span><br><span class="line">                <span class="string">"x-ms-enum"</span>,</span><br><span class="line">                <span class="keyword">new</span> &#123; name = typeInfo.Name,  modelAsString = <span class="literal">true</span> &#125;</span><br><span class="line">            );</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Startup.cs</span></span><br><span class="line">services.AddSwaggerGen(c =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    c.SchemaFilter&lt;AutoRestSchemaFilter&gt;();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="Document-Filters"><a href="#Document-Filters" class="headerlink" title="Document Filters"></a>Document Filters</h4><p>Once a <em>Swagger Document</em> has been generated, it too can be passed through a set of pre-configured <em>Document</em> Filters. This gives full control to modify the document however you see fit. To ensure you’re still returning valid Swagger JSON, you should have a read through the <a href="http://swagger.io/specification/">specification</a> before using this filter type.</p>
<p>The example below provides a description for any tags that are assigned to operations in the document:</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TagDescriptionsDocumentFilter</span> : <span class="title">IDocumentFilter</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Apply</span>(<span class="params">SwaggerDocument swaggerDoc, DocumentFilterContext context</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        swaggerDoc.Tags = <span class="keyword">new</span>[] &#123;</span><br><span class="line">            <span class="keyword">new</span> Tag &#123; Name = <span class="string">"Products"</span>, Description = <span class="string">"Browse/manage the product catalog"</span> &#125;,</span><br><span class="line">            <span class="keyword">new</span> Tag &#123; Name = <span class="string">"Orders"</span>, Description = <span class="string">"Submit orders"</span> &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>NOTE: If you’re using the SwaggerUI middleware, this filter can be used to display additional descriptions beside each group of Operations.</em></p>
<h3 id="Add-Security-Definitions-and-Requirements"><a href="#Add-Security-Definitions-and-Requirements" class="headerlink" title="Add Security Definitions and Requirements"></a>Add Security Definitions and Requirements</h3><p>In Swagger, you can describe how your API is secured by defining one or more <em>Security Scheme’s</em> (e.g basic, api key, oauth etc.) and declaring which of those schemes are applicable globally OR for specific operations. For more details, take a look at the “securityDefinitions” and “security” fields in the <a href="http://swagger.io/specification/#swaggerObject">Swagger spec</a>.</p>
<p>You can use some of the options described above to include security metadata in the generated <em>Swagger Document</em>. The example below adds an <a href="https://oauth.net/2/">OAuth 2.0</a> definition to the global metadata and a corresponding <em>Operation Filter</em> that uses the presence of an <em>AuthorizeAttribute</em> to determine which operations the scheme applies to.</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Startup.cs</span></span><br><span class="line">services.AddSwaggerGen(c =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// Define the OAuth2.0 scheme that's in use (i.e. Implicit Flow)</span></span><br><span class="line">    c.AddSecurityDefinition(<span class="string">"oauth2"</span>, <span class="keyword">new</span> OAuth2Scheme</span><br><span class="line">    &#123;</span><br><span class="line">        Type = <span class="string">"oauth2"</span>,</span><br><span class="line">        Flow = <span class="string">"implicit"</span>,</span><br><span class="line">        AuthorizationUrl = <span class="string">"http://petstore.swagger.io/oauth/dialog"</span></span><br><span class="line">        Scopes = <span class="keyword">new</span> Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">string</span>&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            &#123; <span class="string">"readAccess"</span>, <span class="string">"Access read operations"</span> &#125;,</span><br><span class="line">            &#123; <span class="string">"writeAccess"</span>, <span class="string">"Access write operations"</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// Assign scope requirements to operations based on AuthorizeAttribute</span></span><br><span class="line">    c.OperationFilter&lt;SecurityRequirementsOperationFilter&gt;();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SecurityRequirementsOperationFilter.cs</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SecurityRequirementsOperationFilter</span> : <span class="title">IOperationFilter</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Apply</span>(<span class="params">Operation operation, OperationFilterContext context</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">// Policy names map to scopes</span></span><br><span class="line">        <span class="keyword">var</span> controllerScopes = context.ApiDescription.ControllerAttributes()</span><br><span class="line">            .OfType&lt;AuthorizeAttribute&gt;()</span><br><span class="line">            .Select(attr =&gt; attr.Policy);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> actionScopes = context.ApiDescription.ActionAttributes()</span><br><span class="line">            .OfType&lt;AuthorizeAttribute&gt;()</span><br><span class="line">            .Select(attr =&gt; attr.Policy);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> requiredScopes = controllerScopes.Union(actionScopes).Distinct();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (requiredScopes.Any())</span><br><span class="line">        &#123;</span><br><span class="line">            operation.Responses.Add(<span class="string">"401"</span>, <span class="keyword">new</span> Response &#123; Description = <span class="string">"Unauthorized"</span> &#125;);</span><br><span class="line">            operation.Responses.Add(<span class="string">"403"</span>, <span class="keyword">new</span> Response &#123; Description = <span class="string">"Forbidden"</span> &#125;);</span><br><span class="line"></span><br><span class="line">            operation.Security = <span class="keyword">new</span> List&lt;IDictionary&lt;<span class="keyword">string</span>, IEnumerable&lt;<span class="keyword">string</span>&gt;&gt;&gt;();</span><br><span class="line">            operation.Security.Add(<span class="keyword">new</span> Dictionary&lt;<span class="keyword">string</span>, IEnumerable&lt;<span class="keyword">string</span>&gt;&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                &#123; <span class="string">"oauth2"</span>, requiredScopes &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>NOTE: If you’re using the SwaggerUI middleware, you can enable interactive OAuth2.0 flows that are powered by the emitted security metadata. See <a href="#">Enabling OAuth2.0 Flows</a> for more details.</em></p>
<h2 id="Swashbuckle-AspNetCore-SwaggerUI"><a href="#Swashbuckle-AspNetCore-SwaggerUI" class="headerlink" title="Swashbuckle.AspNetCore.SwaggerUI"></a>Swashbuckle.AspNetCore.SwaggerUI</h2><h3 id="Change-Relative-Path-to-the-UI"><a href="#Change-Relative-Path-to-the-UI" class="headerlink" title="Change Relative Path to the UI"></a>Change Relative Path to the UI</h3><p>By default, the Swagger UI will be exposed at “/swagger”. If neccessary, you can alter this when enabling the SwaggerUI middleware:</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.UseSwaggerUI(c =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    c.RoutePrefix = <span class="string">"api-docs"</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="List-Multiple-Swagger-Documents"><a href="#List-Multiple-Swagger-Documents" class="headerlink" title="List Multiple Swagger Documents"></a>List Multiple Swagger Documents</h3><p>When enabling the middleware, you’re required to specify one or more Swagger endpoints (fully qualified or relative to the current host) to power the UI. If you provide multiple endpoints, they’ll be listed in the top right corner of the page, allowing users to toggle between the different documents. For example, the following configuration could be used to document different versions of an API.</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.UseSwaggerUI(c =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    c.SwaggerEndpoint(<span class="string">"/swagger/v1/swagger.json"</span>, <span class="string">"V1 Docs"</span>);</span><br><span class="line">    c.SwaggerEndpoint(<span class="string">"/swagger/v2/swagger.json"</span>, <span class="string">"V2 Docs"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Apply-swagger-ui-Parameters"><a href="#Apply-swagger-ui-Parameters" class="headerlink" title="Apply swagger-ui Parameters"></a>Apply swagger-ui Parameters</h3><p>The swagger-ui ships with it’s own set of configuration parameters, all described here <a href="https://github.com/swagger-api/swagger-ui#swaggerui">https://github.com/swagger-api/swagger-ui#swaggerui</a>. In Swashbuckle, most of these are surfaced through the SwaggerUI middleware options:</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">app.UseSwaggerUI(c =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    c.EnabledValidator();</span><br><span class="line">    c.BooleanValues(<span class="keyword">new</span> <span class="keyword">object</span>[] &#123; <span class="number">0</span>, <span class="number">1</span> &#125;);</span><br><span class="line">    c.DocExpansion(<span class="string">"full"</span>);</span><br><span class="line">    c.InjectOnCompleteJavaScript(<span class="string">"/swagger-ui/on-complete.js"</span>);</span><br><span class="line">    c.InjectOnFailureJavaScript(<span class="string">"/swagger-ui/on-failure.js"</span>);</span><br><span class="line">    c.SupportedSubmitMethods(<span class="keyword">new</span>[] &#123; <span class="string">"get"</span>, <span class="string">"post"</span>, <span class="string">"put"</span>, <span class="string">"patch"</span> &#125;);</span><br><span class="line">    c.ShowRequestHeaders();</span><br><span class="line">    c.ShowJsonEditor();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>Most of them are self explanatory, mapping back to the corresponding swagger-ui docs. To inject custom JavaScript (i.e. <em>InjectOnCompleteJavaScript</em> and <em>InjectOnFailureJavaScript</em>), you’ll need to add the scripts to your application and provide the relative paths as shown above. In ASP.NET Core, this is easily done by placing your script files in the <em>wwwroot</em> folder.</p>
<h3 id="Inject-Custom-CSS"><a href="#Inject-Custom-CSS" class="headerlink" title="Inject Custom CSS"></a>Inject Custom CSS</h3><p>To tweak the look and feel, you can inject additional CSS stylesheets by adding them to your <em>wwwroot</em> folder and specifying the relative paths in the middleware options:</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.UseSwaggerUI(c =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    c.InjectStylesheet(<span class="string">"/swagger-ui/custom.css"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Enable-OAuth2-0-Flows"><a href="#Enable-OAuth2-0-Flows" class="headerlink" title="Enable OAuth2.0 Flows"></a>Enable OAuth2.0 Flows</h3><p>The swagger-ui has built-in support to participate in OAuth2.0 authorization flows. It interacts with authorization and/or token endpoints, as specified in the Swagger JSON, to obtain access tokens for subsequent API calls. See <a href="#add-security-definitions-and-requirements">Adding Security Definitions and Requirements</a> for an example of adding OAuth2.0 metadata to the generated Swagger.</p>
<p>If you’re Swagger endpoint includes the appropriate security metadata, you can enable the UI interaction as follows:</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.UseSwaggerUI(c =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// Provide client ID, client ID, realm and application name</span></span><br><span class="line">    c.ConfigureOAuth2(<span class="string">"swagger-ui"</span>, <span class="string">"swagger-ui-secret"</span>, <span class="string">"swagger-ui-realm"</span>, <span class="string">"Swagger UI"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>–&gt;</p>
-->]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> .NET </tag>
            
            <tag> swagger </tag>
            
            <tag> 生成文档 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OAuth 2.0 认证框架（一）]]></title>
      <url>https://HaleLu.github.io/2017/02/OAuth-1/</url>
      <content type="html"><![CDATA[<p>最近需要搭一个第三方验证的服务器。这个想法之前就有，但是当时水平粗浅，也只能看个一知半解，没有理解透彻。趁这个机会好好学一学OAuth 2.0认证框架。</p>
<a id="more"></a>

<h2 id="一些小问题"><a href="#一些小问题" class="headerlink" title="一些小问题"></a>一些小问题</h2><h3 id="什么是OAuth-2-0"><a href="#什么是OAuth-2-0" class="headerlink" title="什么是OAuth 2.0"></a>什么是OAuth 2.0</h3><p>OAuth是一套第三方认证框架，即认证服务器和资源服务器分开，用户向认证服务器授权，资源服务器才有权使用认证服务器认证用户身份，认证通过后用户才有权使用资源服务器中的权限资源。2.0是目前的版本号。<br>以下的OAuth代指OAuth 2.0框架。<br>目前微信、QQ、新浪微博、人人网等众多网站都支持这样的第三方登录，基本都是使用的OAuth框架。其中Github的较为标准。所以我们可以以此为例。</p>
<h3 id="为什么要用第三方登录"><a href="#为什么要用第三方登录" class="headerlink" title="为什么要用第三方登录"></a>为什么要用第三方登录</h3><p>对于小型应用而言，希望降低使用者的门槛，无需经过复杂的注册；另一方面可以直接使用腾讯、新浪等大网站的客户资源；性能和成本上讲也省掉了自己维护大量用户数据的烦恼。<br>对于大型网站而言，方便自己解耦，可以更方便地扩展新的应用；也可以吸引用户粘性，让用户更多的应用关联自己的用户资源；同时这种关联信息也是日后数据挖掘的一项原料。<br>当然，上面的这些其实都是我瞎猜的。</p>
<p>自己的项目之所以要将授权服务器拆开纯粹是为了解耦，可以多应用使用相同的用户资源而不会建立多余数据库连接。</p>
<h2 id="OAuth基本定义"><a href="#OAuth基本定义" class="headerlink" title="OAuth基本定义"></a>OAuth基本定义</h2><h3 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h3><p>OAuth框架定义了四种角色：</p>
<ul>
<li>资源拥有者（Resource Owner）<ul>
<li>指权限资源的拥有者，当拥有者是一个人的时候，我们称为用户。（权限资源指需要经过验证，确认具有权限的主体才能获取的资源）</li>
</ul>
</li>
<li>资源服务器（Resource Server）<ul>
<li>管理权限资源，接受和响应使用令牌（token）的请求。</li>
</ul>
</li>
<li>客户端（Client）<ul>
<li>经过资源拥有者授权的、代表其发送权限资源请求的应用。（客户端可以泡在服务器、用户电脑或是其它任何设备上）</li>
</ul>
</li>
<li>授权服务器（Authorization Server）<ul>
<li>在验证资源拥有者身份和获得授权后向客户端分配令牌（token）。</li>
</ul>
</li>
</ul>
<h3 id="协议流"><a href="#协议流" class="headerlink" title="协议流"></a>协议流</h3><pre><code>+--------+                               +---------------+
|        |--(A)- Authorization Request -&gt;|   Resource    |
|        |                               |     Owner     |
|        |&lt;-(B)-- Authorization Grant ---|               |
|        |                               +---------------+
|        |
|        |                               +---------------+
|        |--(C)-- Authorization Grant --&gt;| Authorization |
| Client |                               |     Server    |
|        |&lt;-(D)----- Access Token -------|               |
|        |                               +---------------+
|        |
|        |                               +---------------+
|        |--(E)----- Access Token ------&gt;|    Resource   |
|        |                               |     Server    |
|        |&lt;-(F)--- Protected Resource ---|               |
+--------+                               +---------------+</code></pre><h4 id="A-Authorization-Request"><a href="#A-Authorization-Request" class="headerlink" title="(A) Authorization Request"></a>(A) Authorization Request</h4><p>客户端需要资源拥有者授权。授权请求可以直接对资源拥有者请求，或者更好的做法是通过授权服务器作为媒介。</p>
<h4 id="B-Authorization-Grant"><a href="#B-Authorization-Grant" class="headerlink" title="(B) Authorization Grant"></a>(B) Authorization Grant</h4><p>客户端收到来自资源拥有者的授权许可。许可的格式通常使用以下定义的四种授权模式的一种（当然你也可以自行定义授权模式）。具体使用何种模式取决于客户端使用了哪种且授权服务器是否支持。</p>
<h4 id="C-Authorization-Grant"><a href="#C-Authorization-Grant" class="headerlink" title="(C) Authorization Grant"></a>(C) Authorization Grant</h4><p>客户端向授权服务器请求一个令牌（token）表示授权许可。</p>
<h4 id="D-Access-Token"><a href="#D-Access-Token" class="headerlink" title="(D) Access Token"></a>(D) Access Token</h4><p>授权服务器验证客户端并确认授权许可。如果授权许可通过，那么分配给客户端一个token。</p>
<h4 id="E-Access-Token"><a href="#E-Access-Token" class="headerlink" title="(E) Access Token"></a>(E) Access Token</h4><p>客户端通过token验证身份并从资源服务器请求资源。</p>
<h4 id="F-Protected-Resource"><a href="#F-Protected-Resource" class="headerlink" title="(F) Protected Resource"></a>(F) Protected Resource</h4><p>资源服务器验证token有效性后处理请求。</p>
<h3 id="授权模式"><a href="#授权模式" class="headerlink" title="授权模式"></a>授权模式</h3><p>有四种常见的授权模式：</p>
<h4 id="授权码模式"><a href="#授权码模式" class="headerlink" title="授权码模式"></a>授权码模式</h4><p>这种授权模式将授权服务器作为客户端和资源拥有者的中间媒介。用户不向客户端直接授权，而是将用户指引到授权服务器，然后将得到授权码的用户定向回客户端（原文1.3.1中提到通过user-agent的方式引导，我没有太懂是什么意思，欢迎看懂的小伙伴给我解答一下）</p>
<h4 id="简化模式"><a href="#简化模式" class="headerlink" title="简化模式"></a>简化模式</h4><p>简化模式是为使用脚本语言（例如JavaScript）的客户端优化设计的一种授权模式。简化模式中不分配授权码，而是直接分配token（作为资源拥有者的身份验证结果）。因为没有中间验证信息（例如授权码），所以这种授权模式称为简化模式。<br>在简化模式中，授权服务器并不验证客户端就直接分配了token。在一些情况下，客户端身份可以通过重定向到返回token的URI来验证客户端。这个token可能会被暴露给用户或者其他用户UA层面的应用。<br>简化模式对于一些比如浏览器客户端可以提高效率，当然也会导致一些安全上的问题。</p>
<p>第一点是可能token被抓，所以<strong>必须</strong>使用TLS（即使用HTTPS）。<br>第二点是可能存在“点击挟持”（clickjacking），即使用隐形的不可见的button覆盖在授权页面上，让用户在不知情情况下误授权。所以本地应用<strong>应当</strong>使用外部浏览器而不是应用内的嵌入浏览器。</p>
<h4 id="密码验证模式"><a href="#密码验证模式" class="headerlink" title="密码验证模式"></a>密码验证模式</h4><p>密码模式即直接使用账号密码（或其他验证信息）登录。只<strong>应当</strong>用于用户对客户端高度信任（例如是设备操作系统的一部分）且其他授权模式都不可用的情况。<br>即使使用这种模式，客户端也不应当存储账号密码，而是每次都使用验证信息去交换token。</p>
<h4 id="客户端证书模式"><a href="#客户端证书模式" class="headerlink" title="客户端证书模式"></a>客户端证书模式</h4><p>将客户端证书（或其他形式的客户端凭证）看做授权凭证。在已经授权的资源范围内，客户端可以被看做用户本人，拥有获取权限资源的权限。</p>
<h3 id="授权令牌（token）"><a href="#授权令牌（token）" class="headerlink" title="授权令牌（token）"></a>授权令牌（token）</h3><p>简单来说，token就是表示授权的一个临时证明，通常是一个字符串。这个字符串通常对客户端是不透明（opaque）的（根据我的理解，应该指的是看不见）。用户授权后，资源服务器和授权服务器才可以通过token来验证对某一指定域的权限。当超越已授权的权限时，可能需要提供额外的验证信息来获得权限。<br>token本身就已经足够表明授权者身份。</p>
<p>未完待更。</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="http://www.rfcreader.com/#rfc6749" target="_blank" rel="noopener">The OAuth 2.0 Authorization Framework - Internet Engineering Task Force (IETF)</a></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 身份验证 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[公钥基础设施（四）：证书签发（以OpenSSL为例）]]></title>
      <url>https://HaleLu.github.io/2017/02/Public-Key-Infrastructure-4/</url>
      <content type="html"><![CDATA[<p>这篇是以OpenSSL为例如何生成证书、自签名以及签发客户证书。</p>
<a id="more"></a>

<p>需事先安装OpenSSL。</p>
<h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><p>前几篇我们已经讲过，证书相当于是权威机构对个人公钥的认证，而个人持有对应的私钥并保密。那么我们如何创建证书呢？</p>
<h2 id="搭建根CA"><a href="#搭建根CA" class="headerlink" title="搭建根CA"></a>搭建根CA</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>先建目录：</p>
<figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> rootCA</span><br><span class="line"><span class="built_in">cd</span> rootCA</span><br><span class="line"><span class="built_in">mkdir</span> newcerts private conf requests</span><br></pre></td></tr></table></figure>

<p>再创建序号和记录文件</p>
<figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">touch index.txt</span><br><span class="line"><span class="built_in">echo</span> unique_subject = yes &gt; index.txt.attr</span><br><span class="line"><span class="built_in">echo</span> <span class="number">01</span> &gt; serial</span><br></pre></td></tr></table></figure>

<h3 id="创建私钥"><a href="#创建私钥" class="headerlink" title="创建私钥"></a>创建私钥</h3><p>首先我们需要生成一个私钥：</p>
<figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa -out private/ca.key <span class="number">2048</span></span><br></pre></td></tr></table></figure>

<p>这样生成的私钥是不加密的，当然我们也可以选择一种加密方式（可选的加密方式可以使用 <code>openssl help</code> 查询）<br>以des3为例，我们生成私钥的命令：</p>
<figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa -des3 -out private/ca.key <span class="number">2048</span></span><br></pre></td></tr></table></figure>

<p>输入一个不少于4位的密码即可。</p>
<p><em>注：这样加密的意义是一旦私钥被复制可以不让攻击者直接就能使用私钥，然而只能拖延不能完全防止。原则上私钥被复制需要更换私钥。</em></p>
<h3 id="创建自签名证书"><a href="#创建自签名证书" class="headerlink" title="创建自签名证书"></a>创建自签名证书</h3><p>所谓请求就是将自己的信息和自己需要被签名的公钥打包成的一个文件。这个请求会被提交给CA确认。确认无误后CA会用自己的私钥签名。  </p>
<p>接下来我们需要生成一个请求，我们有两种可选方式：</p>
<h4 id="直接生成证书（方式一）"><a href="#直接生成证书（方式一）" class="headerlink" title="直接生成证书（方式一）"></a>直接生成证书（方式一）</h4><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -x509 -key private/ca.key -out ca.crt</span><br></pre></td></tr></table></figure>

<p>接下来按照指引填入相关信息。<br>这样就生成了一张自签名证书。<br>其中 <code>-x509</code> 表示生成x509格式的自签名证书。（待会我们生成请求时会使用 <code>-new</code> 而不是 <code>-x509</code> ）<br>另外，我们可以通过 <code>-day</code> 参数指定过期时间, <code>-set_serial</code> 参数设置特定序列号。<br>具体可以使用 <code>openssl req -help</code> 命令查看详细。 </p>
<h4 id="通过配置文件生成请求（方式二）"><a href="#通过配置文件生成请求（方式二）" class="headerlink" title="通过配置文件生成请求（方式二）"></a>通过配置文件生成请求（方式二）</h4><p>至于配置文件的详细解释可以查阅<a href="https://www.openssl.org/docs/man1.1.0/apps/config.html" target="_blank" rel="noopener">官方文档</a>。</p>
<p>以下只给一个样例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">[ default ]</span><br><span class="line">name		= rootCA</span><br><span class="line">dir		= .</span><br><span class="line"></span><br><span class="line">base_url	= http://your.website.com</span><br><span class="line">crl_url		= $base_url/crls/$name.crl</span><br><span class="line"></span><br><span class="line">[ ca ]</span><br><span class="line">default_ca	= CA_root</span><br><span class="line"></span><br><span class="line">####################################################################</span><br><span class="line"></span><br><span class="line">[ CA_root ]</span><br><span class="line">new_certs_dir	= $dir/newcerts		# default place for new certs.</span><br><span class="line"></span><br><span class="line">private_key	= $dir/private/ca.key	# The private key</span><br><span class="line">certificate	= $dir/ca.crt		# The CA certificate</span><br><span class="line"></span><br><span class="line">database	= $dir/index.txt	# database index file.</span><br><span class="line">serial		= $dir/serial		# The current serial number</span><br><span class="line">crlnumber	= $dir/crlserial	# the current crl number</span><br><span class="line">RANDFILE	= $dir/private/.rand	# private random number file</span><br><span class="line"></span><br><span class="line">preserve	= no</span><br><span class="line">name_opt	= ca_default</span><br><span class="line">cert_opt	= ca_default</span><br><span class="line"></span><br><span class="line">default_startdate	= 170101000000Z</span><br><span class="line">default_enddate		= 200201000000Z</span><br><span class="line">default_crl_days	= 30</span><br><span class="line">default_md		= default</span><br><span class="line"></span><br><span class="line">x509_extensions	= v3_intermediate_ca</span><br><span class="line"></span><br><span class="line">policy		= policy_root</span><br><span class="line"></span><br><span class="line">[ policy_root ]</span><br><span class="line">countryName		= supplied</span><br><span class="line">stateOrProvinceName	= optional</span><br><span class="line">organizationName	= match</span><br><span class="line">organizationalUnitName	= supplied</span><br><span class="line">commonName		= supplied</span><br><span class="line">emailAddress		= optional</span><br><span class="line"></span><br><span class="line">####################################################################</span><br><span class="line"></span><br><span class="line">[ req ]</span><br><span class="line">default_bits		= 2048</span><br><span class="line">default_keyfile		= $dir/private/ca.key</span><br><span class="line">distinguished_name	= req_distinguished_root</span><br><span class="line">x509_extensions		= v3_ca</span><br><span class="line">string_mask		= utf8only</span><br><span class="line"></span><br><span class="line">[ req_distinguished_root ]</span><br><span class="line">countryName			= Country Name (2 letter code)</span><br><span class="line">countryName_min			= 2</span><br><span class="line">countryName_max			= 2</span><br><span class="line"></span><br><span class="line">stateOrProvinceName		= State or Province Name (full name)</span><br><span class="line"></span><br><span class="line">localityName			= Locality Name (eg, city)</span><br><span class="line"></span><br><span class="line">organizationName		= Organization Name (eg, company)</span><br><span class="line"></span><br><span class="line">organizationalUnitName		= Organizational Unit Name (eg, section)</span><br><span class="line"></span><br><span class="line">commonName			= Common Name (e.g. server FQDN or YOUR name)</span><br><span class="line">commonName_max			= 64</span><br><span class="line"></span><br><span class="line">countryName_default		= CN</span><br><span class="line">stateOrProvinceName_default	= Your Province</span><br><span class="line">organizationName_default	= Your Company Name</span><br><span class="line">organizationalUnitName_default	= Secure Digital Certificate Signing</span><br><span class="line">commonName_default		= The Root CA of Your Private Certifications</span><br><span class="line"></span><br><span class="line">####################################################################</span><br><span class="line"></span><br><span class="line">[ v3_ca ]</span><br><span class="line">subjectKeyIdentifier	= hash</span><br><span class="line">basicConstraints	= critical,CA:true</span><br><span class="line">keyUsage = critical, cRLSign, keyCertSign</span><br><span class="line"></span><br><span class="line">[ v3_intermediate_ca ]</span><br><span class="line">subjectKeyIdentifier	= hash</span><br><span class="line">authorityKeyIdentifier	= keyid:always</span><br><span class="line">basicConstraints	= critical,CA:true</span><br><span class="line">keyUsage = critical, cRLSign, keyCertSign</span><br><span class="line">crlDistributionPoints	= @crl_info</span><br><span class="line"></span><br><span class="line">####################################################################</span><br><span class="line"></span><br><span class="line">[ crl_ext ]</span><br><span class="line">authorityKeyIdentifier = keyid:always</span><br><span class="line"></span><br><span class="line">[ crl_info ]</span><br><span class="line">URI.0 = $crl_url</span><br></pre></td></tr></table></figure>

<p>保存为 <code>conf/default.cnf</code> 。</p>
<p>接下来在生成请求时带上配置文件即可。</p>
<figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -x509 -key private/ca.key -out ca.crt -config conf/default.cnf</span><br></pre></td></tr></table></figure>

<p><em>注：此处如果不带 <code>-key private/ca.key</code> 参数，OpenSSL会在对应目录下创建一个新的private/ca.key文件。也就是说，你也可以选择跳过第一步直接使用配置文件的方式一条命令生成私钥及请求。</em></p>
<p>现在我们已经有了一个根证书ca.crt，从某种程度上，我们现在已经搭建出了一个根CA。</p>
<h2 id="搭建二级CA"><a href="#搭建二级CA" class="headerlink" title="搭建二级CA"></a>搭建二级CA</h2><p>通常情况下，一级CA（即根CA）不直接签发服务器证书，而是签发二级CA。由二级CA签发服务器证书。</p>
<h3 id="初始化-1"><a href="#初始化-1" class="headerlink" title="初始化"></a>初始化</h3><p>同搭建根CA：</p>
<figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"><span class="built_in">mkdir</span> secondCA</span><br><span class="line"><span class="built_in">cd</span> secondCA</span><br><span class="line"><span class="built_in">mkdir</span> newcerts private conf requests</span><br><span class="line">touch index.txt</span><br><span class="line"><span class="built_in">echo</span> unique_subject = yes &gt; index.txt.attr</span><br><span class="line"><span class="built_in">echo</span> <span class="number">01</span> &gt; serial</span><br></pre></td></tr></table></figure>

<h3 id="创建私钥-1"><a href="#创建私钥-1" class="headerlink" title="创建私钥"></a>创建私钥</h3><p>同搭建根CA：</p>
<figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa -out private/ca.key <span class="number">2048</span></span><br></pre></td></tr></table></figure>

<h3 id="创建证书请求"><a href="#创建证书请求" class="headerlink" title="创建证书请求"></a>创建证书请求</h3><p>除 <code>-x509</code> 被换成 <code>-new</code> 以外其他基本一致。<br>我们以方式二（使用配置文件）为例。<br>首先写一个配置文件。（和前一个类似，不再举例）<br>然后：</p>
<figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -new -key private/ca.key -out ../rootCA/requests/secondCA.csr -config conf/default.cnf</span><br></pre></td></tr></table></figure>

<h3 id="签发二级CA证书"><a href="#签发二级CA证书" class="headerlink" title="签发二级CA证书"></a>签发二级CA证书</h3><p>这一步我们需要使用根CA的身份，用根CA的私钥签发二级CA的证书</p>
<figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ../rootCA</span><br><span class="line">openssl ca -<span class="keyword">in</span> requests/secondCA.csr -out ../secondCA/ca.crt -config conf/default.cnf</span><br></pre></td></tr></table></figure>

<p>确认后，证书签发完成。</p>
<p>至此，二级CA搭建完成</p>
<h2 id="签发服务器证书"><a href="#签发服务器证书" class="headerlink" title="签发服务器证书"></a>签发服务器证书</h2><p>类似二级CA：</p>
<h3 id="初始化-2"><a href="#初始化-2" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"><span class="built_in">mkdir</span> serverCA</span><br><span class="line"><span class="built_in">cd</span> serverCA</span><br><span class="line"><span class="built_in">mkdir</span> newcerts private conf</span><br><span class="line">touch index.txt</span><br><span class="line"><span class="built_in">echo</span> unique_subject = yes &gt; index.txt.attr</span><br><span class="line"><span class="built_in">echo</span> <span class="number">01</span> &gt; serial</span><br></pre></td></tr></table></figure>

<h3 id="创建私钥-2"><a href="#创建私钥-2" class="headerlink" title="创建私钥"></a>创建私钥</h3><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa -out private/ca.key <span class="number">2048</span></span><br></pre></td></tr></table></figure>

<h3 id="创建证书请求-1"><a href="#创建证书请求-1" class="headerlink" title="创建证书请求"></a>创建证书请求</h3><p>写好配置文件后：</p>
<figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -new -key private/ca.key -out ../secondCA/requests/serverCA.csr -config conf/default.cnf</span><br></pre></td></tr></table></figure>

<p><em>注：之后ServerCA签发的客户端证书不具备CA权限，所以注意修改 <code>basicConstraints</code></em></p>
<h3 id="签发服务器证书-1"><a href="#签发服务器证书-1" class="headerlink" title="签发服务器证书"></a>签发服务器证书</h3><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ../secondCA</span><br><span class="line">openssl ca -<span class="keyword">in</span> requests/serverCA.csr -out ../serverCA/ca.crt -config conf/default.cnf</span><br></pre></td></tr></table></figure>

<h2 id="签发客户端证书"><a href="#签发客户端证书" class="headerlink" title="签发客户端证书"></a>签发客户端证书</h2><p>好吧都是一样的。。。</p>
<h3 id="初始化-3"><a href="#初始化-3" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ../serverCA</span><br><span class="line"><span class="built_in">mkdir</span> Client.<span class="variable">%x%</span></span><br></pre></td></tr></table></figure>

<h3 id="生成私钥"><a href="#生成私钥" class="headerlink" title="生成私钥"></a>生成私钥</h3><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa -out Client.<span class="variable">%x%</span>/client.key <span class="number">2048</span></span><br></pre></td></tr></table></figure>

<h3 id="生成请求"><a href="#生成请求" class="headerlink" title="生成请求"></a>生成请求</h3><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -new -key Client.<span class="variable">%x%</span>/client.key -out requests/client.<span class="variable">%x%</span>.csr -config conf/openssl.cnf</span><br></pre></td></tr></table></figure>

<h3 id="签发"><a href="#签发" class="headerlink" title="签发"></a>签发</h3><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl ca -<span class="keyword">in</span> requests/client.<span class="variable">%x%</span>.csr -out Client.<span class="variable">%x%</span>/client.crt -config conf/default.cnf</span><br></pre></td></tr></table></figure>

<h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><p>为了客户端方便导入，最后需要打包成p12文件</p>
<figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl pkcs12 -export -clcerts -<span class="keyword">in</span> Client.<span class="variable">%x%</span>/client.crt -inkey Client.<span class="variable">%x%</span>/client.key -out Client.<span class="variable">%x%</span>/client.p12</span><br></pre></td></tr></table></figure>

<h2 id="废话"><a href="#废话" class="headerlink" title="废话"></a>废话</h2><p>写的可能有点草率，很多东西没说清楚，之后有空再完善。</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 信息安全 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[公钥基础设施（三）：SSL协议]]></title>
      <url>https://HaleLu.github.io/2017/02/Public-Key-Infrastructure-3/</url>
      <content type="html"><![CDATA[<p>本篇主要讲SSL协议的通信过程。</p>
<a id="more"></a>

<h2 id="几个小问题"><a href="#几个小问题" class="headerlink" title="几个小问题"></a>几个小问题</h2><h3 id="SSL协议是干什么的？"><a href="#SSL协议是干什么的？" class="headerlink" title="SSL协议是干什么的？"></a>SSL协议是干什么的？</h3><p>首先，SSL是一种Web安全机制，他的作用是加密双方通信保证双方在不安全网络上的信息私密且不被篡改。</p>
<h3 id="SSL是怎么加密通信的？"><a href="#SSL是怎么加密通信的？" class="headerlink" title="SSL是怎么加密通信的？"></a>SSL是怎么加密通信的？</h3><p>简单来说，双方先使用公钥体制互相验证身份并协商一个密钥，然后双方使用这个密钥作为之后通信的对称密钥来加密会话。<br>由于协商密钥是使用公钥体制进行的，所以密钥本身是不会被其他人截获的，所以保证了之后的通信过程加密的可靠性。<br>而之后的会话使用对称密钥是因为每次都使用非对称密钥则开销过大，使用对称密钥可以大大节省开销。</p>
<h2 id="SSL协议详解"><a href="#SSL协议详解" class="headerlink" title="SSL协议详解"></a>SSL协议详解</h2><h3 id="体系结构"><a href="#体系结构" class="headerlink" title="体系结构"></a>体系结构</h3><p>有人说，SSL是在TCP和HTTP层之间的，也有人说，SSL层是和HTTP层并列在TCP层之上的。<br>我觉得应该是这样的：<br><img src="http://halelu.github.io/2017/02/Public-Key-Infrastructure-3/Pic-1.jpg" alt></p>
<h4 id="SSL记录协议"><a href="#SSL记录协议" class="headerlink" title="SSL记录协议"></a>SSL记录协议</h4><p>记录协议将要发送的数据分块、压缩（可选）、加上消息认证代码（MAC）、加密、再加上一个SSL头，将最终的到的数据放入一个TCP段。<br>一个SSL记录的格式如下图所示：<br><img src="http://halelu.github.io/2017/02/Public-Key-Infrastructure-3/Pic-2.jpg" alt></p>
<h4 id="SSL修改密码规范协议和警报协议"><a href="#SSL修改密码规范协议和警报协议" class="headerlink" title="SSL修改密码规范协议和警报协议"></a>SSL修改密码规范协议和警报协议</h4><p>这两个协议对我们开发来说关系不大。<br>修改密码规范协议仅一个字节，值为1，用于更新连接所使用的的密码套件。<br>警报协议两个字节，第一个字节表示等级，1表示警报（warning），2表示致命错误（error），第二个字节是警报信息的描述码，这里不详细列举。</p>
<h4 id="SSL握手协议"><a href="#SSL握手协议" class="headerlink" title="SSL握手协议"></a>SSL握手协议</h4><p>这是SSL协议的重点，SSL的复杂性和安全性基本依赖于握手协议。</p>
<p>握手协议一共分四个阶段：</p>
<h5 id="第一阶段：建立安全功能"><a href="#第一阶段：建立安全功能" class="headerlink" title="第一阶段：建立安全功能"></a>第一阶段：建立安全功能</h5><p>第一阶段的主要任务是协商SSL版本、加密算法、压缩算法等。具体流程如下：<br><img src="http://halelu.github.io/2017/02/Public-Key-Infrastructure-3/Pic-3.jpg" alt></p>
<p>客户端发出一个ClientHello，包括</p>
<ul>
<li>客户端可以支持的SSL最高版本号</li>
<li>客户端生成的一个随机数</li>
<li>会话ID</li>
<li>客户端可以支持的密码套件列表</li>
<li>客户端可以支持的压缩算法列表</li>
</ul>
<p>那么服务器返回一个ServerHello，包括</p>
<ul>
<li>确定使用的SSL版本号（取客户端和服务器支持的最高版本号的较小值）</li>
<li>服务端生成的一个随机数</li>
<li>会话ID</li>
<li>服务端确定使用的密码套件</li>
<li>服务端确定使用的压缩算法</li>
</ul>
<p>至此，客户端服务端已经协商确认了：</p>
<ul>
<li>SSL版本</li>
<li>密钥交换、信息验证和加密算法</li>
<li>压缩方法</li>
<li>有关密钥生成的两个随机数</li>
</ul>
<h5 id="第二阶段：服务器认证和密钥交换"><a href="#第二阶段：服务器认证和密钥交换" class="headerlink" title="第二阶段：服务器认证和密钥交换"></a>第二阶段：服务器认证和密钥交换</h5><p>第二阶段双方之间做的事主要就是，服务器向客户端发送相关信息。<br>一般先后发送四条消息：</p>
<ul>
<li>证书链</li>
<li>服务器密钥交换<ul>
<li>此阶段非必须，以下情况下不需要此消息<ul>
<li>服务器发送了带有固定Diffie-Hellman参数的证书</li>
<li>使用RSA密钥交换</li>
</ul>
</li>
<li>那么剩下的，以下情况需要此消息<ul>
<li>匿名Diffie-Hellman：消息内容包括两个全局Diffie-Hellman值和服务器Diffie-Hellman公钥</li>
<li>瞬时Diffie-Hellman：消息内容包括三个Diffie-Hellman参数，包括匿名Diffie-Hellman中的两个参数和它们的签名</li>
<li>RSA密钥交换，服务器在使用RSA时仅使用了RSA签名密钥：因此，客户端不能简单地通过服务器公钥加密其密钥后传送，而服务器必须创建一个临时RSA公钥/私钥对，并使用服务器密钥交换信息发送公钥。消息内容包括两个临时的RSA公钥参数和参数签名。</li>
<li>Fortezza</li>
</ul>
</li>
<li>注：此时的签名并不是直接将请求hash后用私钥加密。为了防止重放攻击，还会将上一阶段客户端和服务器生成的两个随机数带上一起hash。</li>
</ul>
</li>
<li>证书请求消息（服务器不使用匿名Diffie-Hellman）<ul>
<li>包含两个参数：证书类型和签证机构<ul>
<li>第一个参数证书类型表明了公钥算法和用途</li>
<li>第二个参数签证机构是一张可接受的签证机构表</li>
</ul>
</li>
</ul>
</li>
<li>服务器完成消息（没有其他内容，仅表示消息结束）</li>
</ul>
<h5 id="第三阶段：客户端认证和密钥交换"><a href="#第三阶段：客户端认证和密钥交换" class="headerlink" title="第三阶段：客户端认证和密钥交换"></a>第三阶段：客户端认证和密钥交换</h5><p>第三阶段是客户端向服务器发送信息的阶段。在此之前，客户端会先检验服务端证书的有效性、参数是否可接受。<br>一般先后有三条消息：</p>
<ul>
<li>证书链（可选，如果服务器请求了证书，那么需要发送证书消息，如果没有证书需要发送“无证书警报”）</li>
<li>客户端密钥交换消息<ul>
<li>消息的内容依赖密钥交换的类型：<ul>
<li><strong>RSA</strong>：客户端生成48字节的次密钥，并使用服务器证书中的公钥或服务器密钥交换消息中的临时RSA密钥加密。他被用于生成主密钥</li>
<li><strong>瞬时或匿名Diffie-Hellman</strong>：发送的客户端Diffie-Hellman公钥参数</li>
<li><strong>固定Diffie-Hellman</strong>：由于证书消息中包括Diffie-Hellman公钥参数，因此此消息内容为空</li>
<li><strong>Fortezza</strong>：发送客户端的Fortezza参数</li>
</ul>
</li>
</ul>
</li>
<li>证书验证消息<ul>
<li>固定Diffie-Hellman不发送这一消息</li>
<li>客户端用私钥签名主密钥和握手信息，以防客户证书被盗用</li>
</ul>
</li>
</ul>
<h5 id="第四阶段：完成"><a href="#第四阶段：完成" class="headerlink" title="第四阶段：完成"></a>第四阶段：完成</h5><p>此阶段完成安全连接的设置。<br>过程如下：</p>
<ul>
<li>客户端使用修改密码规范协议发送一个修改密码规范消息（切换为对称加密）</li>
<li>客户端使用新的加密算法和密钥发送一个完成消息，完成消息的内容是对握手消息的hash，确认密钥交换和认证过程的正确性</li>
<li>服务端回应一个修改密码规范消息</li>
<li>服务端使用新的加密算法和密钥发送一个完成消息</li>
</ul>
<p>至此，握手完成，客户端和服务器可以用对称加密交换信息了。<br>至于主密钥的计算由于和我们关系不大，我们只需要知道是用次密钥、服务器随机数、客户端随机数这三者生成的就可以了。有兴趣的小伙伴可以自行查阅相关书籍或资料。</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 信息安全 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[公钥基础设施（二）：数字证书]]></title>
      <url>https://HaleLu.github.io/2017/02/Public-Key-Infrastructure-2/</url>
      <content type="html"><![CDATA[<p>本篇主要讲数字证书的相关概念和作用。</p>
<a id="more"></a>

<h2 id="认识数字证书"><a href="#认识数字证书" class="headerlink" title="认识数字证书"></a>认识数字证书</h2><h3 id="直观认识"><a href="#直观认识" class="headerlink" title="直观认识"></a>直观认识</h3><p>我们先选择任意一个HTTPS的网站（例如<a href="https://www.baidu.com/" target="_blank" rel="noopener">https://www.baidu.com/</a>），在Chrome浏览器中用F12调出开发者工具，选择Security标签页。<br><img src="http://halelu.github.io/2017/02/Public-Key-Infrastructure-2/pic-1.jpg" alt><br>点击View certificate，可以看到一张证书。<br><img src="http://halelu.github.io/2017/02/Public-Key-Infrastructure-2/pic-2.jpg" alt><br>这张证书是一张服务器证书，在详细信息中我们可以看到这张证书的基本信息。<br><img src="http://halelu.github.io/2017/02/Public-Key-Infrastructure-2/pic-3.jpg" alt>  </p>
<p>所谓HTTPS，其实就是HTTP + SSL。<br>SSL的详细协议在下一篇讲，目前只需知道SSL所使用的数字证书就是这里的证书。而HTTPS就是用对方的公钥加密自己的通话，与对方协商出一个安全的对称密钥和加密方式，然后将双方通话过程全部用对称密钥加密（使用对称密钥是为了节省开销，每次都非对称加密会极大加重系统负担），由于协商过程是使用了公钥机制加密的，所以对称密钥也是安全的。</p>
<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>数字证书就是互联网通讯中标识通讯各方身份信息的一系列数据，提供了一种在Internet上验证身份的方式，其作用类似于驾驶执照或身份证。<br>数字证书通常由数字证书授权中心（Certificate Authority — CA）签发，带有CA的数字签名。其中包含公开密钥拥有者信息以及公开密钥的文件。<br>最简单的证书包含一个公开密钥、名称以及证书授权中心的数字签名。</p>
<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>其实说完最简单的证书，我们就可以知道数字证书最基本的功能是什么了。</p>
<ul>
<li>一个带有CA签名的证书，可以证明证书的主体是经过签发者认证的，安全的、可信任的（例如我们一开始看到的那张证书就是baidu.com经过了权威可信任的机构认证的凭证）</li>
<li>由于公钥也被签在了证书内，所以只有掌握对应私钥的主体（也就是证书主体本人）才能解密你用公钥加密过的数据<ul>
<li>即使其他任何人伪造了假的主体（例如修改DNS将<a href="http://www.baidu.com指向自己的服务器），但无法伪造带有CA签名的证书。换句话说，他可以伪造**http**://www.baidu.com，但无法伪造**https**://www.baidu.com" target="_blank" rel="noopener">www.baidu.com指向自己的服务器），但无法伪造带有CA签名的证书。换句话说，他可以伪造**http**://www.baidu.com，但无法伪造**https**://www.baidu.com</a></li>
<li>即使伪装者强行将合法的证书（例如baidu.com的证书）拿来作为自己的证书搭出了HTTPS服务，那么当客户端用证书中的公钥加密自己的信息时，伪装者由于没有对应的私钥，他将无法解密信息</li>
</ul>
</li>
</ul>
<h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><p>目前的证书通常遵循 ITUT X.509国际标准，证书主要包括以下信息：</p>
<ul>
<li>版本号：用来区分X.509的不同版本</li>
<li>序列号：每一个证书都有惟一的数字型编号</li>
<li>认证机构标识：颁发该证书的机构惟一的X.500名字</li>
<li>主体标识：证书持有者的名称</li>
<li>主体公钥信息：和该主体私钥相对应的公钥</li>
<li>证书有效期：证书开始有效期和证书失效期</li>
<li>密钥/证书用法：描述该主体的公/私密钥对的合法用途</li>
<li>扩展：说明该证书的附加信息</li>
<li>认证机构签名：用认证机构的私钥生成的数字签名</li>
</ul>
<p><img src="http://halelu.github.io/2017/02/Public-Key-Infrastructure-2/pic-4.jpg" alt><br>认证机构签名是将主体部分hash后用认证机构私钥加密，如果能够被认证机构公钥解密就说明了证书内容没有被篡改。<br>验证方式如下图：<br><img src="http://halelu.github.io/2017/02/Public-Key-Infrastructure-2/pic-5.jpg" alt></p>
<h2 id="数字证书的使用"><a href="#数字证书的使用" class="headerlink" title="数字证书的使用"></a>数字证书的使用</h2><h3 id="PKI的基本组件"><a href="#PKI的基本组件" class="headerlink" title="PKI的基本组件"></a>PKI的基本组件</h3><ul>
<li>证书授权中心CA<ul>
<li>证书签发机构，是PKI的核心，使PKI 应用中权威的、可信任的、公正的第三方机构。主要负责产生、分配并管理所有参与网上交易的实体所需的身份认证数字证书。</li>
</ul>
</li>
<li>证书库<ul>
<li>证书的集中存放地，提供公众查询。</li>
</ul>
</li>
<li>密钥备份及恢复系统（optional）<ul>
<li>对用户的解密密钥进行备份，当丢失时进行恢复，而签名密钥不用备份和恢复。</li>
</ul>
</li>
<li>证书撤销处理系统<ul>
<li>证书由于某种原因需要作废，终止使用，将通过证书撤销列表(CRL)来实现。</li>
</ul>
</li>
<li>PKI应用接口系统<ul>
<li>为各种各样的应用提供安全、一致、可信任的方式与PKI交互，确保所建立起来的网络环境安全可靠，并降低管理成本。</li>
</ul>
</li>
</ul>
<h3 id="PKI的基本原理"><a href="#PKI的基本原理" class="headerlink" title="PKI的基本原理"></a>PKI的基本原理</h3><p>首先，PKI有两条基本原则：</p>
<ul>
<li>有些安全性非常高、信誉非常好的CA是所有人都可以信任的，他们拥有签发下级CA的权利。他们的证书通常被内置在操作系统的可信任列表里。</li>
<li>如果一个CA是可信任的且CA拥有签发下级证书的权利，那么他签发的证书也是可信任的。</li>
</ul>
<p>所以，通常我们看到的证书都是一条证书链。通常 <strong>根CA</strong> 不签发末端的客户证书，只负责签发 <strong>CA</strong> 证书，而 <strong>CA</strong> 根据他们证书中被授予的权限，有些可以签发下级CA有些只可以签发客户证书。<br>每张证书都会有过期时间和一个证书撤销列表（CRL）的URL。如果一张证书过期或被写进了CRL，那么证书就会作废（这往往是由私钥泄露导致的）。</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 信息安全 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[公钥基础设施（一）：公钥机制]]></title>
      <url>https://HaleLu.github.io/2017/02/Public-Key-Infrastructure-1/</url>
      <content type="html"><![CDATA[<p>好久没有更文了。<br>最近有个项目，想用证书的方式来验证设备身份，所以仔细研究了一下PKI。<br>其实信安课上有讲，可是当时一知半解，现在刚好整理复习一下。</p>
<a id="more"></a>

<h2 id="PKI概述"><a href="#PKI概述" class="headerlink" title="PKI概述"></a>PKI概述</h2><p>PKI（Public Key Infrastructure）全称是公钥基础设施，主要提供公钥加密和数字签名服务。PKI技术以公钥技术为基础，以数字证书为媒介，结合对称加密和非对称加密技术，将个人、组织、设备的标识信息与各自的公钥捆绑在一起。其主要目的是通过自动管理密钥和证书，为用户建立起一个安全、可信的网络运行环境，使用户可以在多种应用环境下方便地使用加密和数字签名技术，在互联网上验证用户的身份，从而保证了互联网上所传输信息的真实性、完整性、机密性和不可否认性。</p>
<h2 id="加密方式"><a href="#加密方式" class="headerlink" title="加密方式"></a>加密方式</h2><p>目前常规的加密方式通常只有两种：对称和非对称加密。</p>
<h3 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h3><p>所谓对称加密，就是指加密和解密使用的密钥是相同的，加密和解密的过程对称，所以被称为对称加密。<br>例如异或加密就是一种很简单的对称加密算法。（即明文用密钥加密一次成为密文，密文用同一密钥解密一次成为明文）</p>
<p>在对称加密算法中常用的算法有：DES、3DES、TDEA、Blowfish、RC2、RC4、RC5、IDEA、SKIPJACK、AES等。</p>
<h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul>
<li>算法公开，安全性由密钥本身保证</li>
<li>计算量小、运算效率高，适合加密大量数据</li>
<li>密文长度和明文相等，不会增加负担<ul>
<li><em>这个优点是我在信息安全的PPT上看到的，但是学长认为这并不一定。例如如果将BASE64的编码表看作是密钥的话，BASE64是一种对称加密，但是加密后密码变长了。我站学长，不过我觉得讲义上这么说大概指的是成熟的对称加密算法考虑到加解密效率一般都会尽可能保证密文长度不增加？</em></li>
</ul>
</li>
</ul>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul>
<li>双方在约定密钥时需要以安全方式进行</li>
<li>一旦一方密钥泄露，则会话完全暴露</li>
<li>易被破解（也许不一定，但一般不如非对称加密）</li>
<li>由于密钥是基于会话的，密钥数量平方级增长，难以管理</li>
</ul>
<h3 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h3><p>相对的，非对称加密指加密和解密所需的密钥并不相同，用 <strong>加密密钥</strong> 加密的密文是无法再次用 <strong>加密密钥</strong> 解出明文的，只能用与加密密钥对应的 <strong>解密密钥</strong> 来得到明文。<br>当然，<strong>加密密钥</strong> 和 <strong>解密密钥</strong> 是相对的，他们可以互相加解密。<br>也就是说，在非对称加密中，有一个密钥对，其中一个用来加密的时候，还要得到另一个才能解密。</p>
<p>所以，在非对称加密中有两个密钥，只要自己保密两个中的一个，那么就能保证通话的安全。也就是说其中一个即使泄露也不会影响安全性，是可公开的。<br>于是这种体制又被称为 <strong>公钥机制</strong> 。</p>
<h2 id="公钥机制"><a href="#公钥机制" class="headerlink" title="公钥机制"></a>公钥机制</h2><p>每个人都有两把密钥，其中一把密钥由自己保密，称为 <strong>私钥</strong> ，另一把任何人都可以拥有，向所有人公开，称为 <strong>公钥</strong> 。<br>公钥体制主要能做的两件事就是加密和验证。</p>
<p>加密是保证对方发送给自己的数据不会被他人破解。<br>验证是保证自己发送给对方的数据无法被他人篡改，且自己也不可否认。</p>
<h3 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h3><p>加密的实现方式是，对方用公钥加密信息并发送给自己。解密密文的私钥只有自己有，所以保证了密文的机密性。</p>
<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>验证的实现方式是，将自己要发送的信息用自己的私钥加密。由于自己的公钥是公开的，所以密文本身没有机密性，可被任何人解密，但是对方能否用公钥解密这一点就保证了文本的完整性和不可否认。<br>其他人如果想修改原文，那么修改后是无法再次用私钥进行加密的，也就无法让密文可以被公钥解密。<br>事实上，由于正文过长，我们往往会将信息hash后再用私钥加密，附在正文后用以验证。</p>
<h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><ul>
<li>双方信息可以以安全方式传输</li>
<li>大大减少密钥持有量，每人仅需一把仅自己持有的私钥和一把可公开的公钥，常数级</li>
</ul>
<h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><ul>
<li>计算复杂、耗用资源大</li>
<li>密文长度大于明文，传输负担增大</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 信息安全 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[NOIp 2016 提高组题解]]></title>
      <url>https://HaleLu.github.io/2016/12/NOIP-2016/</url>
      <content type="html"><![CDATA[<h2 id="照例"><a href="#照例" class="headerlink" title="照例"></a>照例</h2><p>好久不刷题不写题解了。想想自己也大三了。看到子楚兄说自己退役的一瞬间，突然发现自己的时间其实也只剩下一年不到了。<br>到现在ACM连个铜都没拿过，CCPC也是打铁。再不好好刷题再也没时间了。<br>跟队友开玩笑说明年要拿金。但我真的希望不是玩笑。</p>
<p>刷题，我生命中最美的两个字！</p>
<a id="more"></a>

<h2 id="Day-1"><a href="#Day-1" class="headerlink" title="Day 1"></a>Day 1</h2><h3 id="T1-toy-玩具谜题"><a href="#T1-toy-玩具谜题" class="headerlink" title="T1 toy 玩具谜题"></a>T1 toy 玩具谜题</h3><p><a href="https://www.luogu.org/problem/show?pid=1563" target="_blank" rel="noopener">原题链接</a></p>
<h4 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h4><p>水题，模拟就行。<br>我取了个巧，把0换成-1，然后乘就可以。</p>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n, m, d[<span class="number">100010</span>];</span><br><span class="line">	<span class="keyword">char</span> name[<span class="number">100010</span>][<span class="number">15</span>];</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %s"</span>, &amp;d[i], name[i]); getchar();</span><br><span class="line">		<span class="keyword">if</span> (!d[i]) d[i] = <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> a, s;</span><br><span class="line">	<span class="keyword">int</span> pos = <span class="number">1</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;s);</span><br><span class="line">		<span class="keyword">if</span> (!a) a = <span class="number">-1</span>;</span><br><span class="line">		pos -= a * d[pos] * s;</span><br><span class="line">		<span class="keyword">if</span> (pos &lt;= <span class="number">0</span>) pos += n;</span><br><span class="line">		<span class="keyword">if</span> (pos &gt; n) pos -= n;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%s\n"</span>, name[pos]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="T2-running-天天爱跑步"><a href="#T2-running-天天爱跑步" class="headerlink" title="T2 running 天天爱跑步"></a>T2 running 天天爱跑步</h3><p><a href="https://www.luogu.org/problem/show?pid=1600" target="_blank" rel="noopener">原题链接</a></p>
<h4 id="解释-1"><a href="#解释-1" class="headerlink" title="解释"></a>解释</h4><p>两天最难的题了吧。一开始想的是骗分。思路是网上看来的。<br>首先所有的路径一定是从起点经过LCA（最小公共祖先）到达终点，先上后下（也有可能只上或只下）。<br>于是我们把s到t的路径拆分成s到top（向上）再由top到t（向下）。<br>如果把节点v深度记为d[v]的话，那么在向上的过程中 时间+深度 是定值d[s]。<br>同样，向下过程中 深度-时间 是定值d[t]-len（len = d[s]+d[t]-2*d[top]，是路径总长度，也是总时间）。<br>换句话说，对于从s到top这条路径上所有的点v，如果它的观察时间w[v]满足w[v]+d[v] == d[s]；同理，向下满足d[v]-w[v] == d[t]-len，那么它的答案数就要+1。  </p>
<p>有几个点吧，第一个是LCA，第二个是树的前缀和。<br>LCA有人说用Tarjan，我比较菜，不会。我能接受的一种O(nlogn)的方法就是开一个f[0..N][0..logN]的数组，f[i][j]表示结点i的第2^j级父节点。这样找LCA的时候就是O(logn)级别的了。<br>然后说到，在给s到top或者top到t做标记的时候我们是不能遍历一个个做标记的，所以我们先O(1)的做标记。<br>比如s到top时，我们在s处做+1标记，在top处做-1标记，之后在求结果的时候深搜求子树和。<br>用两个数组（桶）up[i]、down[i]记录当前搜索路径下定值为i的路径数（为了避免负数，down数组下标需要加上一个MAXN）<br>然后就没有了。</p>
<h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 300007 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> first[MAXN*<span class="number">20</span>], last[MAXN*<span class="number">2</span>], next[MAXN*<span class="number">2</span>], num;</span><br><span class="line"><span class="keyword">int</span> first1[MAXN*<span class="number">20</span>], last1[MAXN*<span class="number">2</span>], next1[MAXN*<span class="number">2</span>], num1;</span><br><span class="line"><span class="keyword">int</span> first2[MAXN*<span class="number">20</span>], last2[MAXN*<span class="number">2</span>], next2[MAXN*<span class="number">2</span>], num2;</span><br><span class="line"><span class="keyword">int</span> first3[MAXN*<span class="number">20</span>], last3[MAXN*<span class="number">2</span>], next3[MAXN*<span class="number">2</span>], num3;</span><br><span class="line"><span class="keyword">int</span> first4[MAXN*<span class="number">20</span>], last4[MAXN*<span class="number">2</span>], next4[MAXN*<span class="number">2</span>], num4;</span><br><span class="line"><span class="keyword">int</span> d[MAXN];</span><br><span class="line"><span class="keyword">int</span> w[MAXN];</span><br><span class="line"><span class="keyword">int</span> ans[MAXN];</span><br><span class="line"><span class="keyword">int</span> up[MAXN*<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> down[MAXN*<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> f[MAXN][<span class="number">25</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (d[x] &lt; d[y])</span><br><span class="line">	&#123;</span><br><span class="line">		swap(x, y);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">20</span>; i&gt;=<span class="number">0</span>; i--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (d[f[x][i]] &gt;= d[y])</span><br><span class="line">		&#123;</span><br><span class="line">			x = f[x][i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (d[x] != d[y])</span><br><span class="line">		x = f[x][<span class="number">0</span>];</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">20</span>; i&gt;=<span class="number">0</span>; i--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (f[x][i] != f[y][i])</span><br><span class="line">		&#123;</span><br><span class="line">			x = f[x][i];</span><br><span class="line">			y = f[y][i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> (x != y) ? f[x][<span class="number">0</span>] : x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> x = up[d[v]+w[v]];</span><br><span class="line">	<span class="keyword">int</span> y = down[d[v]-w[v]+MAXN];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=first1[v]; i; i=next1[i])</span><br><span class="line">	&#123;</span><br><span class="line">		up[last1[i]]++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=first2[v]; i; i=next2[i])</span><br><span class="line">	&#123;</span><br><span class="line">		down[last2[i]+MAXN]++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=first[v]; i; i=next[i])</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (last[i] != f[v][<span class="number">0</span>])</span><br><span class="line">		&#123;</span><br><span class="line">			dfs(last[i]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	ans[v] = up[d[v]+w[v]] + down[d[v]-w[v]+MAXN]-x-y;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=first3[v]; i; i=next3[i])</span><br><span class="line">	&#123;</span><br><span class="line">		up[last3[i]]--;</span><br><span class="line">		<span class="keyword">if</span> (last3[i] == d[v]+w[v])</span><br><span class="line">			ans[v]--;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=first4[v]; i; i=next4[i])</span><br><span class="line">	&#123;</span><br><span class="line">		down[last4[i]+MAXN]--;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calc_deep</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	d[v] = d[fa]+<span class="number">1</span>;</span><br><span class="line">	f[v][<span class="number">0</span>] = fa;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = first[v]; i; i=next[i])</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (last[i] != fa)</span><br><span class="line">		&#123;</span><br><span class="line">			calc_deep(last[i], v);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	last[++num] = v;</span><br><span class="line">	next[num] = first[u];</span><br><span class="line">	first[u] = num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_up</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	last1[++num1] = v;</span><br><span class="line">	next1[num1] = first1[u];</span><br><span class="line">	first1[u] = num1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_down</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	last2[++num2] = v;</span><br><span class="line">	next2[num2] = first2[u];</span><br><span class="line">	first2[u] = num2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_top_up</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	last3[++num3] = v;</span><br><span class="line">	next3[num3] = first3[u];</span><br><span class="line">	first3[u] = num3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_top_down</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	last4[++num4] = v;</span><br><span class="line">	next4[num4] = first4[u];</span><br><span class="line">	first4[u] = num4;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n, m;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n<span class="number">-1</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> u, v;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">		add(u, v);</span><br><span class="line">		add(v, u);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	calc_deep(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=<span class="number">20</span>; j++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n ;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			f[i][j] = f[f[i][j<span class="number">-1</span>]][j<span class="number">-1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;w[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> s, t;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;s, &amp;t);</span><br><span class="line">		<span class="keyword">int</span> top = lca(s, t);</span><br><span class="line">		<span class="keyword">int</span> len = d[s]+d[t]-d[top]-d[top];</span><br><span class="line">		<span class="keyword">int</span> diff = d[t] - len;</span><br><span class="line">		add_up(s, d[s]);</span><br><span class="line">		add_down(t, diff);</span><br><span class="line">		add_top_up(top, d[s]);</span><br><span class="line">		add_top_down(top, diff);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	dfs(<span class="number">1</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">    	<span class="built_in">printf</span>(<span class="string">"%d "</span>,ans[i]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="T3-classroom-换教室"><a href="#T3-classroom-换教室" class="headerlink" title="T3 classroom 换教室"></a>T3 classroom 换教室</h3><p><a href="https://www.luogu.org/problem/show?pid=1850" target="_blank" rel="noopener">原题链接</a></p>
<h4 id="解释-2"><a href="#解释-2" class="headerlink" title="解释"></a>解释</h4><p>dp，几乎算是模板题。<br>递推式自己看代码吧。</p>
<h4 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 2010 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXL 10000000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> c[MAXN];</span><br><span class="line"><span class="keyword">int</span> d[MAXN];</span><br><span class="line"><span class="keyword">double</span> k[MAXN];</span><br><span class="line"><span class="keyword">int</span> w[MAXN][MAXN];</span><br><span class="line"><span class="keyword">double</span> f[MAXN][MAXN][<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">min</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a &lt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n, m, v ,e;</span><br><span class="line">	<span class="keyword">int</span> i, j, mid;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;n, &amp;m, &amp;v, &amp;e);</span><br><span class="line">	<span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;c[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;d[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%lf"</span>, &amp;k[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;=v; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=v; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			w[i][j] = MAXL;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;=v; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		w[i][i] = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;e; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> u, v;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;w[u][v]);</span><br><span class="line">		<span class="keyword">if</span> (w[v][u] &gt; w[u][v])</span><br><span class="line">			w[v][u] = w[u][v];</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			w[u][v] = u == v ? <span class="number">0</span> : w[v][u];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (mid=<span class="number">1</span>; mid&lt;=v; mid++)</span><br><span class="line">		<span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;=v; i++)</span><br><span class="line">			<span class="keyword">for</span> (j=<span class="number">1</span>; j&lt;=v; j++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (w[i][j] &gt; w[i][mid] + w[mid][j])</span><br><span class="line">				&#123;</span><br><span class="line">					w[i][j] = w[i][mid] + w[mid][j];</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">	</span><br><span class="line">	f[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;=n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (j=<span class="number">0</span>; j&lt;=m; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (i&lt;j) </span><br><span class="line">			&#123;</span><br><span class="line">				f[i][j][<span class="number">0</span>] = f[i][j][<span class="number">1</span>] = MAXL;</span><br><span class="line">			&#125; </span><br><span class="line">			<span class="keyword">else</span> </span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (i == <span class="number">0</span> &amp;&amp; j == <span class="number">0</span>) </span><br><span class="line">					f[i][j][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">					f[i][j][<span class="number">0</span>] = min(f[i<span class="number">-1</span>][j][<span class="number">0</span>] + w[c[i<span class="number">-1</span>]][c[i]], </span><br><span class="line">							 f[i<span class="number">-1</span>][j][<span class="number">1</span>] + k[i<span class="number">-1</span>] * w[d[i<span class="number">-1</span>]][c[i]] + (<span class="number">1</span>-k[i<span class="number">-1</span>]) * w[c[i<span class="number">-1</span>]][c[i]]);</span><br><span class="line">				<span class="keyword">if</span> (j==<span class="number">0</span>)</span><br><span class="line">					f[i][j][<span class="number">1</span>] = MAXL;</span><br><span class="line">				<span class="keyword">else</span>			 </span><br><span class="line">					f[i][j][<span class="number">1</span>] = min(f[i<span class="number">-1</span>][j<span class="number">-1</span>][<span class="number">0</span>] + (<span class="number">1</span>-k[i]) * w[c[i<span class="number">-1</span>]][c[i]] + k[i] * w[c[i<span class="number">-1</span>]][d[i]],</span><br><span class="line">							 f[i<span class="number">-1</span>][j<span class="number">-1</span>][<span class="number">1</span>] + k[i] * k[i<span class="number">-1</span>] * w[d[i<span class="number">-1</span>]][d[i]] + k[i] * (<span class="number">1</span>-k[i<span class="number">-1</span>]) * w[c[i<span class="number">-1</span>]][d[i]] + (<span class="number">1</span>-k[i]) * k[i<span class="number">-1</span>] * w[d[i<span class="number">-1</span>]][c[i]] + (<span class="number">1</span>-k[i<span class="number">-1</span>]) * (<span class="number">1</span>-k[i]) * w[c[i<span class="number">-1</span>]][c[i]]);</span><br><span class="line">			</span><br><span class="line">				</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">double</span> ans = f[n][<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=m &amp;&amp; j&lt;=n; j++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (f[n][j][<span class="number">0</span>] &lt; ans) ans = f[n][j][<span class="number">0</span>];</span><br><span class="line">		<span class="keyword">if</span> (f[n][j][<span class="number">1</span>] &lt; ans) ans = f[n][j][<span class="number">1</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%.2lf"</span>, ans);</span><br><span class="line">	 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Day-2"><a href="#Day-2" class="headerlink" title="Day 2"></a>Day 2</h2><h3 id="T1-problem-组合数问题"><a href="#T1-problem-组合数问题" class="headerlink" title="T1 problem 组合数问题"></a>T1 problem 组合数问题</h3><p><a href="https://www.luogu.org/problem/show?pid=2822" target="_blank" rel="noopener">原题链接</a></p>
<h4 id="解释-3"><a href="#解释-3" class="headerlink" title="解释"></a>解释</h4><p>杨辉三角性质+二维前缀和。</p>
<h4 id="Code-3"><a href="#Code-3" class="headerlink" title="Code"></a>Code</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 2016</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line">LL C[MAXN][MAXN];</span><br><span class="line">LL ans[MAXN][MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> t, k;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;t, &amp;k);</span><br><span class="line">	</span><br><span class="line">	C[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt; <span class="number">2010</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		C[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">		ans[i][<span class="number">0</span>] = <span class="number">0</span>; </span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;i; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			C[i][j] = (C[i<span class="number">-1</span>][j<span class="number">-1</span>] + C[i<span class="number">-1</span>][j]) % k;</span><br><span class="line">			ans[i][j] = ans[i<span class="number">-1</span>][j] + ans[i][j<span class="number">-1</span>] - ans[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">			<span class="keyword">if</span> (C[i][j] == <span class="number">0</span>) ans[i][j]++;</span><br><span class="line">		&#125;</span><br><span class="line">		C[i][i] = <span class="number">1</span>;</span><br><span class="line">		ans[i][i] = ans[i][i<span class="number">-1</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span> (t--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> n, m;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">		<span class="keyword">if</span> (m &gt; n) m = n;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans[n][m]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="T2-earthworm-蚯蚓"><a href="#T2-earthworm-蚯蚓" class="headerlink" title="T2 earthworm 蚯蚓"></a>T2 earthworm 蚯蚓</h3><p><a href="https://www.luogu.org/problem/show?pid=2827" target="_blank" rel="noopener">原题链接</a></p>
<h4 id="解释-4"><a href="#解释-4" class="headerlink" title="解释"></a>解释</h4><p>一开始用的queue，结果爆常数了。一怒之下开个10^6的数组好了。<br>由于切的比例p是定值，所以先被切的一定比后被切的长，所以直接把原长排序、再把切下来的两端分别放进两个队列，每次取队首的比，最长的拿来切。<br>每回合所有的增长转化为被切的两个缩短。需要注意的是切之前要算一下原长再切。</p>
<h4 id="Code-4"><a href="#Code-4" class="headerlink" title="Code"></a>Code</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 2140000000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXM 7200100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> q1[MAXM], q2[MAXM], q3[MAXM];</span><br><span class="line"><span class="keyword">int</span> head1=<span class="number">0</span>, head2=<span class="number">0</span>, head3=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> tail1=<span class="number">-1</span>, tail2=<span class="number">-1</span>, tail3=<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Trunc</span><span class="params">(<span class="keyword">double</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (<span class="keyword">long</span> <span class="keyword">long</span>)(x + N) - N;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a&gt;b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n, m, q, u, v, t;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d%d%d"</span>, &amp;n, &amp;m, &amp;q, &amp;u, &amp;v, &amp;t);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n+m+<span class="number">1</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		q1[i] = q2[i] = q3[i] = -N;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> tmp;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q1[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	sort(q1, q1+n, cmp);</span><br><span class="line">	tail1 = n<span class="number">-1</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">double</span> p = (<span class="keyword">double</span>)u/v;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> *t1, *t2, *t3;</span><br><span class="line">	t1 = q1+head1;</span><br><span class="line">	t2 = q2+head2;</span><br><span class="line">	t3 = q3+head3;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (*t1 &gt;= *t2)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (*t1 &gt;= *t3)</span><br><span class="line">			&#123;</span><br><span class="line">				tmp = *t1;</span><br><span class="line">				head1++;</span><br><span class="line">				t1++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				tmp = *t3;</span><br><span class="line">				head3++;</span><br><span class="line">				t3++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (*t2 &gt;= *t3)</span><br><span class="line">			&#123;</span><br><span class="line">				tmp = *t2;</span><br><span class="line">				head2++;</span><br><span class="line">				t2++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				tmp = *t3;</span><br><span class="line">				head3++;</span><br><span class="line">				t3++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		tmp += q * i;</span><br><span class="line">		q2[++tail2] = Trunc(tmp * p - (i+<span class="number">1</span>) * q);</span><br><span class="line">		q3[++tail3] = tmp - (<span class="keyword">int</span>)(tmp * p) - (i+<span class="number">1</span>) * q;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span> ((i+<span class="number">1</span>) == t) <span class="built_in">printf</span>(<span class="string">"%d"</span>, tmp);	</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> ((i+<span class="number">1</span>) % t == <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">" %d"</span>, tmp);	</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> tt = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (*t1 != -N || *t2 != -N || *t3 != -N)</span><br><span class="line">	&#123;</span><br><span class="line">		tt++;</span><br><span class="line">		<span class="keyword">if</span> (*t1 &gt;= *t2)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (*t1 &gt;= *t3)</span><br><span class="line">			&#123;</span><br><span class="line">				tmp = *t1;</span><br><span class="line">				head1++;</span><br><span class="line">				t1++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				tmp = *t3;</span><br><span class="line">				head3++;</span><br><span class="line">				t3++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (*t2 &gt;= *t3)</span><br><span class="line">			&#123;</span><br><span class="line">				tmp = *t2;</span><br><span class="line">				head2++;</span><br><span class="line">				t2++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				tmp = *t3;</span><br><span class="line">				head3++;</span><br><span class="line">				t3++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span> (tt == t) <span class="built_in">printf</span>(<span class="string">"%d"</span>, tmp + m*q);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (tt % t == <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">" %d"</span>, tmp + m*q);</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="T3-angrybirds-愤怒的小鸟"><a href="#T3-angrybirds-愤怒的小鸟" class="headerlink" title="T3 angrybirds 愤怒的小鸟"></a>T3 angrybirds 愤怒的小鸟</h3><p><a href="https://www.luogu.org/problem/show?pid=2831" target="_blank" rel="noopener">原题链接</a></p>
<h4 id="解释-5"><a href="#解释-5" class="headerlink" title="解释"></a>解释</h4><p>状压dp。<br>i看成二进制，由低到高第x位表示第x只猪。0为未击中，1为击中。<br>先两两初始化出由这两个点确定的抛物线可以击中的所有的猪（击中就或上这一位），然后O(2^n)的dp就可以了。<br>有几个坑，一个是a有可能大于等于0，另一个是double由于精度的问题等于要用abs(a-b)&lt;EXP的方式判断。</p>
<h4 id="Code-5"><a href="#Code-5" class="headerlink" title="Code"></a>Code</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 265000</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EXP 1e-6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> x[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">double</span> y[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> f[MAXN];</span><br><span class="line"></span><br><span class="line">LL pow2[<span class="number">20</span>];</span><br><span class="line">LL route[<span class="number">20</span>][<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">abs</span><span class="params">(<span class="keyword">double</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x&gt;=<span class="number">0</span> ? x : -x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">log2</span><span class="params">(LL x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">switch</span> (x)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">			<span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">			<span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">16</span>:</span><br><span class="line">			<span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">32</span>:</span><br><span class="line">			<span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">64</span>:</span><br><span class="line">			<span class="keyword">return</span> <span class="number">6</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">128</span>:</span><br><span class="line">			<span class="keyword">return</span> <span class="number">7</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">256</span>:</span><br><span class="line">			<span class="keyword">return</span> <span class="number">8</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">512</span>:</span><br><span class="line">			<span class="keyword">return</span> <span class="number">9</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">1024</span>:</span><br><span class="line">			<span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">2048</span>:</span><br><span class="line">			<span class="keyword">return</span> <span class="number">11</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">4096</span>:</span><br><span class="line">			<span class="keyword">return</span> <span class="number">12</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">8192</span>:</span><br><span class="line">			<span class="keyword">return</span> <span class="number">13</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">16384</span>:</span><br><span class="line">			<span class="keyword">return</span> <span class="number">14</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">32768</span>:</span><br><span class="line">			<span class="keyword">return</span> <span class="number">15</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">65536</span>:</span><br><span class="line">			<span class="keyword">return</span> <span class="number">16</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">131072</span>:</span><br><span class="line">			<span class="keyword">return</span> <span class="number">17</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">262144</span>:</span><br><span class="line">			<span class="keyword">return</span> <span class="number">18</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">524288</span>:</span><br><span class="line">			<span class="keyword">return</span> <span class="number">19</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	pow2[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;<span class="number">19</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		pow2[i] = pow2[i<span class="number">-1</span>] * <span class="number">2</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">	<span class="keyword">while</span> (T--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> n, m;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>, &amp;x[i], &amp;y[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n<span class="number">-1</span>; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;n; j++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">double</span> a = (x[i]*y[j]-x[j]*y[i])/(x[i]*x[j]*(x[j]-x[i]));</span><br><span class="line">				<span class="keyword">double</span> b = (x[j]*x[j]*y[i]-x[i]*x[i]*y[j])/(x[i]*x[j]*(x[j]-x[i]));</span><br><span class="line">				<span class="keyword">if</span> (a &gt;= <span class="number">0</span> || <span class="built_in">abs</span>(x[j]-x[i]) &lt; EXP) &#123;</span><br><span class="line">					route[i][j] = pow2[i];</span><br><span class="line">					<span class="keyword">continue</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				route[i][j] = pow2[i] | pow2[j];</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;n; k++)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span> (<span class="built_in">abs</span>(a*x[k]*x[k]+b*x[k]-y[k]) &lt; EXP) </span><br><span class="line">					&#123;</span><br><span class="line">						route[i][j] |= pow2[k];</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				route[j][i] = route[i][j];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span> (LL s=<span class="number">1</span>; s&lt;pow2[n]; s++)</span><br><span class="line">		&#123;</span><br><span class="line">			f[s] = <span class="number">100</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		f[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (LL s=<span class="number">0</span>; s&lt;pow2[n]<span class="number">-1</span>; s++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> i = log2(((s ^ (s+<span class="number">1</span>)) + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">			LL tmp = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;n; j++)</span><br><span class="line">			&#123;</span><br><span class="line">				tmp =  s | route[i][j];</span><br><span class="line">				<span class="keyword">if</span> (f[tmp] &gt; f[s] + <span class="number">1</span>)</span><br><span class="line">					f[tmp] = f[s] + <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (tmp == <span class="number">0</span>) &#123;</span><br><span class="line">				tmp = pow2[n]<span class="number">-1</span>;</span><br><span class="line">				<span class="keyword">if</span> (f[tmp] &gt; f[s] + <span class="number">1</span>)</span><br><span class="line">					f[tmp] = f[s] + <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, f[pow2[n]<span class="number">-1</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      
        <categories>
            
            <category> 算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> ACM </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[The 2016 ACM-ICPC Asia Beijing Regional Contest]]></title>
      <url>https://HaleLu.github.io/2016/09/The-2016-ACM-ICPC-Asia-Beijing-Regional-Contest/</url>
      <content type="html"><![CDATA[<p>补题解。<br>好久不写了，但是再不好好写大三就废了。<br>不废话了。</p>
<a id="more"></a>

<h2 id="A"><a href="#A" class="headerlink" title="A"></a>A</h2><p><a href="https://hihocoder.com/problemset/problem/1383" target="_blank" rel="noopener">原题戳这里</a></p>
<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>有 n 本书, 每本书的格式为<code>CATEGORY 1/CATEGORY 2/..../CATEGORY n/BOOKNAME</code>, 现在要重新格式化这些书的格式. 第 n 个 category 前面需要有 4(n-1) 个空格, 如果这本书在第 n 个 category 上, 那么它前面要有 4n 个空格. 同一 category 里面,  category 和书名都按照字典序排序, 但是 category 要排在书前面. 第一个 category 需要按照字典序排列。</p>
<h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">B/A</span><br><span class="line">B/A</span><br><span class="line">B/B</span><br><span class="line">0</span><br><span class="line">A1/B1/B32/B7</span><br><span class="line">A1/B/B2/B4/C5</span><br><span class="line">A1/B1/B2/B6/C5</span><br><span class="line">A1/B1/B2/B5</span><br><span class="line">A1/B1/B2/B1</span><br><span class="line">A1/B3/B2</span><br><span class="line">A3/B1</span><br><span class="line">A0/A1</span><br><span class="line">0</span><br></pre></td></tr></table></figure>

<h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Case 1:</span><br><span class="line">B</span><br><span class="line">    A</span><br><span class="line">    B</span><br><span class="line">Case 2:</span><br><span class="line">A0</span><br><span class="line">    A1</span><br><span class="line">A1</span><br><span class="line">    B</span><br><span class="line">        B2</span><br><span class="line">            B4</span><br><span class="line">                C5</span><br><span class="line">    B1</span><br><span class="line">        B2</span><br><span class="line">            B6</span><br><span class="line">                C5</span><br><span class="line">            B1</span><br><span class="line">            B5</span><br><span class="line">        B32</span><br><span class="line">            B7</span><br><span class="line">    B3</span><br><span class="line">        B2</span><br><span class="line">A3</span><br><span class="line">    B1</span><br></pre></td></tr></table></figure>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>hzy解了这题。建树并排序就可以了。</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100005</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">book</span>&#123;</span></span><br><span class="line">	<span class="keyword">char</span> nm[<span class="number">105</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tree</span>&#123;</span></span><br><span class="line">	book bk;</span><br><span class="line">	<span class="keyword">int</span> sons,son[<span class="number">100</span>];</span><br><span class="line">	<span class="keyword">bool</span> shu;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">tree a[maxn];</span><br><span class="line">book b[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> tot,now;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">vali</span><span class="params">(<span class="keyword">char</span> x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&gt;=<span class="string">'A'</span>&amp;&amp;x&lt;=<span class="string">'Z'</span>)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">if</span>(x&gt;=<span class="string">'0'</span>&amp;&amp;x&lt;=<span class="string">'9'</span>)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">return</span> (x==<span class="string">' '</span>||x==<span class="string">'/'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getstr</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">	c=getchar(); </span><br><span class="line">	<span class="keyword">if</span>(c==EOF)<span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">while</span>(!vali(c))&#123;</span><br><span class="line">		c=getchar();</span><br><span class="line">		<span class="keyword">if</span>(c==EOF)<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(vali(c))&#123;</span><br><span class="line">		b[x].nm[len++]=c;</span><br><span class="line">		c=getchar();</span><br><span class="line">		<span class="keyword">if</span>(c==EOF)<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	b[x].nm[len]=<span class="string">'\0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">big</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(b[x].nm)&amp;&amp;i&lt;<span class="built_in">strlen</span>(b[y].nm);i++)&#123;</span><br><span class="line">    	<span class="keyword">if</span>(b[x].nm[i]&gt;b[y].nm[i])<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    	<span class="keyword">if</span>(b[x].nm[i]&lt;b[y].nm[i])<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">strlen</span>(b[x].nm)&gt;<span class="built_in">strlen</span>(b[y].nm);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">yes</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">unsigned</span> <span class="keyword">int</span> z)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;z&lt;<span class="built_in">strlen</span>(b[y].nm) &amp;&amp; b[y].nm[z]!=<span class="string">'/'</span>;z++,i++)</span><br><span class="line">		<span class="keyword">if</span>(a[x].bk.nm[i]!=b[y].nm[z])<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(a[x].bk.nm[i]!=<span class="string">'\0'</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(z&gt;=<span class="built_in">strlen</span>(b[y].nm)&amp;&amp;a[x].shu==<span class="literal">false</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(z&lt;<span class="built_in">strlen</span>(b[y].nm)&amp;&amp;b[y].nm[z]==<span class="string">'/'</span>&amp;&amp;a[x].shu)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> x,<span class="keyword">unsigned</span> <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=a[s].sons;i++)</span><br><span class="line">		<span class="keyword">if</span>(yes(a[s].son[i],x,y))&#123;</span><br><span class="line">			<span class="keyword">while</span>(y&lt;<span class="built_in">strlen</span>(b[x].nm)&amp;&amp;b[x].nm[y]!=<span class="string">'/'</span>)y++;</span><br><span class="line">			<span class="keyword">if</span>(y&gt;=<span class="built_in">strlen</span>(b[x].nm))<span class="keyword">return</span>;</span><br><span class="line">			ins(a[s].son[i],x,y+<span class="number">1</span>);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	++tot;</span><br><span class="line">	a[s].sons++;</span><br><span class="line">	a[s].son[a[s].sons]=tot;</span><br><span class="line">	<span class="keyword">int</span> j;</span><br><span class="line">	<span class="keyword">for</span>(j=<span class="number">0</span>;y&lt;<span class="built_in">strlen</span>(b[x].nm)&amp;&amp;b[x].nm[y]!=<span class="string">'/'</span>;y++,j++)</span><br><span class="line">		a[tot].bk.nm[j]=b[x].nm[y];</span><br><span class="line">	a[tot].bk.nm[j]=<span class="string">'\0'</span>;</span><br><span class="line">	<span class="keyword">if</span>(y&gt;=<span class="built_in">strlen</span>(b[x].nm))&#123;</span><br><span class="line">		a[tot].shu=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span></span><br><span class="line">		a[tot].shu=<span class="number">0</span>;</span><br><span class="line">	ins(tot,x,y+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">biger</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(a[x].bk.nm)&amp;&amp;i&lt;<span class="built_in">strlen</span>(a[y].bk.nm);i++)&#123;</span><br><span class="line">    	<span class="keyword">if</span>(a[x].bk.nm[i]&gt;a[y].bk.nm[i])<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    	<span class="keyword">if</span>(a[x].bk.nm[i]&lt;a[y].bk.nm[i])<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">strlen</span>(a[x].bk.nm)&gt;<span class="built_in">strlen</span>(a[y].bk.nm);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> &amp;y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> t=x; x=y; y=t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">s_sort</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;a[x].sons;i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=a[x].sons;j++)</span><br><span class="line">			<span class="keyword">if</span>(biger(a[x].son[i],a[x].son[j]))&#123;</span><br><span class="line">				swap(a[x].son[i],a[x].son[j]);</span><br><span class="line">			&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deal</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&gt;<span class="number">0</span>)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=y;i++)<span class="built_in">putchar</span>(<span class="string">' '</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%s\n"</span>,a[x].bk.nm);</span><br><span class="line">	&#125;</span><br><span class="line">	s_sort(x);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=a[x].sons;i++)</span><br><span class="line">		<span class="keyword">if</span>(a[a[x].son[i]].shu==<span class="literal">false</span>)</span><br><span class="line">			deal(a[x].son[i],y+<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=a[x].sons;i++)</span><br><span class="line">		<span class="keyword">if</span>(a[a[x].son[i]].shu)</span><br><span class="line">			deal(a[x].son[i],y+<span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//freopen("d:/shit.txt","r",stdin);</span></span><br><span class="line">	<span class="keyword">int</span> id=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">		tot=<span class="number">0</span>; now=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">		<span class="built_in">memset</span>(b,<span class="number">0</span>,<span class="keyword">sizeof</span>(b));</span><br><span class="line">		<span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">			++now; </span><br><span class="line">			getstr(now);</span><br><span class="line">			<span class="keyword">if</span>(c==EOF)&#123;</span><br><span class="line">				--now;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">strlen</span>(b[now].nm)&lt;=<span class="number">2</span>&amp;&amp;b[now].nm[<span class="number">0</span>]==<span class="string">'0'</span>)&#123;</span><br><span class="line">				--now;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=now;i++)&#123;</span><br><span class="line">			ins(<span class="number">0</span>,i,<span class="number">0</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		id++;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"Case %d:\n"</span>,id);</span><br><span class="line">		deal(<span class="number">0</span>,<span class="number">-4</span>);</span><br><span class="line">		<span class="keyword">if</span>(c!=<span class="string">'\n'</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="B"><a href="#B" class="headerlink" title="B"></a>B</h2><p><a href="https://hihocoder.com/problemset/problem/1384" target="_blank" rel="noopener">原题戳这里</a></p>
<h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><p>给出n个数p1,p2,…,pn, 你要把把这nn个数划分成若干段(每段都是连续的), 每段的代价这么计算:<br>从每段中选出m(不够m对的话, 选出最多的对数)对，计算每对数之间的差值，然后求平方和，代价是所有选法的平方和的最大值，记为SPD。<br>你要划分成最少的段，使得每段的SPD都不大于k。</p>
<h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">B/A</span><br><span class="line">B/A</span><br><span class="line">B/B</span><br><span class="line">0</span><br><span class="line">A1/B1/B32/B7</span><br><span class="line">A1/B/B2/B4/C5</span><br><span class="line">A1/B1/B2/B6/C5</span><br><span class="line">A1/B1/B2/B5</span><br><span class="line">A1/B1/B2/B1</span><br><span class="line">A1/B3/B2</span><br><span class="line">A3/B1</span><br><span class="line">A0/A1</span><br><span class="line">0</span><br></pre></td></tr></table></figure>

<h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Case 1:</span><br><span class="line">B</span><br><span class="line">    A</span><br><span class="line">    B</span><br><span class="line">Case 2:</span><br><span class="line">A0</span><br><span class="line">    A1</span><br><span class="line">A1</span><br><span class="line">    B</span><br><span class="line">        B2</span><br><span class="line">            B4</span><br><span class="line">                C5</span><br><span class="line">    B1</span><br><span class="line">        B2</span><br><span class="line">            B6</span><br><span class="line">                C5</span><br><span class="line">            B1</span><br><span class="line">            B5</span><br><span class="line">        B32</span><br><span class="line">            B7</span><br><span class="line">    B3</span><br><span class="line">        B2</span><br><span class="line">A3</span><br><span class="line">    B1</span><br></pre></td></tr></table></figure>

<h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><p>hzy解了这题。建树并排序就可以了。</p>
<h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100005</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">book</span>&#123;</span></span><br><span class="line">	<span class="keyword">char</span> nm[<span class="number">105</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tree</span>&#123;</span></span><br><span class="line">	book bk;</span><br><span class="line">	<span class="keyword">int</span> sons,son[<span class="number">100</span>];</span><br><span class="line">	<span class="keyword">bool</span> shu;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">tree a[maxn];</span><br><span class="line">book b[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> tot,now;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">vali</span><span class="params">(<span class="keyword">char</span> x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&gt;=<span class="string">'A'</span>&amp;&amp;x&lt;=<span class="string">'Z'</span>)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">if</span>(x&gt;=<span class="string">'0'</span>&amp;&amp;x&lt;=<span class="string">'9'</span>)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">return</span> (x==<span class="string">' '</span>||x==<span class="string">'/'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getstr</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">	c=getchar(); </span><br><span class="line">	<span class="keyword">if</span>(c==EOF)<span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">while</span>(!vali(c))&#123;</span><br><span class="line">		c=getchar();</span><br><span class="line">		<span class="keyword">if</span>(c==EOF)<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(vali(c))&#123;</span><br><span class="line">		b[x].nm[len++]=c;</span><br><span class="line">		c=getchar();</span><br><span class="line">		<span class="keyword">if</span>(c==EOF)<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	b[x].nm[len]=<span class="string">'\0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">big</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(b[x].nm)&amp;&amp;i&lt;<span class="built_in">strlen</span>(b[y].nm);i++)&#123;</span><br><span class="line">    	<span class="keyword">if</span>(b[x].nm[i]&gt;b[y].nm[i])<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    	<span class="keyword">if</span>(b[x].nm[i]&lt;b[y].nm[i])<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">strlen</span>(b[x].nm)&gt;<span class="built_in">strlen</span>(b[y].nm);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">yes</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">unsigned</span> <span class="keyword">int</span> z)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;z&lt;<span class="built_in">strlen</span>(b[y].nm) &amp;&amp; b[y].nm[z]!=<span class="string">'/'</span>;z++,i++)</span><br><span class="line">		<span class="keyword">if</span>(a[x].bk.nm[i]!=b[y].nm[z])<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(a[x].bk.nm[i]!=<span class="string">'\0'</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(z&gt;=<span class="built_in">strlen</span>(b[y].nm)&amp;&amp;a[x].shu==<span class="literal">false</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(z&lt;<span class="built_in">strlen</span>(b[y].nm)&amp;&amp;b[y].nm[z]==<span class="string">'/'</span>&amp;&amp;a[x].shu)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> x,<span class="keyword">unsigned</span> <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=a[s].sons;i++)</span><br><span class="line">		<span class="keyword">if</span>(yes(a[s].son[i],x,y))&#123;</span><br><span class="line">			<span class="keyword">while</span>(y&lt;<span class="built_in">strlen</span>(b[x].nm)&amp;&amp;b[x].nm[y]!=<span class="string">'/'</span>)y++;</span><br><span class="line">			<span class="keyword">if</span>(y&gt;=<span class="built_in">strlen</span>(b[x].nm))<span class="keyword">return</span>;</span><br><span class="line">			ins(a[s].son[i],x,y+<span class="number">1</span>);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	++tot;</span><br><span class="line">	a[s].sons++;</span><br><span class="line">	a[s].son[a[s].sons]=tot;</span><br><span class="line">	<span class="keyword">int</span> j;</span><br><span class="line">	<span class="keyword">for</span>(j=<span class="number">0</span>;y&lt;<span class="built_in">strlen</span>(b[x].nm)&amp;&amp;b[x].nm[y]!=<span class="string">'/'</span>;y++,j++)</span><br><span class="line">		a[tot].bk.nm[j]=b[x].nm[y];</span><br><span class="line">	a[tot].bk.nm[j]=<span class="string">'\0'</span>;</span><br><span class="line">	<span class="keyword">if</span>(y&gt;=<span class="built_in">strlen</span>(b[x].nm))&#123;</span><br><span class="line">		a[tot].shu=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span></span><br><span class="line">		a[tot].shu=<span class="number">0</span>;</span><br><span class="line">	ins(tot,x,y+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">biger</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(a[x].bk.nm)&amp;&amp;i&lt;<span class="built_in">strlen</span>(a[y].bk.nm);i++)&#123;</span><br><span class="line">    	<span class="keyword">if</span>(a[x].bk.nm[i]&gt;a[y].bk.nm[i])<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    	<span class="keyword">if</span>(a[x].bk.nm[i]&lt;a[y].bk.nm[i])<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">strlen</span>(a[x].bk.nm)&gt;<span class="built_in">strlen</span>(a[y].bk.nm);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> &amp;y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> t=x; x=y; y=t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">s_sort</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;a[x].sons;i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=a[x].sons;j++)</span><br><span class="line">			<span class="keyword">if</span>(biger(a[x].son[i],a[x].son[j]))&#123;</span><br><span class="line">				swap(a[x].son[i],a[x].son[j]);</span><br><span class="line">			&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deal</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&gt;<span class="number">0</span>)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=y;i++)<span class="built_in">putchar</span>(<span class="string">' '</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%s\n"</span>,a[x].bk.nm);</span><br><span class="line">	&#125;</span><br><span class="line">	s_sort(x);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=a[x].sons;i++)</span><br><span class="line">		<span class="keyword">if</span>(a[a[x].son[i]].shu==<span class="literal">false</span>)</span><br><span class="line">			deal(a[x].son[i],y+<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=a[x].sons;i++)</span><br><span class="line">		<span class="keyword">if</span>(a[a[x].son[i]].shu)</span><br><span class="line">			deal(a[x].son[i],y+<span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//freopen("d:/shit.txt","r",stdin);</span></span><br><span class="line">	<span class="keyword">int</span> id=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">		tot=<span class="number">0</span>; now=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">		<span class="built_in">memset</span>(b,<span class="number">0</span>,<span class="keyword">sizeof</span>(b));</span><br><span class="line">		<span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">			++now; </span><br><span class="line">			getstr(now);</span><br><span class="line">			<span class="keyword">if</span>(c==EOF)&#123;</span><br><span class="line">				--now;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">strlen</span>(b[now].nm)&lt;=<span class="number">2</span>&amp;&amp;b[now].nm[<span class="number">0</span>]==<span class="string">'0'</span>)&#123;</span><br><span class="line">				--now;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=now;i++)&#123;</span><br><span class="line">			ins(<span class="number">0</span>,i,<span class="number">0</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		id++;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"Case %d:\n"</span>,id);</span><br><span class="line">		deal(<span class="number">0</span>,<span class="number">-4</span>);</span><br><span class="line">		<span class="keyword">if</span>(c!=<span class="string">'\n'</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>#</p>
]]></content>
      
        <categories>
            
            <category> 算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> ACM </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在 .NET Core 项目中添加 WCF Service]]></title>
      <url>https://HaleLu.github.io/2016/07/How-to-Add-Net-Service-in-NET-Core/</url>
      <content type="html"><![CDATA[<h2 id="What-is-Web-Service"><a href="#What-is-Web-Service" class="headerlink" title="What is Web Service?"></a>What is Web Service?</h2><p>微软的 ASP.NET Web Service 是一套基于XML扩展标记语言，使用Soap简单对象访问协议实现的网络数据交互服务。它使用 WSDL 来描述服务相关的接口。<br>ASP.NET Web Service 必须依赖于 IIS，是一种无状态的通讯协议。</p>
<a id="more"></a>

<h2 id="Why-WCF"><a href="#Why-WCF" class="headerlink" title="Why WCF?"></a>Why WCF?</h2><p>从某种程度上来说，Web Service 是 WCF（Windows Communication Foundation）的子集，它支持 Web Service 的所有标准。当然它不仅仅支持 Web Service，它是微软为整合.NET平台下所有的和分布式系统有关的技术而创建的统一框架。<br>WCF 相对 Web Service 的优势很多，不在此一一举例。<br>在 .NET Core 的正式版中，大概是由于跨平台的需要，微软抛弃了 Web Service，所以我们只能用 WCF 来添加网络服务。</p>
<h2 id="How-to"><a href="#How-to" class="headerlink" title="How to?"></a>How to?</h2><p>首先可以在<a href="https://visualstudiogallery.msdn.microsoft.com/c3b3666e-a928-4136-9346-22e30c949c08" target="_blank" rel="noopener">这里</a>下载安装 Visual Studio WCF Connected Service 的扩展。<br>其次，创建一个 .NET Core 项目（以类库项目为例）。<br><img src="http://halelu.github.io/2016/07/How-to-Add-Net-Service-in-NET-Core/Picture-1.png" alt><br>在项目中添加 WCF 服务：<br><img src="http://halelu.github.io/2016/07/How-to-Add-Net-Service-in-NET-Core/Picture-2.png" alt><br><img src="http://halelu.github.io/2016/07/How-to-Add-Net-Service-in-NET-Core/Picture-3.png" alt><br>添加对应的 Webservice.asmx，修改相关参数（其实只要改名字就好），一路 next 然后 Finish：<br><img src="http://halelu.github.io/2016/07/How-to-Add-Net-Service-in-NET-Core/Picture-4.png" alt><br>对应的 Web Service 就添加成功了~</p>
<h2 id="参考来自"><a href="#参考来自" class="headerlink" title="参考来自"></a>参考来自</h2><p><a href="https://blogs.msdn.microsoft.com/webdev/2016/05/25/announcing-wcf-connected-service-for-net-core-rc2-and-asp-net-core-rc2/" target="_blank" rel="noopener">https://blogs.msdn.microsoft.com/webdev/2016/05/25/announcing-wcf-connected-service-for-net-core-rc2-and-asp-net-core-rc2/</a></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> .NET </tag>
            
            <tag> 技术 </tag>
            
            <tag> WCF </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[聊聊 .NET Core]]></title>
      <url>https://HaleLu.github.io/2016/07/Intro-to-Dotnet-Core/</url>
      <content type="html"><![CDATA[<h2 id="关于-NET-Core"><a href="#关于-NET-Core" class="headerlink" title="关于 .NET Core"></a>关于 .NET Core</h2><p>.NET Core 的正式版终于发布了。.NET Core 是一个<a href="https://github.com/dotnet" target="_blank" rel="noopener">开源项目</a>。根据官方的说法，.NET Core 是跨平台的（当然它的确是跨平台的）。<br>我们常说的 .NET 通常指的是.NET Framework，通常只运行于 Windows。两者的关系用官方的图来表示就是这样：<br><img src="http://halelu.github.io/2016/07/Intro-to-Dotnet-Core/Picture-1.png" alt><br>他们有一个共同的子集。</p>
<p>恩，据说这玩意以后还要收费？不知道是不是我理解错了。要是我理解错了求英语好的来给我解释一下。原文如下：</p>
<blockquote>
<p>Finally, .NET Core will be “pay-for-play” and performant. One goal of the .NET Core effort is to make the cost of abstraction clear to developers, by implementing a pay-for-play model that makes obvious the costs that come from employing a higher-level abstraction to solve a problem. Abstractions don’t come for free, and that truth should never be hidden from developers. Additionally, .NET Core will favor performance with a standard library that minimizes allocations and the overall memory footprint of your system.</p>
</blockquote>
<a id="more"></a>

<h2 id="NET-CLI"><a href="#NET-CLI" class="headerlink" title=".NET CLI"></a>.NET CLI</h2><p>.NET Core 提供了 .NET CLI（Command Line Interface），可以通过命令行来完成程序的编译，相关命令如下：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>dotnet new</td>
<td>使用 C# 语言初始化用于类库或控制台应用程序的有效项目。</td>
</tr>
<tr>
<td>dotnet restore</td>
<td>还原在指定项目的 project.json 文件中定义的依赖项。依赖项通常是您在应用程序中使用的 NuGet 包。</td>
</tr>
<tr>
<td>dotnet build</td>
<td>生成您的代码！ 此命令将生成适用于您的项目的中间语言 (IL) 二进制。如果项目是控制台应用程序，则产生的输出是可执行的，您可以立即运行。默认情况下，生成命令会将生成的程序集和可执行文件（如果适用）输出到调用位置目录的 bin 目录中。</td>
</tr>
<tr>
<td>dotnet test</td>
<td>如果不支持运行测试，则不会出现适合的工具。此命令让您可以使用在 project.json 文件中指定的运行程序运行一组测试。目前支持 xUnit 和 NUnit 测试运行程序。</td>
</tr>
<tr>
<td>dotnet publish</td>
<td>发布在目标计算机上运行的应用程序。</td>
</tr>
<tr>
<td>dotnet pack</td>
<td>pack 命令会把您的项目打包成 NuGet 包。输出一组 nupkg 文件后，您可以将其上载至您的源，或使用本地文件夹替代将其用于还原操作。</td>
</tr>
<tr>
<td>dotnet run</td>
<td>运行命令将编译并运行您的应用程序。您可以将其看作没有 Visual Studio 的 Ctrl+F5 模拟。</td>
</tr>
</tbody></table>
<p>.NET Core 依赖 NuGet 提供的各种包。开发者也可以把自己的类库打包成 NuGet 包共享到 <a href="https://www.nuget.org/" target="_blank" rel="noopener">NuGet</a>。</p>
<h2 id="参考来自"><a href="#参考来自" class="headerlink" title="参考来自"></a>参考来自</h2><p><a href="https://msdn.microsoft.com/en-us/magazine/mt694084.aspx" target="_blank" rel="noopener">https://msdn.microsoft.com/en-us/magazine/mt694084.aspx</a></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> .NET </tag>
            
            <tag> 技术 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[生活笔记（2016-07-18）]]></title>
      <url>https://HaleLu.github.io/2016/07/Note-4/</url>
      <content type="html"><![CDATA[<p>好久没有更新了，再不写点什么就真的要忘了这块地方。</p>
<a id="more"></a>
<h2 id="照例的絮絮叨叨"><a href="#照例的絮絮叨叨" class="headerlink" title="照例的絮絮叨叨"></a>照例的絮絮叨叨</h2><p>一不小心，竟然都大三了，这些天看着新生群里陆续加进来的心生们，想到自己已经大三了，不禁有点恍惚。又想起那句，去年我大一，明年我就大四了，一阵心慌。<br>感觉自己还很弱，感觉自己还有很多想做，感觉自己还有好多好多想要在进入社会之前完成的事情都还没用做。  </p>
<p>真的好心慌。</p>
<p>时间根本不够用啊摔！</p>
<h2 id="算是这段时间的-summary-吧"><a href="#算是这段时间的-summary-吧" class="headerlink" title="算是这段时间的 summary 吧"></a>算是这段时间的 summary 吧</h2><p>上次比完蓝桥杯是想写一份题解来着，然而奈何下笔什么都不会。好像从那之后就再也没有更新了。</p>
<p>期末倒是挺忙，各种整理、复习、预习，偶尔还穿插一点比赛什么的。<br>一不小心错过了暑期国际课程的选课。</p>
<p>假期来了<a href="http://www.carvedge.com/" target="_blank" rel="noopener">开悦科技</a>这边实习，写写东西，学习学习。主要是做做 .NET，挣点学费。<br>这些天学到的东西尽量整理出来。</p>
<p>7月9-10日参加了一个全国大学生信息安全的 CTF 比赛，抱着队友的大腿进了决赛。只是很水的帮队友做了一道签到题，还有做了一半的破译，最后队友全转大写过掉了，也算是2333。<br>其他的都是胡乱折腾了好久，其实也没有帮到太大忙。（<a href="http://halelu.github.io/2016/07/Note-4/writeup.docx">这里有本队 WriteUp</a>，<a href="http://mp.weixin.qq.com/s?__biz=MzI0NjQxODg0Ng==&mid=2247484044&idx=1&sn=96cfca9bb1ec03572c990ac3d913c59e&scene=23&srcid=0711ufe4EQMnjSTzL2jQWCOK#rd" target="_blank" rel="noopener">这是官方题解</a>）  
最后还能混个 i 春秋的 VIP，其实这波也不亏。</p>
<p>7月16-17日去打了一场中国高校计算机大赛-团体程序设计天梯赛，然叔看的起，放在了一队。然而成绩不忍直视。说真我都不好意思提。</p>
<h2 id="一点小插曲"><a href="#一点小插曲" class="headerlink" title="一点小插曲"></a>一点小插曲</h2><p>想了想还是不想写了，过去的事情就让它过去吧。彼此不再提。</p>
<p>恩，挺好。</p>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Something About TSP (1)]]></title>
      <url>https://HaleLu.github.io/2016/05/Something-About-TSP-1/</url>
      <content type="html"><![CDATA[<h2 id="旅行商问题（traveling-salesman-problem）"><a href="#旅行商问题（traveling-salesman-problem）" class="headerlink" title="旅行商问题（traveling-salesman problem）"></a>旅行商问题（traveling-salesman problem）</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>通常我们讨论的都是对称旅行商问题（SYMMETRIC traveling-salesman problem），即距离矩阵保持对称（A 到 B 与 B 到 A 距离相等）。<br>严格意义上的旅行商问题的要求是：遍历所有点，保证每个点刚好访问一次，求最短的遍历路径。</p>
<a id="more"></a>

<h3 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h3><p>解决这种问题的算法分为两种：精确算法（Exact algorithms）和启发式方法（heuristic methods）。<br>精确算法的复杂度过高（n的指数级），短时间可解决的问题约在60个点（1971）。<br>一般采用启发式方法去解决能得到一个相对满意的结果。</p>
<p>解决这个问题的灵感来自于另一个问题：图分割问题。<br>问题描述很简单：将图分为两个点的个数相同的部分，并满足两个部分间的距离最短。</p>
<p>我们可以将这两个问题抽象成同一种问题：<br>从集合 S 中寻找满足限制条件 C 并能使目标函数 f 最小化的子集 T 。</p>
<p>接下来，我们就可以将启发式算法的思路总结出来：</p>
<ul>
<li>找到一个可行解，即一个满足条件 C 的子集 T</li>
<li>尝试在 T 上做一些改变，寻找比 T 更优（能使得 f 更小）的子集 T’</li>
<li>如果找到子集 T’ 更优（使得 f(T’) &lt; f(T) ），用 T’ 替换 T 并重复上一</li>
<li>如果找不到，T 就是局部最优解。再次重复第一步直到时间到某一上限或答案已经足够满意。</li>
</ul>
<p>在 TSP 问题中，这个问题的具体化就是：</p>
<ul>
<li>从所有边构成的集合 S 中找出一个可行回路 T</li>
<li>每次从 T 中找出 k 条边，从 S-T 中找出另外的 k 条边，保证这 k 条边交换后能形成回路且费用更小</li>
<li>如果找到则进行交换</li>
<li>如果找不到，则 T 就是局部最优解。再次重复直到时间到达某一上限或答案足够满意</li>
</ul>
<h3 id="启发式算法的核心"><a href="#启发式算法的核心" class="headerlink" title="启发式算法的核心"></a>启发式算法的核心</h3><p>这种算法好坏主要看两点：</p>
<ul>
<li>第一步中找到的初始解的好坏</li>
<li>第二步中的替换算法的好坏</li>
</ul>
<p>KL算法重点关注第二个点。  </p>
<p>第二步中有一个难题，是 k 的值具体应该取多少？  </p>
<p>如果遍历 k 那无疑是一件很恐怖的事，所以我们尝试用一些方法：</p>
<ul>
<li>生成随机初始解 T<ul>
<li>令 i = 1</li>
<li>选择第 i 步的“最不合适”对：xi 和 yi，使得 {x1, x2, …… , xi} 和 {y1, y2, …… , yi} 交换后缩短的距离值最大<em>（具体原则在下面给出）</em></li>
<li>如果找不到不合适对，则进入下一步，否则重复本步骤</li>
</ul>
</li>
<li>如果一个更优解已经找到，则将 x 和 y 两个集合交换，得到新的 T，重复上一步骤；若找不到更优解，则进入下一步</li>
<li>如果需要的话重复第一步</li>
</ul>
<p>那我们采用怎样的方法去找“最不合适”对呢？<br>首先，我们要保证每次交换后都能得到一个可行的交换，所以我们保证 x1、y1、x2、y2 …… 依次首尾相连（且 yn 最后一个节点为 x1 的第一个节点），如下图所示：<br><img src="http://halelu.github.io/2016/05/Something-About-TSP-1/Figure-1.png" alt></p>
<p>其次，假设 gi 表示 xi 与 yi 交换后减少的代价，那么我们不必在某一个 gi 为负数时立刻停止，我们只在 g1+g2+……+gi ≤ 0 时认为找不到“不合适”对。</p>
<p>当然，我们要保证不重新选取被去掉的边。</p>
<h2 id="Kernighan-Lin-算法"><a href="#Kernighan-Lin-算法" class="headerlink" title="Kernighan-Lin 算法"></a>Kernighan-Lin 算法</h2><h3 id="具体描述"><a href="#具体描述" class="headerlink" title="具体描述"></a>具体描述</h3><ul>
<li>Step 1: 生成随机回路 T</li>
<li>Step 2: 令 G* = 0，任选一个点 t1 作为起始点，从 t1 出发选取回路 T 中的一条边 x1 ，假设另一端为 t2，令 i = 1 </li>
<li>Step 3: 从 t2 出发，选取任一不在 T 中的边 y1，假设另一端为 t3，满足 g1 &gt; 0 。若不存在这样的 y1，则跳至 Step 6 (d)</li>
<li>Step 4: 令 i = i + 1，选择 xi （T 中以 t(2i-1) 为出发点的路径）和 yi，具体说明如下：<ul>
<li>(a) 若 xi 连接的是 t(2i) 和 t1 ，则完成一次查找</li>
<li>(b) yi 应当从 t(2i) 出发；若没有可行边，则跳转至 Step 5（显然，我们优先考虑最近的点）</li>
<li>(c) x 和 y 不能有交集</li>
<li>(d) G &gt; 0</li>
<li>(e) yi 的选择应保证 t(2i+1) 在 T 中有其他邻接点</li>
<li>(f) 在选定 yi 前，我们观察是否连接 t(2i) 和 t1 比选择的 yi 是更好的选择（费用减少更多）。令 yi* 表示边 ( t(2i), t1 )，gi* = |xi| - |yi*| 。若 G(i-1) + gi* &gt; G* 则更新 G* 的值为 G(i-1) + gi* 并记 i 为 k。</li>
</ul>
</li>
<li>Step 5: 当找不到 xi 和 yi 满足 4(c)-(e) 或 Gi ≤ G* 时，结束上一循环。若 G* &gt; 0，更新 T’ ，且 f(T’) = f(T) - G*。以 T’ 为初始回路重复从 Step 2 开始的这一过程。 </li>
<li>Step 6: 如果 G* = 0，按下列方式处理：<ul>
<li>(a) 重复 Step 4 和 5，按升序选择满足 g1 + g2 &gt; 0 的 y2 ，跳回 Step 2 </li>
<li>(b) 如果 Step 4 (b) 中所有 y2 的选项都使得 G 为负，则返回 Step 4 (a) 尝试选择另一个 x2</li>
<li>(c) 如果仍然无法得到解，跳至 Step 3，按升序找新的 y1</li>
<li>(d) 如果找不到合适的 y1，跳至 Step 2，尝试另一条 x1</li>
<li>(e) 如果仍然失败，跳回 Step 2，重新选择 t1</li>
</ul>
</li>
</ul>
<p>生成的最终路径：<br><img src="http://halelu.github.io/2016/05/Something-About-TSP-1/Figure-3.png" alt></p>
<h3 id="一些优化"><a href="#一些优化" class="headerlink" title="一些优化"></a>一些优化</h3><h4 id="避免校验时间（Avoiding-Checkout-Time）"><a href="#避免校验时间（Avoiding-Checkout-Time）" class="headerlink" title="避免校验时间（Avoiding Checkout Time）"></a>避免校验时间（Avoiding Checkout Time）</h4><p>如果回路 T 无法再次被改进，则 T 是一个局部最优解。当下次再次得到回路 T 时，避免再次检验。<br>可节约 30-50% 的运行时间。</p>
<h4 id="预测（Lookahead）"><a href="#预测（Lookahead）" class="headerlink" title="预测（Lookahead）"></a>预测（Lookahead）</h4><p>为避免出现选择的 yi 使得 x(i+1) 太小最终导致无用的搜索，在选择 yi 时选择使得 |x(i+1)|-|yi| 最大的 yi。</p>
<h4 id="减少重复搜索（Reduction）"><a href="#减少重复搜索（Reduction）" class="headerlink" title="减少重复搜索（Reduction）"></a>减少重复搜索（Reduction）</h4><p>因为很多时候，大部分重要的优化都是相同的，所以我们在找出至少两个局部最优解后，求这些最优解的交集，并以这些边作为初始回路的一部分。<br>数据测试发现，两个普通的局部最优解有 85% 是相似的，甚至 7-8 个最优解也有 60-80% 是相似的。</p>
<h3 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h3><p>无法进行不连续交换。<br>e.g.:<br><img src="http://halelu.github.io/2016/05/Something-About-TSP-1/Figure-2.png" alt></p>
<h3 id="初始随机解的生成优化"><a href="#初始随机解的生成优化" class="headerlink" title="初始随机解的生成优化"></a>初始随机解的生成优化</h3><p>根据初始随机解的生成方式的不同，衍生出不同的方法，其中包括：</p>
<ul>
<li>最近插入法(nearest insertion，NI)</li>
<li>凸包法（connex hull insertion，CHI)</li>
<li>最远插入法(farthest insertion，FI)</li>
<li>最邻近法(nearest neighbor algorithm，NN)</li>
<li>节约算法（clark wright algorithm，CW)</li>
<li>贪婪算法（greedy algorithm，GA)</li>
<li>最小双生树法（double spanning tree，DST)<br>部分算法性能如下：<br><img src="http://halelu.github.io/2016/05/Something-About-TSP-1/Figure-4.png" alt><br><img src="http://halelu.github.io/2016/05/Something-About-TSP-1/Figure-5.png" alt></li>
</ul>
<h2 id="论文来自"><a href="#论文来自" class="headerlink" title="论文来自"></a>论文来自</h2><p><em>An Effective Heuristic Algorithm for the Traveling-Salesman Problem</em><br>　　—— S. Lin and B. W. Kernighan<br><em>Lin-Kernighan 算法初始解的启发式构造策略</em><br>　　—— 曾华，崔文，付连宁，吴耀华</p>
]]></content>
      
        <categories>
            
            <category> 算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 旅行商问题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[浅谈最长公共子序列算法及其优化（2）]]></title>
      <url>https://HaleLu.github.io/2016/05/Something-About-Longest-Common-Subsequences-2/</url>
      <content type="html"><![CDATA[<p>这一篇是队友所看的论文，稍作整理。</p>
<p><a href="https://hzlclock.wordpress.com/2016/05/15/lcs-algorithm-that-consumes-liner-space/" target="_blank" rel="noopener">想看他做的PPT可以戳这里</a></p>
<a id="more"></a>

<h2 id="空间压缩"><a href="#空间压缩" class="headerlink" title="空间压缩"></a>空间压缩</h2><p>首先纠正上一篇中的一处错误，空间可以压缩到 O(n) ，然而同时就意味着不能得到具体序列。当不在乎具体序列时可以简单使用对 i 模2的方法压缩空间。<br>此文提供了一种方法在不提高复杂度的前提下压缩空间并能回求序列的方案。</p>
<h2 id="不回求序列的压缩法"><a href="#不回求序列的压缩法" class="headerlink" title="不回求序列的压缩法"></a>不回求序列的压缩法</h2><p>将上一篇所提到的 f[0..n][0..m] 中的第一维用 i mod 2 替换，则只有0和1，然而不影响正确性。</p>
<h2 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h2><p>将 A 二分，用不回求序列的压缩法求 A[0..n/2] 和 B[0..m] 的公共子序列长度，将所有的 f[(n/2)%2][0..m] 的值（共 m+1 个）保存为 L1[0..m]。<br>同理，将 A[n/2+1..n] 和 B[0..m] 倒序后得到长度 L2[m..0]。<br>找到 B 数组的中间值 k ，使得 L1[k]+L2[n-k] 取得最大值。<br>那么我们就知道了，用 A[0..n/2] 和 B[0..k] 匹配，A[n/2+1..n] 和 B[k+1..m] 匹配便可得到最长的公共子序列。<br>那我们递归处理A[0..n/2] 和 B[0..k] 以及 A[n/2+1..n] 和 B[k+1..m] 的匹配就可以得到最终字符串了。</p>
<p>当然，递归的最后需要特判 A 序列长度为0和1的情况。</p>
<h2 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h2><p><img src="http://halelu.github.io/2016/05/Something-About-Longest-Common-Subsequences-2/Figure-1.png" alt><br><em>注：ALG B指的是</em>上文所说的 i mod 2 的压缩空间的方法。</p>
<h2 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h2><p>显然空间只有O(m)；<br>时间略微有些复杂。用了两次 <em>不回求序列的压缩法</em> ，复杂度为 O(mn)，然而每次递归复杂度递减为上一次的一半，求和后可以知道总复杂度只有O(2mn)，常数不看，即O(mn).</p>
<h2 id="论文来自"><a href="#论文来自" class="headerlink" title="论文来自"></a>论文来自</h2><p><em>A Liner Space Algorithm for Computing Maximal Common Subsequences</em><br>　　—— D.S. Hirschberg (Princeton University)</p>
]]></content>
      
        <categories>
            
            <category> 算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[生活笔记（2016-05-15）]]></title>
      <url>https://HaleLu.github.io/2016/05/Note-2/</url>
      <content type="html"><![CDATA[<p>算是定期汇报一下工作吧。</p>
<a id="more"></a>

<h2 id="课程"><a href="#课程" class="headerlink" title="课程"></a>课程</h2><p>结掉了几门课，停掉了几门课。现在还上着的基本就是英语和计组了。<br>计组这些天在做 MIPS ，挺有意思的。博客的其他文章也有提到在做的这件事。<br>算法研讨下周一要讲DP，刚整理了一篇论文。今天晚上必须搞懂另一篇并做好 PPT。</p>
<h2 id="辩论"><a href="#辩论" class="headerlink" title="辩论"></a>辩论</h2><p>算是结掉了一份工作，虽然似乎没有做到很好。以后的锅可能就甩给学弟了。</p>
<h2 id="科创"><a href="#科创" class="headerlink" title="科创"></a>科创</h2><p>又是一拖再拖下来了。得抓紧时间赶工了，中期检查快到了。</p>
<h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>这两天终于差（bing）不（mei）多（you）补完了上周的 <a href="http://halelu.github.io/2016/05/JSCPC-2016-Note/">解题报告</a>。还差 spfa 和 莫比乌斯函数 的坑，接下来接着填。</p>
<h2 id="竞赛"><a href="#竞赛" class="headerlink" title="竞赛"></a>竞赛</h2><p>下午会打一个很奇葩的天梯赛。下下周末可能要出去打蓝桥，可是好像和算法考试重了。<br>报了一个信息安全竞赛，也是这两天。真的想弃了蓝桥杯了。<br>万一真的去实习没法来补考岂不是很尴尬？</p>
<h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><p>选课系统的万年老坑啊啊啊啊啊啊啊啊。<br>看样子我要接一口大锅啦啊啊啊啊啊啊啊。<br>好吧接下来又要开始动工了，争取学期结束前完工。</p>
<h2 id="絮絮叨叨"><a href="#絮絮叨叨" class="headerlink" title="絮絮叨叨"></a>絮絮叨叨</h2><p>日子过得越来越充实。<br>祝自己越来越优秀吖~  </p>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MIPS处理器设计（1）：支持9条指令的单周期处理器]]></title>
      <url>https://HaleLu.github.io/2016/05/MIPS-1/</url>
      <content type="html"><![CDATA[<p>这两天写完了一个 MIPS 的支持9条指令的单周期处理器。</p>
<a id="more"></a>

<h2 id="简要说明"><a href="#简要说明" class="headerlink" title="简要说明"></a>简要说明</h2><p>单周期的 Mips 处理器<br>只支持 add、sub、and、or、lw、sw、slt、beq、j 这9条指令  </p>
<h2 id="开发语言、工具和环境"><a href="#开发语言、工具和环境" class="headerlink" title="开发语言、工具和环境"></a>开发语言、工具和环境</h2><p>采用 Verilog 语言开发<br>Window 10 环境下<br>使用了 Sublime Text + ModelSim 的方式进行开发（ModelSim 自带的编辑器真的难用一个tab竟然是8个空格啊啊啊啊啊）</p>
<h2 id="具体设计"><a href="#具体设计" class="headerlink" title="具体设计"></a>具体设计</h2><p>具体分为两大部分和处理器部分</p>
<h3 id="datapath（数据通路）"><a href="#datapath（数据通路）" class="headerlink" title="datapath（数据通路）"></a>datapath（数据通路）</h3><p>定义了各种元部件</p>
<h4 id="alu-v"><a href="#alu-v" class="headerlink" title="alu.v"></a>alu.v</h4><p>模块名：alu<br>说明：算逻部件<br>输入接口：op（4位，运算符编码）, a, b（32位，运算数）<br>输出接口：zero（结果是否为0）, dout（32位，运算结果）<br>op的说明：<br>　　0010： dout = a + b<br>　　0110： dout = a - b<br>　　0001： dout = a | b<br>　　0000： dout = a &amp; b<br>　　0111： dout = a &lt; b ? 1 : 0</p>
<h4 id="dm-v"><a href="#dm-v" class="headerlink" title="dm.v"></a>dm.v</h4><p>模块名：dm_4k<br>说明：数据寄存器，大小为4k（时钟上升沿触发）<br>输入接口：addr（10位，数据地址）, din（32位，写数据时的数据端）, we（写数据使能端）, re（读数据使能端）, clk（时钟端）<br>输出接口：dout（32位，读数据时的数据输出端）  </p>
<h4 id="ext-v"><a href="#ext-v" class="headerlink" title="ext.v"></a>ext.v</h4><p>模块名：ext<br>说明：符号扩展部件（W 表示输入数据宽度）<br>输入接口：din（W 位）<br>输出接口：dout（32位）  </p>
<h4 id="im-v"><a href="#im-v" class="headerlink" title="im.v"></a>im.v</h4><p>模块名：im_4k<br>说明：指令存储器，大小为4k<br>输入接口：addr（10位，运算符编码）<br>输出接口：dout（32位，对应指令）  </p>
<h4 id="mux-v"><a href="#mux-v" class="headerlink" title="mux.v"></a>mux.v</h4><p>模块名：mux2<br>说明：二路选择器（W 表示输入数据宽度）<br>输入接口：a, b（W 位，表示0和1对应的数据源）, s（选择信号）<br>输出接口：dout（W 位，选择结果）  </p>
<h4 id="pc-v"><a href="#pc-v" class="headerlink" title="pc.v"></a>pc.v</h4><p>模块名：pc<br>说明：程序计数器（时钟上升沿触发）<br>输入接口：clk（时钟端）, rst（重置信号）, data（32位，下一指令地址）<br>输出接口：dout（32位，当前指令地址）  </p>
<h4 id="regheap-v"><a href="#regheap-v" class="headerlink" title="regheap.v"></a>regheap.v</h4><p>模块名：regheap<br>说明：寄存器堆（时钟上升沿触发）<br>输入接口：clk（时钟端）, we（写寄存器使能端）, rreg1（5位，读寄存器1地址）, rreg2（5位，读寄存器2地址）, wreg（5位，写寄存器的地址）, wdata（写入寄存器的数据）<br>输出接口：rdata1（32位，读寄存器1的数据）, rdata2（32位，读寄存器2的数据）<br>另：有部分为方便测试而添加的初始化寄存器的值的代码。  </p>
<h3 id="control（控制信号）"><a href="#control（控制信号）" class="headerlink" title="control（控制信号）"></a>control（控制信号）</h3><p>解析指令，生成对应的控制信号</p>
<h4 id="ALUctrl-v"><a href="#ALUctrl-v" class="headerlink" title="ALUctrl.v"></a>ALUctrl.v</h4><p>模块名：ALUctrl<br>说明：算逻部件控制器<br>输入接口：ALUOp（2位）, funct（6位，指令的5-0位）<br>输出接口：op（4位，对应的 alu 运算符编码）</p>
<h4 id="ctrl-v"><a href="#ctrl-v" class="headerlink" title="ctrl.v"></a>ctrl.v</h4><p>模块名：ctrl<br>说明：算逻部件控制器<br>输入接口：op（6位，指令的31-26位）<br>输出接口：RegDst, RegWrite, ALUSrc, MemRead, MemWrite, MemtoReg, Jump, Branch, ALUOp（各种控制信号，其中 ALUOp 为2位）</p>
<h3 id="mips-v（处理器部分）"><a href="#mips-v（处理器部分）" class="headerlink" title="mips.v（处理器部分）"></a>mips.v（处理器部分）</h3><p>模块名：mips<br>说明：单周期处理器（时钟上升沿触发）<br>输入接口：clk（时钟端）, rst（重置信号）  </p>
<h3 id="testbench-v（测试代码）"><a href="#testbench-v（测试代码）" class="headerlink" title="testbench.v（测试代码）"></a>testbench.v（测试代码）</h3><p>模块名：testbench<br>说明：生成时钟信号测试部件可行性  </p>
<p><a href="https://github.com/HaleLu/mips" target="_blank" rel="noopener">详见 Github</a></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MIPS </tag>
            
            <tag> Verilog </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[浅谈最长公共子序列算法及其优化（1）]]></title>
      <url>https://HaleLu.github.io/2016/05/Something-About-Longest-Common-Subsequences-1/</url>
      <content type="html"><![CDATA[<h2 id="最长公共子序列"><a href="#最长公共子序列" class="headerlink" title="最长公共子序列"></a>最长公共子序列</h2><h3 id="基本算法描述"><a href="#基本算法描述" class="headerlink" title="基本算法描述"></a>基本算法描述</h3><p>最长公共子序列（LCS）问题是一种经典的动态规划（DP）问题。</p>
<a id="more"></a>

<p>假设两个序列为 s1 和 s2 （假设下标从 0 开始），原先我们的算法是用 f[i][j] 表示 s1[1..i] 和 s2[1..j] 的最长公共子序列长度。<br>那么，我们可以得到状态转移方程：  </p>
<p>f[i][j] = max{f[i-1][j], f[i][j-1]) (i&gt;0 &amp;&amp; j&gt;0 &amp;&amp; s1[i] != s2[j])<br>f[i][j] = max{f[i-1][j], f[i][j-1], f[i-1][j-1] + 1} (i&gt;0 &amp;&amp; j&gt;0 &amp;&amp; s1[i] == s2[j])<br>f[i][j] = 0 (i==0 || j==0)</p>
<p>递推即可得到答案。</p>
<h3 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h3><p>假设两个序列长度分别为 n 和 m ，则原算法的时间复杂度显然可见是 O(n·m) 的。<br>空间复杂度上由于开了一个 f[0..n][0..m] 的数组，所以复杂度也是 O(n·m) 的。<br>当然，由于每一维度的 f 数组只和上一维度有关，所以空间复杂度可以压缩到 O(m) 。<em>(此处的分析有误，在下一文中对空间压缩的方法给出了具体讨论)</em></p>
<h2 id="一种新思路"><a href="#一种新思路" class="headerlink" title="一种新思路"></a>一种新思路</h2><h3 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h3><p>定义一种阈值数组 T[0..n][0..n]，T[i][k] 表示在序列 s2 中匹配 s1[1..i]，寻找到 k 项匹配的最小下标值。<br>换句话说，即满足 s1[1..i] 和 s2[1..j] 有 k 项匹配的最小 j 值。</p>
<p>e.g.:<br>s1 = “abcbdda”<br>s2 = “badbabd”<br>则 T[5,1] 表示在 s2 中找到能与 s1[1..5] 公共子序列长度为1的最小下标。显然第一个即可满足，所以 T[5,1] = 1 。<br>同理，T[5,2] = 3，T[5,3] = 6，T[5,4] = 7，T[5,5] = ∞ 。  </p>
<p>显然，数组 T 在第二维上是递增的。且 T[i][k-1] &lt; T[i+1][k] ≤ T[i][k] 。<br>则可得递推方程：  </p>
<p><code>T[i+1][k] = min{j} (s1[i+1]==s2[j] &amp;&amp; T[i][k-1] &lt; j ≤ T[i][k])</code><br><code>T[i+1][k] = T[i][k] (不存在上述条件的 j 时)</code></p>
<p>算法正确性在此不做证明。</p>
<p>据此我们找到最后一列中满足 T[n][k] != ∞ 的最大 k 值即为 LCS 答案。<br>对应的算法伪代码：<br><img src="http://halelu.github.io/2016/05/Something-About-Longest-Common-Subsequences-1/Figure-1.png" alt></p>
<h3 id="算法分析-1"><a href="#算法分析-1" class="headerlink" title="算法分析"></a>算法分析</h3><p>此时的时间复杂度为O((n^2)log n)，空间复杂度一样是可以压缩到 O(n)。</p>
<h2 id="算法改进"><a href="#算法改进" class="headerlink" title="算法改进"></a>算法改进</h2><h3 id="改进思路"><a href="#改进思路" class="headerlink" title="改进思路"></a>改进思路</h3><p>建立一个匹配表，事先将 s1 数组中的元素去和 s2 进行匹配，得到匹配表。</p>
<p>e.g.:<br>s1 = “abcbdda”<br>s2 = “badbabd”</p>
<p>则对应匹配表为：<br>MATCHLIST[1] = &lt;5,2&gt;<br>MATCHLIST[2] = &lt;6,4,1&gt;<br>MATCHLIST[3] = &lt;&gt;<br>MATCHLIST[4] = MATCHLIST[2]<br>MATCHLIST[5] = &lt;7,3&gt;<br>MATCHLIST[6] = MATCHLIST[5]<br>MATCHLIST[7] = MATCHLIST[1]  </p>
<p>对应的算法伪代码：<br><img src="http://halelu.github.io/2016/05/Something-About-Longest-Common-Subsequences-1/Figure-2.png" alt></p>
<h3 id="算法分析-2"><a href="#算法分析-2" class="headerlink" title="算法分析"></a>算法分析</h3><p>时间复杂度 O((r+n)log n) （ n 表示字符串长度，r 表示两个字符串间能匹配的次数），最坏复杂度为 O(n^2 log n)。<br>空间复杂度 O(r+n)。<br>具体分析如下：</p>
<h4 id="Step-1：整理匹配表"><a href="#Step-1：整理匹配表" class="headerlink" title="Step 1：整理匹配表"></a>Step 1：整理匹配表</h4><p>　　可使用带序号的排序。时间复杂度 O(nlog n)，空间复杂度 O(n)。</p>
<h4 id="Step-2：初始化"><a href="#Step-2：初始化" class="headerlink" title="Step 2：初始化"></a>Step 2：初始化</h4><p>　　时间：O(n)</p>
<h4 id="Step-3：比较和匹配"><a href="#Step-3：比较和匹配" class="headerlink" title="Step 3：比较和匹配"></a>Step 3：比较和匹配</h4><p>　　时间：O(n + rlog n)</p>
<h4 id="Step-4-倒序恢复最长子序列"><a href="#Step-4-倒序恢复最长子序列" class="headerlink" title="Step 4: 倒序恢复最长子序列"></a>Step 4: 倒序恢复最长子序列</h4><p>　　时间：最坏 O(n)，空间：O(r)</p>
<h2 id="论文来自"><a href="#论文来自" class="headerlink" title="论文来自"></a>论文来自</h2><p><em>A Fast Algorithm for Computer Longest Common Subsequences</em><br>　　—— James W.Hunt (Stanford University) &amp; Thomas G.Szymanski (Princeton University)</p>
]]></content>
      
        <categories>
            
            <category> 算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ModelSim Student Edition 安装指南]]></title>
      <url>https://HaleLu.github.io/2016/05/Modelsim-Setup/</url>
      <content type="html"><![CDATA[<p>由于学习计算机组成与设计的课程需要，我们利用 ModelSim 来进行计算机的仿真设计。此文整理了安装的步骤与教训。</p>
<a id="more"></a>

<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>首先去<a href="https://www.mentor.com/products/fv/modelsim/" target="_blank" rel="noopener"> 官网 </a>找到 ModelSim ，正版太贵又不愿用盗版，所以我们使用 Student Edition 。</p>
<p>找到学生版的<a href="https://www.mentor.com/company/higher_ed/modelsim-student-edition" target="_blank" rel="noopener">链接：https://www.mentor.com/company/higher_ed/modelsim-student-edition</a>，找到 <a href="http://s3.mentor.com/fv/modelsim-pe_student_edition.exe" target="_blank" rel="noopener">Download Student Edition</a> 下载安装包（也可以戳这里）。</p>
<p>记得仔细阅读页面上的 Additional Information 。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>下载完成后照着 .exe 文件的步骤安装，注意：</p>
<p><strong>安装路径中不可出现空格！</strong></p>
<p>别问我是怎么知道的。<br>血的教训！</p>
<p>安装完成后会弹出一个窗口，如果你仔细阅读了 Additional Information 应该就知道了，我们需要在这个页面中填写个人信息和邮箱，申请一个 license 文件。</p>
<p>要注意有些邮箱会过滤国外信件，避免使用（比如我航）。</p>
<p>填写完成后，过一会（大概 5 min）你会收到一个邮件，把邮件的附件（一个 .dat 文件）复制进你的安装目录。<br>完成~</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ModelSim </tag>
            
            <tag> 计算机组成与设计 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JSCPC 2016 赛后笔记]]></title>
      <url>https://HaleLu.github.io/2016/05/JSCPC-2016-Note/</url>
      <content type="html"><![CDATA[<p>今天参加了一场 JSCPC ，靠队友带飞了。为了今后可以不拖队友后腿，我决定写题解。</p>
<a id="more"></a>

<h2 id="A"><a href="#A" class="headerlink" title="A"></a>A</h2><p>这是一道模拟题，翻译莫斯密码。<br>先是强行手打莫斯密码表（只含 ‘.’ 和 ‘-‘ ）<br>然后一个 ‘.’ 为一个 ‘=’ ；一个 ‘-‘ 转为 ‘===’；每两个符号间加一个 ‘.’；<br>然后每两个字母间加’…’；<br>每两个单词间加’…….’；<br>Over  </p>
<p>//代码过于繁琐并且没什么价值不再手打。</p>
<h2 id="B"><a href="#B" class="headerlink" title="B"></a>B</h2><p>n 个结点二叉树（ i 的子节点是 2i 和 2i+1 ）<br>求中序遍历的第 x 个值。（1 ≤ x ≤ n ≤ 10000）</p>
<p>由于 n 的范围不算大，所以强行中序就好。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, x;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deal</span><span class="params">(<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="number">2</span>*r &lt;= n) deal(<span class="number">2</span>*r);</span><br><span class="line">	<span class="keyword">if</span> (flag) <span class="keyword">return</span>;</span><br><span class="line">	x--;</span><br><span class="line">	<span class="keyword">if</span> (x==<span class="number">0</span>) &#123;</span><br><span class="line">		flag = <span class="literal">true</span>;</span><br><span class="line">		ans = r;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (<span class="number">2</span>*r+<span class="number">1</span> &lt;= n) deal(<span class="number">2</span>*r+<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">if</span> (flag) <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> id=<span class="number">1</span>;id&lt;=T;id++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;x);</span><br><span class="line">		flag = <span class="literal">false</span>;</span><br><span class="line">		deal(<span class="number">1</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"Case #%d: %d\n"</span>, id, ans);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="C"><a href="#C" class="headerlink" title="C"></a>C</h2><p>给 n （n ≤ 10）个格子涂色（颜色少于等于3种），如果考虑旋转对称可以涂多少种结果。（例如001和010和100算同一种）<br>由于数据量都不大（3^10 = 59049），所以考虑直接暴力。<br>扫一遍，如果这个数还没有被考虑过就轮换一圈做上标记，并结果数 +1 。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">60000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="keyword">bool</span> v[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(v,<span class="literal">false</span>,<span class="keyword">sizeof</span>(v));</span><br><span class="line">	ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> nn=k; </span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">		nn *= k;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nn;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (!v[i]) &#123;</span><br><span class="line">			ans++;</span><br><span class="line">			<span class="keyword">int</span> ii=i;</span><br><span class="line">			v[i] = <span class="literal">true</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;n;j++)</span><br><span class="line">			&#123;</span><br><span class="line">				ii = (ii%k)*(nn/k)+ii/k;</span><br><span class="line">				v[ii] = <span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> id=<span class="number">1</span>;id&lt;=T;id++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k);</span><br><span class="line">		deal();</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"Case #%d: %d\n"</span>, id, ans);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="D"><a href="#D" class="headerlink" title="D"></a>D</h2><p>将四维的 1×1×1×2 的方块放进 2×2×4×n 四维空间（可旋转），问有多少种放置的方法。<br>暂时还是不会 QAQ  </p>
<h2 id="E"><a href="#E" class="headerlink" title="E"></a>E</h2><p>在 2×n 的网格里每次随机放置一个矩阵，问覆盖全图所需次数的数学期望。<br>同上  </p>
<h2 id="F"><a href="#F" class="headerlink" title="F"></a>F</h2><p>有 n 个人，每个人初始有 a[i]（1≤i≤n） 的钱，相互间通过给钱来似的所有人钱一样多，然而每次给钱需要交倍率为 k 的税（交易额 × k ），问最终每人最多多少钱。<br>我们队使用的是二分。<br>答案 ans 应该满足 (1-k)*∑(a[i]-ans)(1≤i≤n &amp;&amp; a[i]&gt;ans) == ∑(ans-a[i])(1≤i≤n &amp;&amp; ans&gt;a[i])</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> ans,k;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="keyword">bool</span> flag;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">abs</span><span class="params">(<span class="keyword">double</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x&gt;<span class="number">0</span>? x:-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deal</span><span class="params">(<span class="keyword">double</span> l, <span class="keyword">double</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">double</span> m = (l+r)/<span class="number">2</span>;</span><br><span class="line">	<span class="keyword">double</span> s1=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">double</span> s2=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (a[i]&gt;m) s1 += a[i] - m;</span><br><span class="line">		<span class="keyword">else</span> s2 += m - a[i];</span><br><span class="line">	&#125;</span><br><span class="line">	s1 *= (<span class="number">1</span>-k);</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">abs</span>(s1-s2) &lt; <span class="number">1e-7</span>) &#123;</span><br><span class="line">		ans = m;</span><br><span class="line">		flag = <span class="literal">false</span>;</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (s1 &gt; s2)</span><br><span class="line">		deal(m,r);</span><br><span class="line">	<span class="keyword">else</span> deal(l,m);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> id=<span class="number">1</span>;id&lt;=T;id++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%lf"</span>, &amp;n, &amp;k);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) </span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		flag = <span class="literal">true</span>;</span><br><span class="line">		deal(<span class="number">1</span>, <span class="number">10000</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"Case #%d: %lf\n"</span>, id, ans);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="G"><a href="#G" class="headerlink" title="G"></a>G</h2><p>猜数游戏。 B 想一个数（1 到 n），A 猜对了可以从 B 那里赢1刀，如果 A 猜了 x 而 B 想的是 x+1 则 A 要支付1刀给 B 。<br>B 使用随机数发生器，同时 B 能决定每个数字的分布。而 A 知道 B 的决定，所以 A 会挑选一个获利期望最大的选择。<br>B 现在要将 A 的获利最小化，问最小化的 A 的获利期望是多少。</p>
<p>问题模型简化为：<br>∑(P[i]) = 1, 求 max{ P[i]-P[i+1] , P[n] } (1 ≤ i &lt; n) 的最小值。<br>记 <code>a[i]=P[i]-P[i+1](1 ≤ i &lt; n), a[n]=P[n]</code>，则有  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a[1] + 2·a[2] + …… + (n-1)·a[n-1] + n·a[n] = 1,</span><br><span class="line">求： max&#123;a[i]&#125; (1 ≤ i ≤ n) 的最小值.</span><br></pre></td></tr></table></figure>

<p>显然取等号时有最小值，最小值为 2/(n·(n+1)).<br>所以输出2/(n·(n+1))即可。</p>
<h2 id="H"><a href="#H" class="headerlink" title="H"></a>H</h2><p>给定 n 和 m ，求∑∑(i^2·j^2·gcd(i,j)) (1 ≤ i ≤ n, 1 ≤ j ≤ m).<br>要用到一个叫莫比乌斯函数的东西。暂时还没搞明白，搞清楚以后会在单独写一篇。</p>
<h2 id="I"><a href="#I" class="headerlink" title="I"></a>I</h2><p>有两种公交线路，一种是每次2刀（A 类），一种是免费的（B 类）。给出所有线路和起点终点，求解出最小花费。<br>思路是将所有站点和线路相间建立无向图。若站点在线路上则连接站点和线路。若与 A 类线路连接，则边权为 1，若与 B 类线路连接则为 0.<br>然后一遍spfa过了。<br>代码再过两天补吧。</p>
<h2 id="J"><a href="#J" class="headerlink" title="J"></a>J</h2><p>这题真的是有意思，人肉机器学习。<br>题意大概是给了一段西班牙语，一段中文拼音，然后将会给一段 100 - 500 词的文本（从报纸、杂志上摘取），判断这段文本是什么语言（英语 / 西班牙语 / 拼音）。  </p>
<p>我们起初用一些 y、es 这样的单词来判断西班牙语；the、be 动词这些来判断英语，然而 WA 了。</p>
<p>队友后来开始统计词频，然而还是呵呵了。</p>
<p>最后的处理方式是：先查英文，出现特征词直接认定为 English；<br>接下来统计字长，出现长度大于6的单词认定不是中文拼音（拼音最长为6个字母）；<br>然后很诡异的作了一步判断首字母是不是元音字母的单词比例，大于 0.8 则断定为中文拼音（也不知道是不是这个操作起了效果我觉得不是然而队友这么写了并且过了那现在就无从得知了）；<br>接下来再用西班牙语特征词判断西班牙语；<br>还判断不出来就返回英文。<br>具体代码不写了，没什么意思。  </p>
<p>其实现在想想这个逻辑还是有问题的。但是不管怎么说，过了、拿到分了就行。</p>
]]></content>
      
        <categories>
            
            <category> 算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> ACM </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android Intro]]></title>
      <url>https://HaleLu.github.io/2016/05/Android-Intro/</url>
      <content type="html"><![CDATA[<p>这是一个简单的 Android 开发入门介绍。</p>
<a id="more"></a>

<h1 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h1><p>Android Studio (Eclipse)<br>我们这里使用 Android Studio.</p>
<h1 id="所需工具"><a href="#所需工具" class="headerlink" title="所需工具"></a>所需工具</h1><p>Android Studio<br>SDK </p>
<ul>
<li>Software Development Kit  </li>
<li>need use VPN</li>
</ul>
<p>Android Virtual Device  </p>
<ul>
<li>optional  </li>
<li>created with SDK</li>
</ul>
<p>Gradle </p>
<ul>
<li>auto download</li>
</ul>
<h1 id="基本框架"><a href="#基本框架" class="headerlink" title="基本框架"></a>基本框架</h1><h2 id="Gradle-Script"><a href="#Gradle-Script" class="headerlink" title="Gradle Script"></a>Gradle Script</h2><h3 id="build-gradle-Module-app"><a href="#build-gradle-Module-app" class="headerlink" title="build.gradle (Module:app)"></a>build.gradle (Module:app)</h3><p>此处保存主要的 app 支持的 Android 版本号。<br><code>compileSdkVersion</code> 指编译所用的 SDK 版本，一般要求高于 targetSdkVersion<br><code>minSdkVersion</code> 指支持的最小 SDK 版本<br><code>targetSdkVersion</code> 指目标SDK版本，即能保证支持的最高版本</p>
<h3 id="build-gradle-Project-ProjectName"><a href="#build-gradle-Project-ProjectName" class="headerlink" title="build.gradle (Project:ProjectName)"></a>build.gradle (Project:ProjectName)</h3><p><code>classpath</code> 表示使用的 gradle 版本，保存后自动下载，保持网络♂畅通。</p>
<h3 id="local-properties"><a href="#local-properties" class="headerlink" title="local.properties"></a>local.properties</h3><p><code>sdk.dir</code> 表示 SDK 的路径</p>
<h2 id="app"><a href="#app" class="headerlink" title="app"></a>app</h2><p>以 Gradle 2.1.0 为例：</p>
<h3 id="manifests"><a href="#manifests" class="headerlink" title="manifests"></a>manifests</h3><p>程序的各种声明</p>
<ul>
<li>声明程序包名</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag"><span class="attr">package</span>=<span class="string">"com.example.companyName.packageName"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>申请权限</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.GET_ACCOUNTS"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.READ_PROFILE"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.READ_CONTACTS"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Application 基本信息  </p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:theme</span>=<span class="string">"@android:style/Theme.NoTitleBar"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>声明 Activity 和 Service<br>放在 application 中：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">"PackageName.ActivityName"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">service</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">"PackageName.ServiceName"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:enabled</span>=<span class="string">"true"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><p>四大（五大）基本组件：</p>
<ul>
<li>Activity</li>
<li>Service</li>
<li>(Intend)</li>
<li>Content Provider</li>
<li>Broadcast Receiver</li>
</ul>
<p>App的程序，即逻辑代码，被放在不同的包中（类似 C# 中的 namespace ）  </p>
<p>所有的 Activity 均继承于 Activity 类，所有的 Service 均继承于 Service 类。 </p>
<p>事件驱动，通过 On动作 方法处理事件。</p>
<p>不同的 Activity 和 Service 之间通过 Intend 去连接。  </p>
<p>Activity 使用 setContentView 获取 res 中对应的界面文件来设置界面。  </p>
<p>使用 R 来获取 res 中的具体值。</p>
<h3 id="res"><a href="#res" class="headerlink" title="res"></a>res</h3><p>存放所有资源文件  </p>
<ul>
<li>drawable 图片的布局文件  </li>
<li>layout 界面的布局文件  </li>
<li>menu 菜单界面的布局文件  </li>
<li>mipmap 图片资源文件  </li>
<li>values 各种资源字符串等（通过 R 访问获取）</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[生活笔记（2016-05-06）]]></title>
      <url>https://HaleLu.github.io/2016/05/Note-1/</url>
      <content type="html"><![CDATA[<p>搞了个大新闻。 </p>
<a id="more"></a> 

<h3 id="CCF"><a href="#CCF" class="headerlink" title="CCF"></a>CCF</h3><p>真的是捡了个大便宜吧，莫名其妙就成了 CCF 南航学生分会的主席。  </p>
<p>一个学会的会旗竟然放在我的柜子里，想想真的是有一点不可思议。  </p>
<p>肩上的担子重啊。  </p>
<p>祝我这次真的能做好吧。  </p>
<p>顺便也重新思考了一下之后的路。开发？科研？好像又开始犹豫了。</p>
<h3 id="琐事"><a href="#琐事" class="headerlink" title="琐事"></a>琐事</h3><p>终于还是下定决心买了电池，断电后不能用电脑真的很麻烦。  </p>
<p>这几天事情其实还不算少，下周三的动态规划又该讲了，还有周二晚上要考概率论，周末还得给大一的讲 Android 。  </p>
<p>其他时间可能会好好复习刷题了。</p>
<p>祝我顺利。</p>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[EF 测试：不同对象的同一外键是否指向同一对象]]></title>
      <url>https://HaleLu.github.io/2016/05/Test-for-EF-Whether-Shared-Object-When-Having-the-Same-Foreign-Keys/</url>
      <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在一对多关系中，例如一个 Class 对多个 Student ，使用 ToList() 取出一个 List 的 Student 对象，<br>那么 List 中的 Student 对象外键对应的 Class 到底是各自独立，还是会共用一个对象？<br>那么分开取出的 Student 们对应的 Class 共用吗？<br>加上 AsNoTracking() 方法呢？</p>
<a id="more"></a>

<h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><h3 id="model-定义"><a href="#model-定义" class="headerlink" title="model 定义"></a>model 定义</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Class</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Number &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Student&gt; Students &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="keyword">new</span> List&lt;Student&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Class Class &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="DbContext-的继承和重写"><a href="#DbContext-的继承和重写" class="headerlink" title="DbContext 的继承和重写"></a>DbContext 的继承和重写</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AppDbContext</span> : <span class="title">DbContext</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> DbSet&lt;Class&gt; Classes &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> DbSet&lt;Student&gt; Students &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnConfiguring</span>(<span class="params">DbContextOptionsBuilder optionsBuilder</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        optionsBuilder.UseSqlServer(<span class="string">@"Server=(localdb)\mssqllocaldb;Database=EFGetStarted.ConsoleAppFortest.DbForTest;Trusted_Connection=True"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnModelCreating</span>(<span class="params">ModelBuilder modelBuilder</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="主程序"><a href="#主程序" class="headerlink" title="主程序"></a>主程序</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dbContext = <span class="keyword">new</span> AppDbContext();</span><br><span class="line">    dbContext.Database.EnsureCreated();</span><br><span class="line"></span><br><span class="line">    dbContext.Classes.RemoveRange(dbContext.Classes);</span><br><span class="line">    dbContext.Students.RemoveRange(dbContext.Students);</span><br><span class="line">    dbContext.SaveChanges();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> c = <span class="keyword">new</span> Class &#123; Number = <span class="string">"001"</span> &#125;;</span><br><span class="line">    c.Students.Add(<span class="keyword">new</span> Student()</span><br><span class="line">    &#123;</span><br><span class="line">        Name = <span class="string">"Hale Lu"</span></span><br><span class="line">    &#125;);</span><br><span class="line">    c.Students.Add(<span class="keyword">new</span> Student()</span><br><span class="line">    &#123;</span><br><span class="line">        Name = <span class="string">"PM Extra"</span></span><br><span class="line">    &#125;);</span><br><span class="line">    dbContext.Classes.Add(c);</span><br><span class="line">    dbContext.SaveChanges();</span><br><span class="line"></span><br><span class="line">    Console.WriteLine(<span class="string">"AsNoTracking:"</span>);</span><br><span class="line">    <span class="keyword">var</span> studentsAsNoTracking = dbContext.Students.Include(s =&gt; s.Class).AsNoTracking().ToList();</span><br><span class="line">    Console.WriteLine(<span class="string">"修改前："</span>);</span><br><span class="line">    Console.WriteLine(<span class="string">"students[0].Class.Number = "</span> + studentsAsNoTracking[<span class="number">0</span>].Class.Number);</span><br><span class="line">    Console.WriteLine(<span class="string">"students[1].Class.Number = "</span> + studentsAsNoTracking[<span class="number">1</span>].Class.Number);</span><br><span class="line">    studentsAsNoTracking[<span class="number">0</span>].Class.Number = <span class="string">"002"</span>;</span><br><span class="line">    Console.WriteLine(<span class="string">"修改后："</span>);</span><br><span class="line">    Console.WriteLine(<span class="string">"students[0].Class.Number = "</span> + studentsAsNoTracking[<span class="number">0</span>].Class.Number);</span><br><span class="line">    Console.WriteLine(<span class="string">"students[1].Class.Number = "</span> + studentsAsNoTracking[<span class="number">1</span>].Class.Number);</span><br><span class="line">    Console.WriteLine(<span class="string">"ToList方法查询结果的外键对象"</span> + (studentsAsNoTracking[<span class="number">0</span>].Class.Number == studentsAsNoTracking[<span class="number">1</span>].Class.Number ? <span class="string">""</span> : <span class="string">"不"</span>) + <span class="string">"共用一个对象"</span>);</span><br><span class="line">    Console.WriteLine();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> aAsNoTracking = dbContext.Students.Include(s =&gt; s.Class).AsNoTracking().First();</span><br><span class="line">    <span class="keyword">var</span> bAsNoTracking = dbContext.Students.Include(s =&gt; s.Class).AsNoTracking().Last();</span><br><span class="line">    Console.WriteLine(<span class="string">"修改前："</span>);</span><br><span class="line">    Console.WriteLine(<span class="string">"a.Class.Number = "</span> + aAsNoTracking.Class.Number);</span><br><span class="line">    Console.WriteLine(<span class="string">"b.Class.Number = "</span> + bAsNoTracking.Class.Number);</span><br><span class="line">    aAsNoTracking.Class.Number = <span class="string">"003"</span>;</span><br><span class="line">    Console.WriteLine(<span class="string">"修改后："</span>);</span><br><span class="line">    Console.WriteLine(<span class="string">"a.Class.Number = "</span> + aAsNoTracking.Class.Number);</span><br><span class="line">    Console.WriteLine(<span class="string">"b.Class.Number = "</span> + bAsNoTracking.Class.Number);</span><br><span class="line">    Console.WriteLine(<span class="string">"不同的方法查询结果的外键对象"</span> + (aAsNoTracking.Class.Number == bAsNoTracking.Class.Number ? <span class="string">""</span> : <span class="string">"不"</span>) + <span class="string">"共用一个对象"</span>);</span><br><span class="line">    Console.WriteLine();</span><br><span class="line"></span><br><span class="line">    Console.WriteLine();</span><br><span class="line">    Console.WriteLine(<span class="string">"不加AsNoTracking:"</span>);</span><br><span class="line">    <span class="keyword">var</span> students = dbContext.Students.Include(s =&gt; s.Class).ToList();</span><br><span class="line">    Console.WriteLine(<span class="string">"修改前："</span>);</span><br><span class="line">    Console.WriteLine(<span class="string">"students[0].Class.Number = "</span> + students[<span class="number">0</span>].Class.Number);</span><br><span class="line">    Console.WriteLine(<span class="string">"students[1].Class.Number = "</span> + students[<span class="number">1</span>].Class.Number);</span><br><span class="line">    students[<span class="number">0</span>].Class.Number = <span class="string">"002"</span>;</span><br><span class="line">    Console.WriteLine(<span class="string">"修改后："</span>);</span><br><span class="line">    Console.WriteLine(<span class="string">"students[0].Class.Number = "</span> + students[<span class="number">0</span>].Class.Number);</span><br><span class="line">    Console.WriteLine(<span class="string">"students[1].Class.Number = "</span> + students[<span class="number">1</span>].Class.Number);</span><br><span class="line">    Console.WriteLine(<span class="string">"ToList方法查询结果的外键对象"</span> + (students[<span class="number">0</span>].Class.Number == students[<span class="number">1</span>].Class.Number ? <span class="string">""</span> : <span class="string">"不"</span>) + <span class="string">"共用一个对象"</span>);</span><br><span class="line">    Console.WriteLine();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> a = dbContext.Students.Include(s =&gt; s.Class).First();</span><br><span class="line">    <span class="keyword">var</span> b = dbContext.Students.Include(s =&gt; s.Class).Last();</span><br><span class="line">    Console.WriteLine(<span class="string">"修改前："</span>);</span><br><span class="line">    Console.WriteLine(<span class="string">"a.Class.Number = "</span> + a.Class.Number);</span><br><span class="line">    Console.WriteLine(<span class="string">"b.Class.Number = "</span> + b.Class.Number);</span><br><span class="line">    a.Class.Number = <span class="string">"003"</span>;</span><br><span class="line">    Console.WriteLine(<span class="string">"修改后："</span>);</span><br><span class="line">    Console.WriteLine(<span class="string">"a.Class.Number = "</span> + a.Class.Number);</span><br><span class="line">    Console.WriteLine(<span class="string">"b.Class.Number = "</span> + b.Class.Number);</span><br><span class="line">    Console.WriteLine(<span class="string">"不同的方法查询结果的外键对象"</span> + (a.Class.Number == b.Class.Number ? <span class="string">""</span> : <span class="string">"不"</span>) + <span class="string">"共用一个对象"</span>);</span><br><span class="line">    Console.WriteLine();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">AsNoTracking:</span><br><span class="line">修改前：</span><br><span class="line">students[0].Class.Number = 001</span><br><span class="line">students[1].Class.Number = 001</span><br><span class="line">修改后：</span><br><span class="line">students[0].Class.Number = 002</span><br><span class="line">students[1].Class.Number = 002</span><br><span class="line">ToList方法查询结果的外键对象共用一个对象</span><br><span class="line"></span><br><span class="line">修改前：</span><br><span class="line">a.Class.Number = 001</span><br><span class="line">b.Class.Number = 001</span><br><span class="line">修改后：</span><br><span class="line">a.Class.Number = 003</span><br><span class="line">b.Class.Number = 001</span><br><span class="line">不同的方法查询结果的外键对象不共用一个对象</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">不加AsNoTracking:</span><br><span class="line">修改前：</span><br><span class="line">students[0].Class.Number = 001</span><br><span class="line">students[1].Class.Number = 001</span><br><span class="line">修改后：</span><br><span class="line">students[0].Class.Number = 002</span><br><span class="line">students[1].Class.Number = 002</span><br><span class="line">ToList方法查询结果的外键对象共用一个对象</span><br><span class="line"></span><br><span class="line">修改前：</span><br><span class="line">a.Class.Number = 002</span><br><span class="line">b.Class.Number = 002</span><br><span class="line">修改后：</span><br><span class="line">a.Class.Number = 003</span><br><span class="line">b.Class.Number = 003</span><br><span class="line">不同的方法查询结果的外键对象共用一个对象</span><br></pre></td></tr></table></figure>

<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>不加 AsNoTracking() 的情况下，所有的同一外键指向同一对象；<br>加 AsNoTracking() 的情况下，分开取出的同一外键指向不同的对象，通过 List 方式取出的同一外键指向相同对象。</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> .NET </tag>
            
            <tag> Entity Framework </tag>
            
            <tag> C# </tag>
            
            <tag> 外键 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[新建一个 .NET 5 的控制台应用]]></title>
      <url>https://HaleLu.github.io/2016/05/DotNET-5-And-Entity-Framework-7/</url>
      <content type="html"><![CDATA[<p>我们常用 .NET 做 Web 应用，然而有时需要做一些逻辑上的测试（例如测试EF 7），所以我们有时会选择使用 ConsoleApp 来简单测试一些东西。<br>此文记录 ConsoleApp 的创建以及 EF 7 的配置过程。  </p>
<a id="more"></a>

<h2 id="新建-NET-的-Web-应用"><a href="#新建-NET-的-Web-应用" class="headerlink" title="新建 .NET 的 Web 应用"></a>新建 .NET 的 Web 应用</h2><p>首先，我们从 Visual Studio 2015 新建一个控制台应用程序（如图）。<br><img src="http://halelu.github.io/2016/05/DotNET-5-And-Entity-Framework-7/Figure-1.png" alt></p>
<h2 id="安装-Entity-Framework-7"><a href="#安装-Entity-Framework-7" class="headerlink" title="安装 Entity Framework 7"></a>安装 Entity Framework 7</h2><p>我们此处以Entity Framework For Microsoft SQL Server 为例。  </p>
<h3 id="安装-EntityFramework-MicrosoftSqlServer-程序包"><a href="#安装-EntityFramework-MicrosoftSqlServer-程序包" class="headerlink" title="安装 EntityFramework.MicrosoftSqlServer 程序包"></a>安装 EntityFramework.MicrosoftSqlServer 程序包</h3><p>可以手动在 工具 ‣ NuGet 包管理器 ‣ 管理解决方案的 NuGet 包 中搜索 EntityFramework.MicrosoftSqlServer 并选择安装，也可以选择 工具 ‣ NuGet 包管理器 ‣ 程序包管理器控制台 ，通过 Install-Package 命令 手动添加：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PM&gt; Install-Package EntityFramework.MicrosoftSqlServer –Pre</span><br></pre></td></tr></table></figure>

<p>这样就安装好了 EF 7 For SQL Server 的依赖库。</p>
<h3 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h3><p>需要在自己定义的 DbContext 类中重写 OnConfiguring 方法。</p>
<p>此处以 在 (localdb)\mssqllocaldb 上创建一个名叫 EFGetStarted.ConsoleAppFortest.DbForTest 的数据库 为例。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AppDbContext</span> : <span class="title">DbContext</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnConfiguring</span>(<span class="params">DbContextOptionsBuilder optionsBuilder</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">// Visual Studio 2015 | Use the LocalDb 12 instance created by Visual Studio</span></span><br><span class="line">        optionsBuilder.UseSqlServer(<span class="string">@"Server=(localdb)\mssqllocaldb;Database=EFGetStarted.ConsoleAppFortest.DbForTest;Trusted_Connection=True"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来有两种方案，代码创建和手动添加 Migration。</p>
<h3 id="代码创建-Migration"><a href="#代码创建-Migration" class="headerlink" title="代码创建 Migration"></a>代码创建 Migration</h3><p>在创建完自己的 DbContext 对象后，通过调用该对象的 Database.EnsureCreated() 方法保证 Migration 被创建。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> dbContext = <span class="keyword">new</span> AppDbContext();</span><br><span class="line">    dbContext.Database.EnsureCreated();</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这时配置便已经完成，可以运行了。</p>
<h3 id="手动添加-Migration"><a href="#手动添加-Migration" class="headerlink" title="手动添加 Migration"></a>手动添加 Migration</h3><p>手动添加 Migration 需要安装一个包并注册一个命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PM&gt; Install-Package EntityFramework.Commands –Pre</span><br></pre></td></tr></table></figure>

<p>并在 project.json 的 commands 里添加</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"ef": "EntityFramework.Commands"</span><br></pre></td></tr></table></figure>

<p>接着就可以在 NuGet 命令行里添加 Migration 了（新的 Migration 命名为 MyFirstMigration ）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PM&gt; Add-Migration MyFirstMigration</span><br><span class="line">PM&gt; Update-Database</span><br></pre></td></tr></table></figure>

<p>我在执行 Add-Migration 的时候出现了一点意外，无法识别这一命令，于是我直接打开了 工作目录/src/项目名称/ 文件夹，在这里使用了命令行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">工作目录/src/项目名称&gt;dnx ef migrations add MyFirstMigration</span><br><span class="line">工作目录/src/项目名称&gt;dnx ef database update</span><br></pre></td></tr></table></figure>

<p>此时就在用户文件夹下生成了对应的数据库文件。</p>
<p>这时，配置工作全部完成。</p>
<p>当下次修改了数据库结构时，需重新创建 Migration 并 Update 。</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> .NET </tag>
            
            <tag> Entity Framework </tag>
            
            <tag> C# </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Something About Dijkstra (4)]]></title>
      <url>https://HaleLu.github.io/2016/05/Something-About-Dijkstra-4/</url>
      <content type="html"><![CDATA[<h2 id="斐波那契堆"><a href="#斐波那契堆" class="headerlink" title="斐波那契堆"></a>斐波那契堆</h2><p>斐波那契堆是一种相对松散的堆结构。它的存储结构并不是一棵树，而是一个森林，并且每棵树都是一个符合堆结构的多叉树。<br>它的特点是只在删除掉顶点以后整理堆的结构。并且通过做标记的形式保持堆的平衡。<br><img src="http://halelu.github.io/2016/05/Something-About-Dijkstra-4/Figure-1.png" alt></p>
<a id="more"></a>

<h2 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h2><h3 id="Insert"><a href="#Insert" class="headerlink" title="Insert"></a>Insert</h3><p>直接插入对应结点，松散排列。<br><img src="http://halelu.github.io/2016/05/Something-About-Dijkstra-4/Figure-2.gif" alt></p>
<h3 id="DeleteMin"><a href="#DeleteMin" class="headerlink" title="DeleteMin"></a>DeleteMin</h3><p>删除顶点后先直接将所有子节点作为一棵树直接放进堆，然后进行整理。<br>整理的方式是，将rank（即根节点的孩子数）相同的树合并为一棵树。  </p>
<p>//别问我为什么没做成 gif ，因为没有 PS ，而且懒。  </p>
<p><img src="http://halelu.github.io/2016/05/Something-About-Dijkstra-4/Figure-3-1.png" alt>  </p>
<p>去掉顶点并直接将子节点作为独立的树：<br><img src="http://halelu.github.io/2016/05/Something-About-Dijkstra-4/Figure-3-2.png" alt>  </p>
<p>开始合并操作：<br><img src="http://halelu.github.io/2016/05/Something-About-Dijkstra-4/Figure-3-3.png" alt>  </p>
<p>将树的根节点按照rank依次放进一个指针数组：<br><img src="http://halelu.github.io/2016/05/Something-About-Dijkstra-4/Figure-3-4.png" alt>  </p>
<p>发现已经有相同rank的根节点则进行合并：<br><img src="http://halelu.github.io/2016/05/Something-About-Dijkstra-4/Figure-3-5.png" alt>  </p>
<p>不断合并直到rank唯一：<br><img src="http://halelu.github.io/2016/05/Something-About-Dijkstra-4/Figure-3-6.png" alt>  </p>
<p><img src="http://halelu.github.io/2016/05/Something-About-Dijkstra-4/Figure-3-7.png" alt>  </p>
<p>继续：<br><img src="http://halelu.github.io/2016/05/Something-About-Dijkstra-4/Figure-3-8.png" alt>  </p>
<p><img src="http://halelu.github.io/2016/05/Something-About-Dijkstra-4/Figure-3-9.png" alt>  </p>
<p>合并：<br><img src="http://halelu.github.io/2016/05/Something-About-Dijkstra-4/Figure-3-10.png" alt>  </p>
<p>到这里，整个堆的根节点都放进数组，整理完成。</p>
<h3 id="DecreaseKey"><a href="#DecreaseKey" class="headerlink" title="DecreaseKey"></a>DecreaseKey</h3><p>此过程需要用到之前定义的 mark 属性，它表示这一结点是否已经被删除过子节点。通过这一标记来尽量保证树的平衡，避免出现“链”的结构。  </p>
<p>具体操作如下：  </p>
<p>首先减小某一顶点的值，然后观察其是否是小于父节点：<br>　　若无父节点，则看是否要更新 min 指针；<br>　　若依然大于父节点，则不做修改；<br>　　若小于父节点，则剪断改分支，并尝试对父节点做标记；<br>　　　　若父节点已经有标记，则剪断父节点并递归对其父节点做标记，直到可以做标记或已经是根节点为止。  </p>
<p><img src="http://halelu.github.io/2016/05/Something-About-Dijkstra-4/Figure-4-1.png" alt>  </p>
<p>将46减小为29：<br><img src="http://halelu.github.io/2016/05/Something-About-Dijkstra-4/Figure-4-2.png" alt><br>小于父节点，无需修改  </p>
<p>将29减小为15：<br><img src="http://halelu.github.io/2016/05/Something-About-Dijkstra-4/Figure-4-3.png" alt>  </p>
<p>小于父节点，剪断，并做标记：<br><img src="http://halelu.github.io/2016/05/Something-About-Dijkstra-4/Figure-4-4.png" alt>  </p>
<p>24被标记：<br><img src="http://halelu.github.io/2016/05/Something-About-Dijkstra-4/Figure-4-5.png" alt>  </p>
<p>将35减小为5：<br><img src="http://halelu.github.io/2016/05/Something-About-Dijkstra-4/Figure-4-6.png" alt>  </p>
<p>小于父节点，剪断，并做标记：<br><img src="http://halelu.github.io/2016/05/Something-About-Dijkstra-4/Figure-4-7.png" alt>  </p>
<p>父节点已经被标记一次了，所以剪断父节点，并对其父节点做标记：<br><img src="http://halelu.github.io/2016/05/Something-About-Dijkstra-4/Figure-4-8.png" alt>  </p>
<p>发现其父节点也已经被标记了，所以再次剪断父节点并对其父节点做标记：<br><img src="http://halelu.github.io/2016/05/Something-About-Dijkstra-4/Figure-4-9.png" alt>  </p>
<p>由于父节点是根节点，所以不再做标记：<br><img src="http://halelu.github.io/2016/05/Something-About-Dijkstra-4/Figure-4-10.png" alt>  </p>
<h2 id="时间复杂度分析"><a href="#时间复杂度分析" class="headerlink" title="时间复杂度分析"></a>时间复杂度分析</h2><table>
<thead>
<tr>
<th>符号</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>n</td>
<td>节点数</td>
</tr>
<tr>
<td>rank(x)</td>
<td>结点 x 的孩子数</td>
</tr>
<tr>
<td>rank(H)</td>
<td>堆 H 的最大 rank</td>
</tr>
<tr>
<td>trees(H)</td>
<td>堆 H 中树的数量</td>
</tr>
<tr>
<td>marks(H)</td>
<td>堆 H 中已标记的点数</td>
</tr>
</tbody></table>
<p>定义一个势函数： Φ(H)  = trees(H) + 2 marks(H)</p>
<ul>
<li><p>Insert：</p>
<ul>
<li>时间复杂度： O(1)</li>
<li>势函数变化： + 1</li>
<li>均摊时间复杂度： O(1)</li>
</ul>
</li>
<li><p>Delete Min：</p>
<ul>
<li><p>O(rank(H))  + O(trees(H)) </p>
<ul>
<li>O(rank(H))将最小值的孩子合并到根节点列表中</li>
<li>O(rank(H)) + O(trees(H)) 更新最小值</li>
<li>O(rank(H)) + O(trees(H)) 巩固森林</li>
</ul>
</li>
<li><p>势函数变化：O(rank(H)) - trees(H)</p>
<ul>
<li>trees(H’) ≤ rank(H) + 1 因为没有两个树有相同的rank</li>
<li>△Φ(H) ≤ rank(H) + 1 - trees(H)</li>
</ul>
</li>
<li><p>均摊时间复杂度： O(rank(H))</p>
</li>
</ul>
</li>
<li><p>Decrease Key：</p>
<ul>
<li><p>O(c) （c 表示剪断次数）</p>
<ul>
<li>O(1) 改变权值</li>
<li>O(1) 剪断并放到根节点列表</li>
</ul>
</li>
<li><p>势函数变化：O(1) - c</p>
<ul>
<li>trees(H’) = trees(H) + c</li>
<li>marks(H’) ≤ marks(H) - c + 2</li>
<li>△Φ ≤ c  +  2 (-c + 2)  =  4 - c</li>
</ul>
</li>
<li><p>均摊时间复杂度： O(1)</p>
</li>
</ul>
</li>
</ul>
<p>可以证明，rank(H) ≤ log Φ (|V|)（其中Φ表示(1 + √5) / 2 ≈ 1.618），由于证明过程有点复杂这里不再说明。<br>所以最终复杂度为O( ( 1 + log Φ (|V|) )|V| + |E| )</p>
]]></content>
      
        <categories>
            
            <category> 算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> Dijkstra </tag>
            
            <tag> Fibonacci堆 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Something About Dijkstra (3)]]></title>
      <url>https://HaleLu.github.io/2016/05/Something-About-Dijkstra-3/</url>
      <content type="html"><![CDATA[<h2 id="k-ary-Heap（k叉堆）"><a href="#k-ary-Heap（k叉堆）" class="headerlink" title="k-ary Heap（k叉堆）"></a>k-ary Heap（k叉堆）</h2><p>简单点说，即将原本堆的实现形式从二叉树改为 k 叉树。  </p>
<a id="more"></a>


<p>k 叉树的 Insert 和 DecreaseKey 操作的复杂度为 O(log k (V))，DeleteMin 的复杂度为 O(k log k (V))，具体的对比如下表所示：  </p>
<table>
<thead>
<tr>
<th>数据结构</th>
<th>Insert,DecreaseKey</th>
<th>DeleteMin</th>
</tr>
</thead>
<tbody><tr>
<td>链表</td>
<td>O(1)</td>
<td>O(V)</td>
</tr>
<tr>
<td>二叉堆</td>
<td>O(log (V))</td>
<td>O(log (V))</td>
</tr>
<tr>
<td>k 叉堆</td>
<td>O(log k (V))</td>
<td>O(k log k (V))</td>
</tr>
<tr>
<td>斐波那契堆</td>
<td>O(1) amortized</td>
<td>O(log V)</td>
</tr>
</tbody></table>
<h2 id="对-Dijkstra-的时间优化"><a href="#对-Dijkstra-的时间优化" class="headerlink" title="对 Dijkstra 的时间优化"></a>对 Dijkstra 的时间优化</h2><p>对一个 Dijkstra 算法来说，如果图为 G(V,E)，一般需要 |V| 次 Insert、|V| 次 DeleteMin 和 |E| 次 DecreaseKey，所以对二叉堆来说总复杂度为 O( (2|V|+|E|) log (V) )，而 k 叉堆为 O( ( (k+1)|V|+|E| ) log k (V) )。</p>
<p>通常我们 k 的值会取 |E| / |V|，那么k 叉堆复杂度就是 O( ( |V|+2|E| ) log (|E| / |V|) (V) )。<br>在 |E| / |V| &gt; 2 的情况下，显然k叉堆是可以起到优化复杂度的效果的。</p>
]]></content>
      
        <categories>
            
            <category> 算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> Dijkstra </tag>
            
            <tag> k叉堆 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Something About Dijkstra (2)]]></title>
      <url>https://HaleLu.github.io/2016/05/Something-About-Dijkstra-2/</url>
      <content type="html"><![CDATA[<p>看的第二篇论文是一篇叫做《A Parallel Algorithm for the Single-Source Shortest Path Problem》的论文。<br>（其实没怎么看懂，欢迎明白的和我讨论这是什么意思。）  </p>
<a id="more"></a>

<h2 id="Dijkstra-算法的并行化"><a href="#Dijkstra-算法的并行化" class="headerlink" title="Dijkstra 算法的并行化"></a>Dijkstra 算法的并行化</h2><h3 id="Gabow’s-Scaling-Algorithm"><a href="#Gabow’s-Scaling-Algorithm" class="headerlink" title="Gabow’s Scaling Algorithm"></a>Gabow’s Scaling Algorithm</h3><p>核心思想是一次考虑一位（bit），本质是一种按位的 Dijkstra 。<br>先将图按最高位（i = log2( max{ range(w) } )， i表示当前位） Dijkstra 一次，接下来每次用前 i 位的距离进行 Dijkstra 并左移一位。<br>因为可以反复寻找最短路径，所以保证了最终的路径最短。</p>
<h2 id="Give-up"><a href="#Give-up" class="headerlink" title="Give up"></a>Give up</h2><p>好吧我放弃了。因为实在是不了解并行化编程，花了两天也实在无法吃透这篇论文。<br>有人后来明白了欢迎留言评论。<br>我算是在这留了个坑吧。【摊手】</p>
<h2 id="新命题"><a href="#新命题" class="headerlink" title="新命题"></a>新命题</h2><p>放弃这一篇，转而去写 k 叉堆了。接下来会写两篇，一篇是 k 叉堆，一篇是斐波那契堆。<br>原谅我实在太弱。</p>
]]></content>
      
        <categories>
            
            <category> 算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> Dijkstra </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Something About Dijkstra (1)]]></title>
      <url>https://HaleLu.github.io/2016/05/Something-About-Dijkstra-1/</url>
      <content type="html"><![CDATA[<p>这两天因为需要看了两篇 Dijkstra 的论文，将思想整理出来以供学习。</p>
<a id="more"></a>

<h2 id="Dijkstra-算法"><a href="#Dijkstra-算法" class="headerlink" title="Dijkstra 算法"></a>Dijkstra 算法</h2><p>Dijkstra 算法的具体细节不再赘述，本质上是一种贪心算法，通过不断添加距离源点最短的点并刷新距离来求解。  </p>
<h2 id="稀疏图的压缩"><a href="#稀疏图的压缩" class="headerlink" title="稀疏图的压缩"></a>稀疏图的压缩</h2><h3 id="Virtual-Node"><a href="#Virtual-Node" class="headerlink" title="Virtual Node"></a>Virtual Node</h3><p><img src="http://halelu.github.io/2016/05/Something-About-Dijkstra-1/Figure-1.png" alt><br>如图，通过添加点减少边的数量（子图必须是二部图）</p>
<h3 id="Superedges"><a href="#Superedges" class="headerlink" title="Superedges"></a>Superedges</h3><p><img src="http://halelu.github.io/2016/05/Something-About-Dijkstra-1/Figure-2.png" alt><br>如图，合并相似点（邻接点相同、距离均相近）</p>
<h3 id="动态-Dijkstra-压缩"><a href="#动态-Dijkstra-压缩" class="headerlink" title="动态 Dijkstra 压缩"></a>动态 Dijkstra 压缩</h3><p>先将所有点按度数排序（压进优先队列），每次弹出一个顶点，把它的 Dijkstra 最短路的所有路径加入新图G’中。<br>当G’的压缩率（G’的边数/G的边数）达到某一要求值时结束循环。  </p>
<p>讲道理，看到这里的时候我是崩溃的。这压缩能用？<br>边数：<br><img src="http://halelu.github.io/2016/05/Something-About-Dijkstra-1/Figure-3.png" alt="边数"><br>随机两点间最短距离：<br><img src="http://halelu.github.io/2016/05/Something-About-Dijkstra-1/Figure-4.png" alt="随机两点间最短路和原图的比"><br>答案准确度（随机两点间最短路和原图的比）：<br><img src="http://halelu.github.io/2016/05/Something-About-Dijkstra-1/Figure-5.png" alt="随机两点间最短路和原图的比"><br>和原图的 Dijkstra 运行时间比：<br><img src="http://halelu.github.io/2016/05/Something-About-Dijkstra-1/Figure-6.png" alt="和原图的 Dijkstra 运行时间比"><br><img src="http://halelu.github.io/2016/05/Something-About-Dijkstra-1/Figure-7.png" alt="和原图的 Dijkstra 运行时间比"><br>感觉作用不大啊。。  </p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>试图压缩稀疏图的想法并不靠谱。压缩率在0.9的时候还能接受。然而做一次压缩所需要的时间耗费太过巨大，所以并不推荐使用图压缩。</p>
]]></content>
      
        <categories>
            
            <category> 算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> Dijkstra </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[A New Beginning]]></title>
      <url>https://HaleLu.github.io/2016/05/A-New-Beginning/</url>
      <content type="html"><![CDATA[<h3 id="絮絮叨叨"><a href="#絮絮叨叨" class="headerlink" title="絮絮叨叨"></a>絮絮叨叨</h3><p>前几天在 Facebook 上说自己太水，要开始写博客。  </p>
<p>上午（其实已经是昨天上午了）的时候准备给大一的讲 git ，偶然发现 Github 可以搭网站。 </p>
<p>傍晚的时候PM突然也用 Github 搭出了 Blog 。  </p>
<p>那就动手咯~  </p>
<a id="more"></a>

<h3 id="搭站"><a href="#搭站" class="headerlink" title="搭站"></a>搭站</h3><p>照着 <a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/</a> 文档；<br>装上 Node.js 和 Git ；  </p>
<p>然后</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>再然后</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ <span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure>

<p>一通乱搞。</p>
<p>换个 theme ，改改 _config.yml ；<br>git 一下，再部署一下 deploy ；<br>跑一下</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure>

<p>然后就开始创建博客了</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>看起来好像挺简单。</p>
<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>虽然是搭好了，但还是得好好看看 md ，毕竟以后都得用这语言写博客。  </p>
<p>搭建这个 blog 算是一个开始吧。今后好好写代码。  </p>
<p>Android &amp; .NET &amp; C/C++ &amp; 算法</p>
<p>祝我这次不再断更。</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 搭站 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
